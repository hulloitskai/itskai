"""
Requires that exactly one field must be supplied and that field must not be `null`.
"""
directive @oneOf on INPUT_OBJECT

"""Autogenerated input type of ActivateScottkitSignal"""
input ActivateScottkitSignalInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  type: ScottkitSignalType!
}

"""Autogenerated return type of ActivateScottkitSignal."""
type ActivateScottkitSignalPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  success: Boolean!
}

"""Autogenerated input type of AddJournalEntryComment"""
input AddJournalEntryCommentInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  entryId: ID!
  text: String!
}

"""Autogenerated return type of AddJournalEntryComment."""
type AddJournalEntryCommentPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  success: Boolean!
}

"""An ISO 8601-encoded date"""
scalar Date

"""An ISO 8601-encoded datetime"""
scalar DateTime

type ICloudCredentials implements Node {
  cookies: String
  email: String!

  """ID of the object."""
  id: ID!
  password: String!
  session: JSON
}

type Image implements Node {
  """ID of the object."""
  id: ID!
  signedId: String!
  url(size: ImageSize = MD): String!
}

input ImageInput {
  signedId: String!
}

enum ImageSize {
  LG
  MD
  SM
}

type InputFieldError {
  field: String!
  message: String!
}

type InstagramCredentials implements Node {
  """ID of the object."""
  id: ID!
  password: String!
  session: JSON
  username: String!
}

"""Represents untyped JSON"""
scalar JSON

type JournalEntry implements Node {
  content: [JSON!]!

  """ID of the object."""
  id: ID!
  modifiedAt: DateTime!
  nextEntryId: ID
  startedAt: DateTime!
  title: String!
  url: String!
}

type Location implements Node {
  approximateAddress: String!
  googleMapsAreaUrl: String!

  """ID of the object."""
  id: ID!
  timestamp: DateTime!
}

type Mutation {
  activateScottkitSignal(
    """Parameters for ActivateScottkitSignal"""
    input: ActivateScottkitSignalInput!
  ): ActivateScottkitSignalPayload!
  addJournalEntryComment(
    """Parameters for AddJournalEntryComment"""
    input: AddJournalEntryCommentInput!
  ): AddJournalEntryCommentPayload!
  removeGoogleCredentials(
    """Parameters for RemoveGoogleCredentials"""
    input: RemoveGoogleCredentialsInput!
  ): RemoveGoogleCredentialsPayload!
  removeICloudCredentials(
    """Parameters for RemoveICloudCredentials"""
    input: RemoveICloudCredentialsInput!
  ): RemoveICloudCredentialsPayload!
  removeInstagramCredentials(
    """Parameters for RemoveInstagramCredentials"""
    input: RemoveInstagramCredentialsInput!
  ): RemoveInstagramCredentialsPayload!
  removeSpotifyCredentials(
    """Parameters for RemoveSpotifyCredentials"""
    input: RemoveSpotifyCredentialsInput!
  ): RemoveSpotifyCredentialsPayload!
  requestUserEmailVerification(
    """Parameters for RequestUserEmailVerification"""
    input: RequestUserEmailVerificationInput!
  ): RequestUserEmailVerificationPayload!
  requestUserPasswordReset(
    """Parameters for RequestUserPasswordReset"""
    input: RequestUserPasswordResetInput!
  ): RequestUserPasswordResetPayload!
  syncJournalEntries(
    """Parameters for SyncJournalEntries"""
    input: SyncJournalEntriesInput!
  ): SyncJournalEntriesPayload!
  syncLocation(
    """Parameters for SyncLocation"""
    input: SyncLocationInput!
  ): SyncLocationPayload!
  testMutation(
    """Parameters for TestMutation"""
    input: TestMutationInput!
  ): TestMutationPayload!
  updateICloudCredentials(
    """Parameters for UpdateICloudCredentials"""
    input: UpdateICloudCredentialsInput!
  ): UpdateICloudCredentialsPayload!
  updateInstagramCredentials(
    """Parameters for UpdateInstagramCredentials"""
    input: UpdateInstagramCredentialsInput!
  ): UpdateInstagramCredentialsPayload!
  updateUserEmail(
    """Parameters for UpdateUserEmail"""
    input: UpdateUserEmailInput!
  ): UpdateUserEmailPayload!
  updateUserProfile(
    """Parameters for UpdateUserProfile"""
    input: UpdateUserProfileInput!
  ): UpdateUserProfilePayload!
  verifyICloudSecurityCode(
    """Parameters for VerifyICloudSecurityCode"""
    input: VerifyICloudSecurityCodeInput!
  ): VerifyICloudSecurityCodePayload!
}

"""An object with an ID."""
interface Node {
  """ID of the object."""
  id: ID!
}

type NotionComment {
  createdAt: DateTime!
  id: String!
  modifiedAt: DateTime!
  richText: JSON!
}

type OAuthCredentials implements Node {
  accessToken: String

  """ID of the object."""
  id: ID!
  name: String!
  refreshToken: String
  uid: String!
}

type Query {
  activityStatus: String
  announcement: String

  """When the server was booted."""
  bootedAt: DateTime!

  """Kai's contact email."""
  contactEmail: String!

  """What I'm currently listening to on Spotify!"""
  currentlyPlaying: SpotifyCurrentlyPlaying
  googleCredentials: OAuthCredentials
  homepageJournalEntry(id: ID): JournalEntry
  icloudCredentials: ICloudCredentials
  imageBySignedId(signedId: String!): Image
  instagramCredentials: InstagramCredentials
  journalEntryComments(entryId: ID!): [NotionComment!]!

  """Kai's current approximate location."""
  location: Location
  passwordStrength(password: String!): Float!
  resume: JSON!
  spotifyCredentials: OAuthCredentials
  testEcho(text: String): String!
  timezone: Timezone!
  user(id: ID!): User
  viewer: User
}

"""Autogenerated input type of RemoveGoogleCredentials"""
input RemoveGoogleCredentialsInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated return type of RemoveGoogleCredentials."""
type RemoveGoogleCredentialsPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  success: Boolean!
}

"""Autogenerated input type of RemoveICloudCredentials"""
input RemoveICloudCredentialsInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated return type of RemoveICloudCredentials."""
type RemoveICloudCredentialsPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  success: Boolean!
}

"""Autogenerated input type of RemoveInstagramCredentials"""
input RemoveInstagramCredentialsInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated return type of RemoveInstagramCredentials."""
type RemoveInstagramCredentialsPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  success: Boolean!
}

"""Autogenerated input type of RemoveSpotifyCredentials"""
input RemoveSpotifyCredentialsInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated return type of RemoveSpotifyCredentials."""
type RemoveSpotifyCredentialsPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  success: Boolean!
}

"""Autogenerated input type of RequestUserEmailVerification"""
input RequestUserEmailVerificationInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  email: String!
}

"""Autogenerated return type of RequestUserEmailVerification."""
type RequestUserEmailVerificationPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  success: Boolean!
}

"""Autogenerated input type of RequestUserPasswordReset"""
input RequestUserPasswordResetInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  email: String!
}

"""Autogenerated return type of RequestUserPasswordReset."""
type RequestUserPasswordResetPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  success: Boolean!
}

enum ScottkitSignalType {
  BREAK
  PANIC
  RAND
}

type SpotifyAlbum {
  id: String!
  imageUrl: String
  name: String!
  url: String!
}

type SpotifyArtist {
  id: String!
  name: String!
  url: String!
}

type SpotifyCurrentlyPlaying {
  progressMilliseconds: Int!
  track: SpotifyTrack!
}

type SpotifyLyricLine {
  isExplicit: Boolean!
  startTimeMilliseconds: Int!
  words: String!
}

type SpotifyTrack {
  album: SpotifyAlbum!
  artists: [SpotifyArtist!]!
  durationMilliseconds: Int!
  id: String!
  lyrics: [SpotifyLyricLine!]
  name: String!
  url: String!
}

type Subscription {
  activityStatus: String
  currentlyPlaying: SpotifyCurrentlyPlaying
  testSubscription: Int!
}

"""Autogenerated input type of SyncJournalEntries"""
input SyncJournalEntriesInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated return type of SyncJournalEntries."""
type SyncJournalEntriesPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  success: Boolean!
}

"""Autogenerated input type of SyncLocation"""
input SyncLocationInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated return type of SyncLocation."""
type SyncLocationPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  success: Boolean!
}

type TestModel {
  birthday: Date
  id: ID!
  name: String!
}

"""Autogenerated input type of TestMutation"""
input TestMutationInput {
  birthday: Date

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  name: String!
}

"""Autogenerated return type of TestMutation."""
type TestMutationPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  errors: [InputFieldError!]
  model: TestModel
  success: Boolean!
}

type Timezone {
  abbreviation: String!
  name: String!
  offset: String!
  offsetMinutes: Int!
}

"""Autogenerated input type of UpdateICloudCredentials"""
input UpdateICloudCredentialsInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  email: String!
  password: String!
}

"""Autogenerated return type of UpdateICloudCredentials."""
type UpdateICloudCredentialsPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  credentials: ICloudCredentials
  errors: [InputFieldError!]
  success: Boolean!
}

"""Autogenerated input type of UpdateInstagramCredentials"""
input UpdateInstagramCredentialsInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  password: String!
  securityCode: String!
  username: String!
}

"""Autogenerated return type of UpdateInstagramCredentials."""
type UpdateInstagramCredentialsPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  credentials: InstagramCredentials
  errors: [InputFieldError!]
  success: Boolean!
}

"""Autogenerated input type of UpdateUserEmail"""
input UpdateUserEmailInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  currentPassword: String!
  email: String!
}

"""Autogenerated return type of UpdateUserEmail."""
type UpdateUserEmailPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  errors: [InputFieldError!]
  success: Boolean!
  user: User
}

"""Autogenerated input type of UpdateUserProfile"""
input UpdateUserProfileInput {
  avatar: ImageInput

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  name: String!
}

"""Autogenerated return type of UpdateUserProfile."""
type UpdateUserProfilePayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  errors: [InputFieldError!]
  success: Boolean!
  user: User
}

type User implements Node {
  avatar: Image
  email: String!

  """ID of the object."""
  id: ID!
  isOwner: Boolean!
  name: String!
  unverifiedEmail: String
}

"""Autogenerated input type of VerifyICloudSecurityCode"""
input VerifyICloudSecurityCodeInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  code: String!
}

"""Autogenerated return type of VerifyICloudSecurityCode."""
type VerifyICloudSecurityCodePayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  credentials: ICloudCredentials!
  success: Boolean!
}