"""
Requires that exactly one field must be supplied and that field must not be `null`.
"""
directive @oneOf on INPUT_OBJECT

"""Autogenerated input type of ActivateScottkitSignal"""
input ActivateScottkitSignalInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  type: ScottkitSignalType!
}

"""Autogenerated return type of ActivateScottkitSignal."""
type ActivateScottkitSignalPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  success: Boolean!
}

"""Autogenerated input type of AddJournalEntryComment"""
input AddJournalEntryCommentInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  entryId: String!
  text: String!
}

"""Autogenerated return type of AddJournalEntryComment."""
type AddJournalEntryCommentPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  success: Boolean!
}

input CookieInput {
  domain: String!
  expirationDate: Int
  hostOnly: Boolean!
  httpOnly: Boolean!
  name: String!
  path: String!
  sameSite: String!
  secure: Boolean!
  session: Boolean!
  value: String!
}

"""An ISO 8601-encoded date"""
scalar Date

"""An ISO 8601-encoded datetime"""
scalar DateTime

type ICloudCredentials implements Node {
  cookies: String
  email: String!

  """ID of the object."""
  id: ID!
  password: String!
  session: JSON
}

type Image implements Node {
  """ID of the object."""
  id: ID!
  signedId: String!
  url(size: ImageSize = MD): String!
}

enum ImageSize {
  LG
  MD
  SM
}

"""Autogenerated input type of ImportCookies"""
input ImportCookiesInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  cookies: [CookieInput!]!
}

"""Autogenerated return type of ImportCookies."""
type ImportCookiesPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  success: Boolean!
}

"""Autogenerated input type of ImportJournalEntries"""
input ImportJournalEntriesInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated return type of ImportJournalEntries."""
type ImportJournalEntriesPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  success: Boolean!
}

"""Autogenerated input type of ImportObsidianNotes"""
input ImportObsidianNotesInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated return type of ImportObsidianNotes."""
type ImportObsidianNotesPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  success: Boolean!
}

type InputFieldError {
  field: String!
  message: String!
}

"""Represents untyped JSON"""
scalar JSON

type JournalEntry implements Node {
  content: [JSON!]!

  """ID of the object."""
  id: ID!
  modifiedAt: DateTime!
  nextEntryId: ID
  startedAt: DateTime!
  title: String!
  url: String!
}

type Mutation {
  activateScottkitSignal(
    """Parameters for ActivateScottkitSignal"""
    input: ActivateScottkitSignalInput!
  ): ActivateScottkitSignalPayload!
  addJournalEntryComment(
    """Parameters for AddJournalEntryComment"""
    input: AddJournalEntryCommentInput!
  ): AddJournalEntryCommentPayload!
  importCookies(
    """Parameters for ImportCookies"""
    input: ImportCookiesInput!
  ): ImportCookiesPayload!
  importJournalEntries(
    """Parameters for ImportJournalEntries"""
    input: ImportJournalEntriesInput!
  ): ImportJournalEntriesPayload!
  importObsidianNotes(
    """Parameters for ImportObsidianNotes"""
    input: ImportObsidianNotesInput!
  ): ImportObsidianNotesPayload!
  removeICloudCredentials(
    """Parameters for RemoveICloudCredentials"""
    input: RemoveICloudCredentialsInput!
  ): RemoveICloudCredentialsPayload!
  removeSpotifyCredentials(
    """Parameters for RemoveSpotifyCredentials"""
    input: RemoveSpotifyCredentialsInput!
  ): RemoveSpotifyCredentialsPayload!
  sendUserEmailVerificationInstructions(
    """Parameters for SendUserEmailVerificationInstructions"""
    input: SendUserEmailVerificationInstructionsInput!
  ): SendUserEmailVerificationInstructionsPayload!
  sendUserPasswordResetInstructions(
    """Parameters for SendUserPasswordResetInstructions"""
    input: SendUserPasswordResetInstructionsInput!
  ): SendUserPasswordResetInstructionsPayload!
  testMutation(
    """Parameters for TestMutation"""
    input: TestMutationInput!
  ): TestMutationPayload!
  updateICloudCredentials(
    """Parameters for UpdateICloudCredentials"""
    input: UpdateICloudCredentialsInput!
  ): UpdateICloudCredentialsPayload!
  updateUserEmail(
    """Parameters for UpdateUserEmail"""
    input: UpdateUserEmailInput!
  ): UpdateUserEmailPayload!
  updateUserProfile(
    """Parameters for UpdateUserProfile"""
    input: UpdateUserProfileInput!
  ): UpdateUserProfilePayload!
  verifyICloudSecurityCode(
    """Parameters for VerifyICloudSecurityCode"""
    input: VerifyICloudSecurityCodeInput!
  ): VerifyICloudSecurityCodePayload!
}

"""An object with an ID."""
interface Node {
  """ID of the object."""
  id: ID!
}

type NotionComment {
  createdAt: DateTime!
  id: String!
  modifiedAt: DateTime!
  richText: JSON!
}

type OAuthCredentials implements Node {
  accessToken: String

  """ID of the object."""
  id: ID!
  name: String!
  refreshToken: String
  uid: String!
}

"""An object with an ID."""
interface ObsidianEntry implements Node {
  createdAt: DateTime!

  """ID of the object."""
  id: ID!
  name: String!
  referencedBy: [ObsidianNote!]!
  title: String!
  updatedAt: DateTime!
}

type ObsidianNote implements Node & ObsidianEntry {
  aliases: [String!]!
  blurb: String
  content: String
  createdAt: DateTime!

  """ID of the object."""
  id: ID!
  isPublished: Boolean!
  modifiedAt: DateTime!
  name: String!
  plainBlurb: String
  referencedBy: [ObsidianNote!]!
  references: [ObsidianEntry!]!
  tags: [String!]!
  title: String!
  updatedAt: DateTime!
  url: String!
}

"""The connection type for ObsidianNote."""
type ObsidianNoteConnection {
  """A list of edges."""
  edges: [ObsidianNoteEdge!]!

  """A list of nodes."""
  nodes: [ObsidianNote!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!
  totalCount: Int!
}

"""An edge in a connection."""
type ObsidianNoteEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: ObsidianNote!
}

type ObsidianStub implements Node & ObsidianEntry {
  createdAt: DateTime!

  """ID of the object."""
  id: ID!
  name: String!
  referencedBy: [ObsidianNote!]!
  title: String!
  updatedAt: DateTime!
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, the cursor to continue."""
  endCursor: String

  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String
}

type Query {
  activityStatus: String

  """Kai's contact email."""
  contactEmail: String!

  """What I'm currently listening to on Spotify!"""
  currentlyPlaying: SpotifyCurrentlyPlaying
  homepageJournalEntry(id: ID): JournalEntry

  """Kai's personal iCloud credentials (#securityStartsHere)."""
  icloudCredentials: ICloudCredentials
  imageBySignedId(signedId: String!): Image
  journalEntryComments(entryId: ID!): [NotionComment!]!
  obsidianNote(id: ID!): ObsidianNote
  obsidianNoteByName(name: String!): ObsidianNote
  obsidianNotes(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
    modifiedAfter: DateTime
    modifiedBefore: DateTime
  ): ObsidianNoteConnection!
  passwordStrength(password: String!): Float!

  """Kai's JSON Resume (https://jsonresume.org/)."""
  resume: JSON!

  """Spotify OAuth credentials."""
  spotifyCredentials: OAuthCredentials
  testEcho(text: String): String!

  """Kai's current timezone."""
  timezone: Timezone!

  """The currently authenticated user."""
  viewer: User
}

"""Autogenerated input type of RemoveICloudCredentials"""
input RemoveICloudCredentialsInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated return type of RemoveICloudCredentials."""
type RemoveICloudCredentialsPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  success: Boolean!
}

"""Autogenerated input type of RemoveSpotifyCredentials"""
input RemoveSpotifyCredentialsInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated return type of RemoveSpotifyCredentials."""
type RemoveSpotifyCredentialsPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  success: Boolean!
}

enum ScottkitSignalType {
  BREAK
  PANIC
  RAND
}

"""Autogenerated input type of SendUserEmailVerificationInstructions"""
input SendUserEmailVerificationInstructionsInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  email: String!
}

"""Autogenerated return type of SendUserEmailVerificationInstructions."""
type SendUserEmailVerificationInstructionsPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  success: Boolean!
}

"""Autogenerated input type of SendUserPasswordResetInstructions"""
input SendUserPasswordResetInstructionsInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  email: String!
}

"""Autogenerated return type of SendUserPasswordResetInstructions."""
type SendUserPasswordResetInstructionsPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  success: Boolean!
}

type SpotifyAlbum {
  id: String!
  imageUrl: String
  name: String!
  url: String!
}

type SpotifyArtist {
  id: String!
  name: String!
  url: String!
}

type SpotifyCurrentlyPlaying {
  progressMilliseconds: Int!
  track: SpotifyTrack!
}

type SpotifyLyricLine {
  isExplicit: Boolean!
  startTimeMilliseconds: Int!
  words: String!
}

type SpotifyTrack {
  album: SpotifyAlbum!
  artists: [SpotifyArtist!]!
  durationMilliseconds: Int!
  id: String!
  lyrics: [SpotifyLyricLine!]
  name: String!
  url: String!
}

type Subscription {
  activityStatus: String

  """What I'm currently listening to on Spotify!"""
  currentlyPlaying: SpotifyCurrentlyPlaying
  testSubscription: Int!
}

type TestModel {
  birthday: Date
  id: ID!
  name: String!
}

"""Autogenerated input type of TestMutation"""
input TestMutationInput {
  birthday: Date

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  name: String!
}

"""Autogenerated return type of TestMutation."""
type TestMutationPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  errors: [InputFieldError!]
  model: TestModel
  success: Boolean!
}

type Timezone {
  abbreviation: String!
  name: String!
  offset: String!
  offsetMinutes: Int!
}

"""Autogenerated input type of UpdateICloudCredentials"""
input UpdateICloudCredentialsInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  email: String!
  password: String!
}

"""Autogenerated return type of UpdateICloudCredentials."""
type UpdateICloudCredentialsPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  errors: [InputFieldError!]
  icloudCredentials: ICloudCredentials
  success: Boolean!
}

"""Autogenerated input type of UpdateUserEmail"""
input UpdateUserEmailInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  currentPassword: String!
  email: String!
}

"""Autogenerated return type of UpdateUserEmail."""
type UpdateUserEmailPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  errors: [InputFieldError!]
  success: Boolean!
  user: User
}

"""Autogenerated input type of UpdateUserProfile"""
input UpdateUserProfileInput {
  avatar: String

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  name: String!
}

"""Autogenerated return type of UpdateUserProfile."""
type UpdateUserProfilePayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  errors: [InputFieldError!]
  success: Boolean!
  user: User
}

type User implements Node {
  avatar: Image
  email: String!

  """ID of the object."""
  id: ID!
  isOwner: Boolean!
  name: String!
  unverifiedEmail: String
}

"""Autogenerated input type of VerifyICloudSecurityCode"""
input VerifyICloudSecurityCodeInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  code: String!
}

"""Autogenerated return type of VerifyICloudSecurityCode."""
type VerifyICloudSecurityCodePayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  icloudCredentials: ICloudCredentials!
  success: Boolean!
}