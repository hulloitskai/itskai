#!/usr/bin/env ruby
# frozen_string_literal: true

require "fileutils"

# == Helpers
# Path to your application root.
APP_ROOT = File.expand_path("..", __dir__)

def system!(*args)
  system(*args) || abort("Command `#{args.join(' ')}' failed")
end

# == Command
if ["", nil].include?(ENV["CI"]) &&
    !system("docker info", out: File::NULL, err: File::NULL)
  if `uname`.strip == "Darwin"
    puts "Starting Docker..."
    system("open -a Docker")
    sleep 2 # wait for Docker to boot
  else
    abort("Docker isn't running! Please start Docker and try again.")
  end
end

FileUtils.chdir APP_ROOT do
  # This script is a way to set up or update your development environment
  # automatically. This script is idempotent, so that you can run it at any time
  # and get an expectable outcome.
  #
  # Add necessary setup steps to this file.

  puts "=> Installing Ruby"
  system("command -v rbenv", out: File::NULL) && \
    system!("rbenv install --skip-existing")
  puts "Ruby installed"

  puts "\n=> Installing Ruby dependencies"
  system! "gem install bundler --conservative"
  system("bundle check") || system!("bundle install")

  puts "\n=> Installing Node"
  system("command -v nodenv", out: File::NULL) && \
    system!("nodenv install --skip-existing")
  puts "Node installed"

  puts "\n=> Installing Node dependencies"
  system!("npm install") &&
    puts("Node dependencies are installed")

  puts "\n=> Installing Python"
  system("command -v pyenv", out: File::NULL) && \
    system!("pyenv install --skip-existing")
  puts "Python installed"

  puts "\n=> Install Python dependencies"
  system! "poetry install"

  puts "\n=> Installing git hooks"
  system! "bundle exec lefthook install"

  puts "\n=> Installing Playwright"
  system! "npx --yes playwright install chromium"

  unless File.exist?(".env")
    puts "\n=> Copying .env.example to .env"
    FileUtils.cp ".env.example", ".env"
  end

  db_pid = nil
  unless ENV["CI"]
    puts "\n=> Starting database"
    db_pid = spawn("bin/postgres", pgroup: true)
    system! "bin/wait_for_postgres_ready"
  end

  puts "\n=> Preparing database"
  system! "bundle exec rails db:prepare"
  puts "Database ready"

  unless ENV["CI"]
    puts "\n=> Running deployment tasks"
    system! "bundle exec rails after_party:run"
  end

  puts "\n=> Removing old logs and tempfiles"
  system! "bundle exec rails log:clear tmp:clear"
  puts "Files removed"

  puts "\n=> Restarting application server"
  system! "bundle exec rails restart"
  puts "Server restarted"

  if db_pid
    puts "\n=> Stopping database"
    Process.kill("-INT", Process.getpgid(db_pid))
    Process.waitpid(db_pid)
    puts "Database stopped"
  end
end
