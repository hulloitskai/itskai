#!/usr/bin/env ruby
# frozen_string_literal: true

require "fileutils"

# == Helpers
# Path to your application root.
APP_ROOT = File.expand_path("..", __dir__)

def system!(*args)
  system(*args) || abort("Command `#{args.join(' ')}' failed")
end

# == Command
if ["", nil].include?(ENV["CI"]) && \
    !system("docker info", out: File::NULL, err: File::NULL)
  abort("Docker isn't running! Please start Docker and try again.")
end

FileUtils.chdir APP_ROOT do
  # This script is a way to set up or update your development environment
  # automatically. This script is idempotent, so that you can run it at any time
  # and get an expectable outcome.
  #
  # Add necessary setup steps to this file.

  puts "=> Installing Ruby dependencies"
  system! "rbenv install"
  system! "gem install bundler --conservative"
  system("bundle check") || system!("bundle install")

  puts "\n=> Installing Node dependencies"
  system! "nodenv install"
  system!("bin/yarn --silent install") &&
    puts("Node dependencies are installed")

  puts "\n=> Install Python dependencies"
  system! "pip install -r requirements.txt"

  puts "\n=> Installing githooks"
  system! "bin/yarn --silent husky install"

  # puts "\n=> Copying sample files"
  # unless File.exist?("config/database.yml")
  #   FileUtils.cp "config/database.yml.sample", "config/database.yml"
  # end

  puts "\n=> Starting database"
  case ENV["CI"]
  when "", nil
    system! "docker compose up --wait --no-log-prefix postgres"
    sleep 2
  else
    puts "Running on CI; skipping"
  end

  puts "\n=> Preparing database"
  system! "bin/rails db:prepare"

  puts "\n=> Removing old logs and tempfiles"
  system! "bin/rails log:clear tmp:clear"
  puts "Files removed"

  puts "\n=> Restarting application server"
  system! "bin/rails restart"
  puts "Server restarted"
end
