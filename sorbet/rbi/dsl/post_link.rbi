# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `PostLink`.
# Please instead update this file by running `bin/tapioca dsl PostLink`.

class PostLink
  include GeneratedAssociationMethods
  include GeneratedAttributeMethods
  extend CommonRelationMethods
  extend GeneratedRelationMethods

  sig { params(method_name: T.untyped, mode: T.nilable(Symbol), refresh: T::Boolean).returns(T.untyped) }
  def reindex(method_name = nil, mode: nil, refresh: false); end

  sig { returns(T::Hash[String, T.untyped]) }
  def search_data; end

  sig { returns(T::Boolean) }
  def should_index?; end

  sig { params(options: T.untyped).returns(Searchkick::Relation) }
  def similar(**options); end

  private

  sig { returns(NilClass) }
  def to_ary; end

  class << self
    sig { params(term: String, options: T.untyped, block: T.untyped).returns(Searchkick::Relation) }
    def search(term = "*", **options, &block); end

    sig { params(name: T.untyped).returns(Searchkick::Index) }
    def search_index(name: nil); end
  end

  module CommonRelationMethods
    sig { params(block: T.nilable(T.proc.params(record: ::PostLink).returns(T.untyped))).returns(T::Boolean) }
    def any?(&block); end

    sig { params(column_name: T.any(String, Symbol)).returns(T.untyped) }
    def average(column_name); end

    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::PostLink).void)).returns(::PostLink) }
    def build(attributes = nil, &block); end

    sig { params(operation: Symbol, column_name: T.any(String, Symbol)).returns(T.untyped) }
    def calculate(operation, column_name); end

    sig { params(column_name: T.untyped).returns(T.untyped) }
    def count(column_name = nil); end

    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::PostLink).void)).returns(::PostLink) }
    def create(attributes = nil, &block); end

    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::PostLink).void)).returns(::PostLink) }
    def create!(attributes = nil, &block); end

    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::PostLink).void)).returns(::PostLink) }
    def create_or_find_by(attributes, &block); end

    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::PostLink).void)).returns(::PostLink) }
    def create_or_find_by!(attributes, &block); end

    sig { returns(T::Array[::PostLink]) }
    def destroy_all; end

    sig { params(conditions: T.untyped).returns(T::Boolean) }
    def exists?(conditions = :none); end

    sig { returns(T.nilable(::PostLink)) }
    def fifth; end

    sig { returns(::PostLink) }
    def fifth!; end

    sig { params(args: T.untyped).returns(T.untyped) }
    def find(*args); end

    sig { params(args: T.untyped).returns(T.nilable(::PostLink)) }
    def find_by(*args); end

    sig { params(args: T.untyped).returns(::PostLink) }
    def find_by!(*args); end

    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::PostLink).void)).returns(::PostLink) }
    def find_or_create_by(attributes, &block); end

    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::PostLink).void)).returns(::PostLink) }
    def find_or_create_by!(attributes, &block); end

    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::PostLink).void)).returns(::PostLink) }
    def find_or_initialize_by(attributes, &block); end

    sig { params(arg: T.untyped, args: T.untyped).returns(::PostLink) }
    def find_sole_by(arg, *args); end

    sig { params(limit: T.untyped).returns(T.untyped) }
    def first(limit = nil); end

    sig { returns(::PostLink) }
    def first!; end

    sig { returns(T.nilable(::PostLink)) }
    def forty_two; end

    sig { returns(::PostLink) }
    def forty_two!; end

    sig { returns(T.nilable(::PostLink)) }
    def fourth; end

    sig { returns(::PostLink) }
    def fourth!; end

    sig { returns(Array) }
    def ids; end

    sig { params(record: T.untyped).returns(T::Boolean) }
    def include?(record); end

    sig { params(limit: T.untyped).returns(T.untyped) }
    def last(limit = nil); end

    sig { returns(::PostLink) }
    def last!; end

    sig { params(block: T.nilable(T.proc.params(record: ::PostLink).returns(T.untyped))).returns(T::Boolean) }
    def many?(&block); end

    sig { params(column_name: T.any(String, Symbol)).returns(T.untyped) }
    def maximum(column_name); end

    sig { params(record: T.untyped).returns(T::Boolean) }
    def member?(record); end

    sig { params(column_name: T.any(String, Symbol)).returns(T.untyped) }
    def minimum(column_name); end

    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::PostLink).void)).returns(::PostLink) }
    def new(attributes = nil, &block); end

    sig { params(block: T.nilable(T.proc.params(record: ::PostLink).returns(T.untyped))).returns(T::Boolean) }
    def none?(&block); end

    sig { params(block: T.nilable(T.proc.params(record: ::PostLink).returns(T.untyped))).returns(T::Boolean) }
    def one?(&block); end

    sig { params(column_names: T.untyped).returns(T.untyped) }
    def pick(*column_names); end

    sig { params(column_names: T.untyped).returns(T.untyped) }
    def pluck(*column_names); end

    sig { returns(T.nilable(::PostLink)) }
    def second; end

    sig { returns(::PostLink) }
    def second!; end

    sig { returns(T.nilable(::PostLink)) }
    def second_to_last; end

    sig { returns(::PostLink) }
    def second_to_last!; end

    sig { returns(::PostLink) }
    def sole; end

    sig do
      params(
        column_name: T.nilable(T.any(String, Symbol)),
        block: T.nilable(T.proc.params(record: T.untyped).returns(T.untyped))
      ).returns(T.untyped)
    end
    def sum(column_name = nil, &block); end

    sig { params(limit: T.untyped).returns(T.untyped) }
    def take(limit = nil); end

    sig { returns(::PostLink) }
    def take!; end

    sig { returns(T.nilable(::PostLink)) }
    def third; end

    sig { returns(::PostLink) }
    def third!; end

    sig { returns(T.nilable(::PostLink)) }
    def third_to_last; end

    sig { returns(::PostLink) }
    def third_to_last!; end
  end

  module GeneratedAssociationMethods
    sig { params(args: T.untyped, blk: T.untyped).returns(::Post) }
    def build_post(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Post) }
    def create_post(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Post) }
    def create_post!(*args, &blk); end

    sig { returns(T.nilable(::Post)) }
    def post; end

    sig { params(value: T.nilable(::Post)).void }
    def post=(value); end

    sig { returns(T.nilable(::Post)) }
    def reload_post; end
  end

  module GeneratedAssociationRelationMethods
    sig { returns(PrivateAssociationRelation) }
    def all; end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def and(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def annotate(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def chronological(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def create_with(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def distinct(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def eager_load(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def except(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def excluding(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def extending(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def extract_associated(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def from(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def group(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def having(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def in_order_of(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def includes(*args, &blk); end

    sig do
      params(
        attributes: Hash,
        returning: T.nilable(T.any(T::Array[Symbol], FalseClass)),
        unique_by: T.nilable(T.any(T::Array[Symbol], Symbol))
      ).returns(ActiveRecord::Result)
    end
    def insert(attributes, returning: nil, unique_by: nil); end

    sig do
      params(
        attributes: Hash,
        returning: T.nilable(T.any(T::Array[Symbol], FalseClass))
      ).returns(ActiveRecord::Result)
    end
    def insert!(attributes, returning: nil); end

    sig do
      params(
        attributes: T::Array[Hash],
        returning: T.nilable(T.any(T::Array[Symbol], FalseClass)),
        unique_by: T.nilable(T.any(T::Array[Symbol], Symbol))
      ).returns(ActiveRecord::Result)
    end
    def insert_all(attributes, returning: nil, unique_by: nil); end

    sig do
      params(
        attributes: T::Array[Hash],
        returning: T.nilable(T.any(T::Array[Symbol], FalseClass))
      ).returns(ActiveRecord::Result)
    end
    def insert_all!(attributes, returning: nil); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def invert_where(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def left_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def left_outer_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def limit(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def lock(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def merge(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def none(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def offset(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def only(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def optimizer_hints(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def or(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def preload(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def readonly(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def references(*args, &blk); end

    sig { params(method_name: T.untyped, options: T.untyped).returns(T::Boolean) }
    def reindex(method_name = nil, **options); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def reorder(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def reselect(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def reverse_chronological(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def reverse_order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def rewhere(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def select(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def strict_loading(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def structurally_compatible?(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def uniq!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def unscope(*args, &blk); end

    sig do
      params(
        attributes: Hash,
        returning: T.nilable(T.any(T::Array[Symbol], FalseClass)),
        unique_by: T.nilable(T.any(T::Array[Symbol], Symbol))
      ).returns(ActiveRecord::Result)
    end
    def upsert(attributes, returning: nil, unique_by: nil); end

    sig do
      params(
        attributes: T::Array[Hash],
        returning: T.nilable(T.any(T::Array[Symbol], FalseClass)),
        unique_by: T.nilable(T.any(T::Array[Symbol], Symbol))
      ).returns(ActiveRecord::Result)
    end
    def upsert_all(attributes, returning: nil, unique_by: nil); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelationWhereChain) }
    def where(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def without(*args, &blk); end
  end

  module GeneratedAttributeMethods
    sig { returns(T::Boolean) }
    def analyzed; end

    sig { params(value: T::Boolean).returns(T::Boolean) }
    def analyzed=(value); end

    sig { returns(T::Boolean) }
    def analyzed?; end

    sig { returns(T.nilable(T::Boolean)) }
    def analyzed_before_last_save; end

    sig { returns(T.untyped) }
    def analyzed_before_type_cast; end

    sig { returns(T::Boolean) }
    def analyzed_came_from_user?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def analyzed_change; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def analyzed_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def analyzed_changed?; end

    sig { returns(T.nilable(T::Boolean)) }
    def analyzed_in_database; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def analyzed_previous_change; end

    sig { returns(T::Boolean) }
    def analyzed_previously_changed?; end

    sig { returns(T.nilable(T::Boolean)) }
    def analyzed_previously_was; end

    sig { returns(T.nilable(T::Boolean)) }
    def analyzed_was; end

    sig { void }
    def analyzed_will_change!; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at; end

    sig { params(value: ::ActiveSupport::TimeWithZone).returns(::ActiveSupport::TimeWithZone) }
    def created_at=(value); end

    sig { returns(T::Boolean) }
    def created_at?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_before_last_save; end

    sig { returns(T.untyped) }
    def created_at_before_type_cast; end

    sig { returns(T::Boolean) }
    def created_at_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def created_at_change; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def created_at_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def created_at_changed?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_in_database; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def created_at_previous_change; end

    sig { returns(T::Boolean) }
    def created_at_previously_changed?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_was; end

    sig { void }
    def created_at_will_change!; end

    sig { returns(T.nilable(::String)) }
    def description; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def description=(value); end

    sig { returns(T::Boolean) }
    def description?; end

    sig { returns(T.nilable(::String)) }
    def description_before_last_save; end

    sig { returns(T.untyped) }
    def description_before_type_cast; end

    sig { returns(T::Boolean) }
    def description_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def description_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def description_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def description_changed?; end

    sig { returns(T.nilable(::String)) }
    def description_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def description_previous_change; end

    sig { returns(T::Boolean) }
    def description_previously_changed?; end

    sig { returns(T.nilable(::String)) }
    def description_previously_was; end

    sig { returns(T.nilable(::String)) }
    def description_was; end

    sig { void }
    def description_will_change!; end

    sig { returns(T.nilable(::String)) }
    def embed_body; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def embed_body=(value); end

    sig { returns(T::Boolean) }
    def embed_body?; end

    sig { returns(T.nilable(::String)) }
    def embed_body_before_last_save; end

    sig { returns(T.untyped) }
    def embed_body_before_type_cast; end

    sig { returns(T::Boolean) }
    def embed_body_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def embed_body_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def embed_body_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def embed_body_changed?; end

    sig { returns(T.nilable(::String)) }
    def embed_body_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def embed_body_previous_change; end

    sig { returns(T::Boolean) }
    def embed_body_previously_changed?; end

    sig { returns(T.nilable(::String)) }
    def embed_body_previously_was; end

    sig { returns(T.nilable(::String)) }
    def embed_body_was; end

    sig { void }
    def embed_body_will_change!; end

    sig { returns(T.nilable(::String)) }
    def embed_type; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def embed_type=(value); end

    sig { returns(T::Boolean) }
    def embed_type?; end

    sig { returns(T.nilable(::String)) }
    def embed_type_before_last_save; end

    sig { returns(T.untyped) }
    def embed_type_before_type_cast; end

    sig { returns(T::Boolean) }
    def embed_type_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def embed_type_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def embed_type_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def embed_type_changed?; end

    sig { returns(T.nilable(::String)) }
    def embed_type_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def embed_type_previous_change; end

    sig { returns(T::Boolean) }
    def embed_type_previously_changed?; end

    sig { returns(T.nilable(::String)) }
    def embed_type_previously_was; end

    sig { returns(T.nilable(::String)) }
    def embed_type_was; end

    sig { void }
    def embed_type_will_change!; end

    sig { returns(T.nilable(::String)) }
    def id; end

    sig { params(value: ::String).returns(::String) }
    def id=(value); end

    sig { returns(T::Boolean) }
    def id?; end

    sig { returns(T.nilable(::String)) }
    def id_before_last_save; end

    sig { returns(T.untyped) }
    def id_before_type_cast; end

    sig { returns(T::Boolean) }
    def id_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def id_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def id_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def id_changed?; end

    sig { returns(T.nilable(::String)) }
    def id_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def id_previous_change; end

    sig { returns(T::Boolean) }
    def id_previously_changed?; end

    sig { returns(T.nilable(::String)) }
    def id_previously_was; end

    sig { returns(T.nilable(::String)) }
    def id_was; end

    sig { void }
    def id_will_change!; end

    sig { returns(T.nilable(::String)) }
    def image_url; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def image_url=(value); end

    sig { returns(T::Boolean) }
    def image_url?; end

    sig { returns(T.nilable(::String)) }
    def image_url_before_last_save; end

    sig { returns(T.untyped) }
    def image_url_before_type_cast; end

    sig { returns(T::Boolean) }
    def image_url_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def image_url_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def image_url_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def image_url_changed?; end

    sig { returns(T.nilable(::String)) }
    def image_url_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def image_url_previous_change; end

    sig { returns(T::Boolean) }
    def image_url_previously_changed?; end

    sig { returns(T.nilable(::String)) }
    def image_url_previously_was; end

    sig { returns(T.nilable(::String)) }
    def image_url_was; end

    sig { void }
    def image_url_will_change!; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def imported_at; end

    sig { params(value: T.nilable(::ActiveSupport::TimeWithZone)).returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def imported_at=(value); end

    sig { returns(T::Boolean) }
    def imported_at?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def imported_at_before_last_save; end

    sig { returns(T.untyped) }
    def imported_at_before_type_cast; end

    sig { returns(T::Boolean) }
    def imported_at_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def imported_at_change; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def imported_at_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def imported_at_changed?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def imported_at_in_database; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def imported_at_previous_change; end

    sig { returns(T::Boolean) }
    def imported_at_previously_changed?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def imported_at_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def imported_at_was; end

    sig { void }
    def imported_at_will_change!; end

    sig { returns(T.nilable(::String)) }
    def media_url; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def media_url=(value); end

    sig { returns(T::Boolean) }
    def media_url?; end

    sig { returns(T.nilable(::String)) }
    def media_url_before_last_save; end

    sig { returns(T.untyped) }
    def media_url_before_type_cast; end

    sig { returns(T::Boolean) }
    def media_url_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def media_url_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def media_url_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def media_url_changed?; end

    sig { returns(T.nilable(::String)) }
    def media_url_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def media_url_previous_change; end

    sig { returns(T::Boolean) }
    def media_url_previously_changed?; end

    sig { returns(T.nilable(::String)) }
    def media_url_previously_was; end

    sig { returns(T.nilable(::String)) }
    def media_url_was; end

    sig { void }
    def media_url_will_change!; end

    sig { returns(::String) }
    def post_id; end

    sig { params(value: ::String).returns(::String) }
    def post_id=(value); end

    sig { returns(T::Boolean) }
    def post_id?; end

    sig { returns(T.nilable(::String)) }
    def post_id_before_last_save; end

    sig { returns(T.untyped) }
    def post_id_before_type_cast; end

    sig { returns(T::Boolean) }
    def post_id_came_from_user?; end

    sig { returns(T.nilable([::String, ::String])) }
    def post_id_change; end

    sig { returns(T.nilable([::String, ::String])) }
    def post_id_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def post_id_changed?; end

    sig { returns(T.nilable(::String)) }
    def post_id_in_database; end

    sig { returns(T.nilable([::String, ::String])) }
    def post_id_previous_change; end

    sig { returns(T::Boolean) }
    def post_id_previously_changed?; end

    sig { returns(T.nilable(::String)) }
    def post_id_previously_was; end

    sig { returns(T.nilable(::String)) }
    def post_id_was; end

    sig { void }
    def post_id_will_change!; end

    sig { void }
    def restore_analyzed!; end

    sig { void }
    def restore_created_at!; end

    sig { void }
    def restore_description!; end

    sig { void }
    def restore_embed_body!; end

    sig { void }
    def restore_embed_type!; end

    sig { void }
    def restore_id!; end

    sig { void }
    def restore_image_url!; end

    sig { void }
    def restore_imported_at!; end

    sig { void }
    def restore_media_url!; end

    sig { void }
    def restore_post_id!; end

    sig { void }
    def restore_site_icon_url!; end

    sig { void }
    def restore_site_name!; end

    sig { void }
    def restore_title!; end

    sig { void }
    def restore_type!; end

    sig { void }
    def restore_updated_at!; end

    sig { void }
    def restore_url!; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def saved_change_to_analyzed; end

    sig { returns(T::Boolean) }
    def saved_change_to_analyzed?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def saved_change_to_created_at; end

    sig { returns(T::Boolean) }
    def saved_change_to_created_at?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_description; end

    sig { returns(T::Boolean) }
    def saved_change_to_description?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_embed_body; end

    sig { returns(T::Boolean) }
    def saved_change_to_embed_body?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_embed_type; end

    sig { returns(T::Boolean) }
    def saved_change_to_embed_type?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_id?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_image_url; end

    sig { returns(T::Boolean) }
    def saved_change_to_image_url?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def saved_change_to_imported_at; end

    sig { returns(T::Boolean) }
    def saved_change_to_imported_at?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_media_url; end

    sig { returns(T::Boolean) }
    def saved_change_to_media_url?; end

    sig { returns(T.nilable([::String, ::String])) }
    def saved_change_to_post_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_post_id?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_site_icon_url; end

    sig { returns(T::Boolean) }
    def saved_change_to_site_icon_url?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_site_name; end

    sig { returns(T::Boolean) }
    def saved_change_to_site_name?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_title; end

    sig { returns(T::Boolean) }
    def saved_change_to_title?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_type; end

    sig { returns(T::Boolean) }
    def saved_change_to_type?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def saved_change_to_updated_at; end

    sig { returns(T::Boolean) }
    def saved_change_to_updated_at?; end

    sig { returns(T.nilable([::String, ::String])) }
    def saved_change_to_url; end

    sig { returns(T::Boolean) }
    def saved_change_to_url?; end

    sig { returns(T.nilable(::String)) }
    def site_icon_url; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def site_icon_url=(value); end

    sig { returns(T::Boolean) }
    def site_icon_url?; end

    sig { returns(T.nilable(::String)) }
    def site_icon_url_before_last_save; end

    sig { returns(T.untyped) }
    def site_icon_url_before_type_cast; end

    sig { returns(T::Boolean) }
    def site_icon_url_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def site_icon_url_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def site_icon_url_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def site_icon_url_changed?; end

    sig { returns(T.nilable(::String)) }
    def site_icon_url_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def site_icon_url_previous_change; end

    sig { returns(T::Boolean) }
    def site_icon_url_previously_changed?; end

    sig { returns(T.nilable(::String)) }
    def site_icon_url_previously_was; end

    sig { returns(T.nilable(::String)) }
    def site_icon_url_was; end

    sig { void }
    def site_icon_url_will_change!; end

    sig { returns(T.nilable(::String)) }
    def site_name; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def site_name=(value); end

    sig { returns(T::Boolean) }
    def site_name?; end

    sig { returns(T.nilable(::String)) }
    def site_name_before_last_save; end

    sig { returns(T.untyped) }
    def site_name_before_type_cast; end

    sig { returns(T::Boolean) }
    def site_name_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def site_name_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def site_name_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def site_name_changed?; end

    sig { returns(T.nilable(::String)) }
    def site_name_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def site_name_previous_change; end

    sig { returns(T::Boolean) }
    def site_name_previously_changed?; end

    sig { returns(T.nilable(::String)) }
    def site_name_previously_was; end

    sig { returns(T.nilable(::String)) }
    def site_name_was; end

    sig { void }
    def site_name_will_change!; end

    sig { returns(T.nilable(::String)) }
    def title; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def title=(value); end

    sig { returns(T::Boolean) }
    def title?; end

    sig { returns(T.nilable(::String)) }
    def title_before_last_save; end

    sig { returns(T.untyped) }
    def title_before_type_cast; end

    sig { returns(T::Boolean) }
    def title_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def title_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def title_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def title_changed?; end

    sig { returns(T.nilable(::String)) }
    def title_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def title_previous_change; end

    sig { returns(T::Boolean) }
    def title_previously_changed?; end

    sig { returns(T.nilable(::String)) }
    def title_previously_was; end

    sig { returns(T.nilable(::String)) }
    def title_was; end

    sig { void }
    def title_will_change!; end

    sig { returns(T.nilable(::String)) }
    def type; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def type=(value); end

    sig { returns(T::Boolean) }
    def type?; end

    sig { returns(T.nilable(::String)) }
    def type_before_last_save; end

    sig { returns(T.untyped) }
    def type_before_type_cast; end

    sig { returns(T::Boolean) }
    def type_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def type_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def type_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def type_changed?; end

    sig { returns(T.nilable(::String)) }
    def type_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def type_previous_change; end

    sig { returns(T::Boolean) }
    def type_previously_changed?; end

    sig { returns(T.nilable(::String)) }
    def type_previously_was; end

    sig { returns(T.nilable(::String)) }
    def type_was; end

    sig { void }
    def type_will_change!; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at; end

    sig { params(value: ::ActiveSupport::TimeWithZone).returns(::ActiveSupport::TimeWithZone) }
    def updated_at=(value); end

    sig { returns(T::Boolean) }
    def updated_at?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_before_last_save; end

    sig { returns(T.untyped) }
    def updated_at_before_type_cast; end

    sig { returns(T::Boolean) }
    def updated_at_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def updated_at_change; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def updated_at_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def updated_at_changed?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_in_database; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def updated_at_previous_change; end

    sig { returns(T::Boolean) }
    def updated_at_previously_changed?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_was; end

    sig { void }
    def updated_at_will_change!; end

    sig { returns(::String) }
    def url; end

    sig { params(value: ::String).returns(::String) }
    def url=(value); end

    sig { returns(T::Boolean) }
    def url?; end

    sig { returns(T.nilable(::String)) }
    def url_before_last_save; end

    sig { returns(T.untyped) }
    def url_before_type_cast; end

    sig { returns(T::Boolean) }
    def url_came_from_user?; end

    sig { returns(T.nilable([::String, ::String])) }
    def url_change; end

    sig { returns(T.nilable([::String, ::String])) }
    def url_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def url_changed?; end

    sig { returns(T.nilable(::String)) }
    def url_in_database; end

    sig { returns(T.nilable([::String, ::String])) }
    def url_previous_change; end

    sig { returns(T::Boolean) }
    def url_previously_changed?; end

    sig { returns(T.nilable(::String)) }
    def url_previously_was; end

    sig { returns(T.nilable(::String)) }
    def url_was; end

    sig { void }
    def url_will_change!; end

    sig { returns(T::Boolean) }
    def will_save_change_to_analyzed?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_created_at?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_description?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_embed_body?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_embed_type?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_image_url?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_imported_at?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_media_url?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_post_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_site_icon_url?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_site_name?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_title?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_type?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_updated_at?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_url?; end
  end

  module GeneratedRelationMethods
    sig { returns(PrivateRelation) }
    def all; end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def and(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def annotate(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def chronological(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def create_with(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def distinct(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def eager_load(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def except(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def excluding(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def extending(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def extract_associated(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def from(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def group(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def having(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def in_order_of(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def includes(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def invert_where(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def left_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def left_outer_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def limit(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def lock(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def merge(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def none(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def offset(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def only(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def optimizer_hints(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def or(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def preload(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def readonly(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def references(*args, &blk); end

    sig { params(method_name: T.untyped, options: T.untyped).returns(T::Boolean) }
    def reindex(method_name = nil, **options); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def reorder(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def reselect(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def reverse_chronological(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def reverse_order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def rewhere(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def select(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def strict_loading(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def structurally_compatible?(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def uniq!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def unscope(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelationWhereChain) }
    def where(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def without(*args, &blk); end
  end

  class PrivateAssociationRelation < ::ActiveRecord::AssociationRelation
    include CommonRelationMethods
    include GeneratedAssociationRelationMethods

    Elem = type_member { { fixed: ::PostLink } }

    sig { returns(T::Array[::PostLink]) }
    def to_ary; end
  end

  class PrivateAssociationRelationWhereChain < PrivateAssociationRelation
    Elem = type_member { { fixed: ::PostLink } }

    sig { params(args: T.untyped).returns(PrivateAssociationRelation) }
    def associated(*args); end

    sig { params(args: T.untyped).returns(PrivateAssociationRelation) }
    def missing(*args); end

    sig { params(opts: T.untyped, rest: T.untyped).returns(PrivateAssociationRelation) }
    def not(opts, *rest); end
  end

  class PrivateCollectionProxy < ::ActiveRecord::Associations::CollectionProxy
    include CommonRelationMethods
    include GeneratedAssociationRelationMethods

    Elem = type_member { { fixed: ::PostLink } }

    sig do
      params(
        records: T.any(::PostLink, T::Enumerable[T.any(::PostLink, T::Enumerable[::PostLink])])
      ).returns(PrivateCollectionProxy)
    end
    def <<(*records); end

    sig do
      params(
        records: T.any(::PostLink, T::Enumerable[T.any(::PostLink, T::Enumerable[::PostLink])])
      ).returns(PrivateCollectionProxy)
    end
    def append(*records); end

    sig { returns(PrivateCollectionProxy) }
    def clear; end

    sig do
      params(
        records: T.any(::PostLink, T::Enumerable[T.any(::PostLink, T::Enumerable[::PostLink])])
      ).returns(PrivateCollectionProxy)
    end
    def concat(*records); end

    sig do
      params(
        records: T.any(::PostLink, Integer, String, T::Enumerable[T.any(::PostLink, Integer, String, T::Enumerable[::PostLink])])
      ).returns(T::Array[::PostLink])
    end
    def delete(*records); end

    sig do
      params(
        records: T.any(::PostLink, Integer, String, T::Enumerable[T.any(::PostLink, Integer, String, T::Enumerable[::PostLink])])
      ).returns(T::Array[::PostLink])
    end
    def destroy(*records); end

    sig { returns(T::Array[::PostLink]) }
    def load_target; end

    sig do
      params(
        records: T.any(::PostLink, T::Enumerable[T.any(::PostLink, T::Enumerable[::PostLink])])
      ).returns(PrivateCollectionProxy)
    end
    def prepend(*records); end

    sig do
      params(
        records: T.any(::PostLink, T::Enumerable[T.any(::PostLink, T::Enumerable[::PostLink])])
      ).returns(PrivateCollectionProxy)
    end
    def push(*records); end

    sig do
      params(
        other_array: T.any(::PostLink, T::Enumerable[T.any(::PostLink, T::Enumerable[::PostLink])])
      ).returns(T::Array[::PostLink])
    end
    def replace(other_array); end

    sig { returns(PrivateAssociationRelation) }
    def scope; end

    sig { returns(T::Array[::PostLink]) }
    def target; end

    sig { returns(T::Array[::PostLink]) }
    def to_ary; end
  end

  class PrivateRelation < ::ActiveRecord::Relation
    include CommonRelationMethods
    include GeneratedRelationMethods

    Elem = type_member { { fixed: ::PostLink } }

    sig { returns(T::Array[::PostLink]) }
    def to_ary; end
  end

  class PrivateRelationWhereChain < PrivateRelation
    Elem = type_member { { fixed: ::PostLink } }

    sig { params(args: T.untyped).returns(PrivateRelation) }
    def associated(*args); end

    sig { params(args: T.untyped).returns(PrivateRelation) }
    def missing(*args); end

    sig { params(opts: T.untyped, rest: T.untyped).returns(PrivateRelation) }
    def not(opts, *rest); end
  end
end
