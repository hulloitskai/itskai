# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `Cookie`.
# Please instead update this file by running `bin/tapioca dsl Cookie`.

class Cookie
  include GeneratedAttributeMethods
  extend CommonRelationMethods
  extend GeneratedRelationMethods

  sig { returns(Enumerize::Value) }
  def service; end

  private

  sig { returns(NilClass) }
  def to_ary; end

  class << self
    sig { returns(Enumerize::Attribute) }
    def service; end
  end

  module CommonRelationMethods
    sig { params(block: T.nilable(T.proc.params(record: ::Cookie).returns(T.untyped))).returns(T::Boolean) }
    def any?(&block); end

    sig { params(column_name: T.any(String, Symbol)).returns(T.untyped) }
    def average(column_name); end

    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::Cookie).void)).returns(::Cookie) }
    def build(attributes = nil, &block); end

    sig { params(operation: Symbol, column_name: T.any(String, Symbol)).returns(T.untyped) }
    def calculate(operation, column_name); end

    sig { params(column_name: T.untyped).returns(T.untyped) }
    def count(column_name = nil); end

    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::Cookie).void)).returns(::Cookie) }
    def create(attributes = nil, &block); end

    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::Cookie).void)).returns(::Cookie) }
    def create!(attributes = nil, &block); end

    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::Cookie).void)).returns(::Cookie) }
    def create_or_find_by(attributes, &block); end

    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::Cookie).void)).returns(::Cookie) }
    def create_or_find_by!(attributes, &block); end

    sig { returns(T::Array[::Cookie]) }
    def destroy_all; end

    sig { params(conditions: T.untyped).returns(T::Boolean) }
    def exists?(conditions = :none); end

    sig { returns(T.nilable(::Cookie)) }
    def fifth; end

    sig { returns(::Cookie) }
    def fifth!; end

    sig { params(args: T.untyped).returns(T.untyped) }
    def find(*args); end

    sig { params(args: T.untyped).returns(T.nilable(::Cookie)) }
    def find_by(*args); end

    sig { params(args: T.untyped).returns(::Cookie) }
    def find_by!(*args); end

    sig do
      params(
        start: T.untyped,
        finish: T.untyped,
        batch_size: Integer,
        error_on_ignore: T.untyped,
        order: Symbol,
        block: T.nilable(T.proc.params(object: ::Cookie).void)
      ).returns(T.nilable(T::Enumerator[::Cookie]))
    end
    def find_each(start: nil, finish: nil, batch_size: 1000, error_on_ignore: nil, order: :asc, &block); end

    sig do
      params(
        start: T.untyped,
        finish: T.untyped,
        batch_size: Integer,
        error_on_ignore: T.untyped,
        order: Symbol,
        block: T.nilable(T.proc.params(object: T::Array[::Cookie]).void)
      ).returns(T.nilable(T::Enumerator[T::Enumerator[::Cookie]]))
    end
    def find_in_batches(start: nil, finish: nil, batch_size: 1000, error_on_ignore: nil, order: :asc, &block); end

    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::Cookie).void)).returns(::Cookie) }
    def find_or_create_by(attributes, &block); end

    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::Cookie).void)).returns(::Cookie) }
    def find_or_create_by!(attributes, &block); end

    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::Cookie).void)).returns(::Cookie) }
    def find_or_initialize_by(attributes, &block); end

    sig { params(signed_id: T.untyped, purpose: T.untyped).returns(T.nilable(::Cookie)) }
    def find_signed(signed_id, purpose: nil); end

    sig { params(signed_id: T.untyped, purpose: T.untyped).returns(::Cookie) }
    def find_signed!(signed_id, purpose: nil); end

    sig { params(arg: T.untyped, args: T.untyped).returns(::Cookie) }
    def find_sole_by(arg, *args); end

    sig { params(limit: T.untyped).returns(T.untyped) }
    def first(limit = nil); end

    sig { returns(::Cookie) }
    def first!; end

    sig { returns(T.nilable(::Cookie)) }
    def forty_two; end

    sig { returns(::Cookie) }
    def forty_two!; end

    sig { returns(T.nilable(::Cookie)) }
    def fourth; end

    sig { returns(::Cookie) }
    def fourth!; end

    sig { returns(Array) }
    def ids; end

    sig do
      params(
        of: Integer,
        start: T.untyped,
        finish: T.untyped,
        load: T.untyped,
        error_on_ignore: T.untyped,
        order: Symbol,
        block: T.nilable(T.proc.params(object: PrivateRelation).void)
      ).returns(T.nilable(::ActiveRecord::Batches::BatchEnumerator))
    end
    def in_batches(of: 1000, start: nil, finish: nil, load: false, error_on_ignore: nil, order: :asc, &block); end

    sig { params(record: T.untyped).returns(T::Boolean) }
    def include?(record); end

    sig { params(limit: T.untyped).returns(T.untyped) }
    def last(limit = nil); end

    sig { returns(::Cookie) }
    def last!; end

    sig { params(block: T.nilable(T.proc.params(record: ::Cookie).returns(T.untyped))).returns(T::Boolean) }
    def many?(&block); end

    sig { params(column_name: T.any(String, Symbol)).returns(T.untyped) }
    def maximum(column_name); end

    sig { params(record: T.untyped).returns(T::Boolean) }
    def member?(record); end

    sig { params(column_name: T.any(String, Symbol)).returns(T.untyped) }
    def minimum(column_name); end

    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::Cookie).void)).returns(::Cookie) }
    def new(attributes = nil, &block); end

    sig { params(block: T.nilable(T.proc.params(record: ::Cookie).returns(T.untyped))).returns(T::Boolean) }
    def none?(&block); end

    sig { params(block: T.nilable(T.proc.params(record: ::Cookie).returns(T.untyped))).returns(T::Boolean) }
    def one?(&block); end

    sig { params(column_names: T.untyped).returns(T.untyped) }
    def pick(*column_names); end

    sig { params(column_names: T.untyped).returns(T.untyped) }
    def pluck(*column_names); end

    sig { returns(T.nilable(::Cookie)) }
    def second; end

    sig { returns(::Cookie) }
    def second!; end

    sig { returns(T.nilable(::Cookie)) }
    def second_to_last; end

    sig { returns(::Cookie) }
    def second_to_last!; end

    sig { returns(::Cookie) }
    def sole; end

    sig do
      params(
        column_name: T.nilable(T.any(String, Symbol)),
        block: T.nilable(T.proc.params(record: T.untyped).returns(T.untyped))
      ).returns(T.untyped)
    end
    def sum(column_name = nil, &block); end

    sig { params(limit: T.untyped).returns(T.untyped) }
    def take(limit = nil); end

    sig { returns(::Cookie) }
    def take!; end

    sig { returns(T.nilable(::Cookie)) }
    def third; end

    sig { returns(::Cookie) }
    def third!; end

    sig { returns(T.nilable(::Cookie)) }
    def third_to_last; end

    sig { returns(::Cookie) }
    def third_to_last!; end
  end

  module GeneratedAssociationRelationMethods
    sig { returns(PrivateAssociationRelation) }
    def all; end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def and(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def annotate(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def chronological(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def create_with(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def distinct(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def eager_load(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def except(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def excluding(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def extending(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def extract_associated(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def from(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def group(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def having(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def in_order_of(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def includes(*args, &blk); end

    sig do
      params(
        attributes: Hash,
        returning: T.nilable(T.any(T::Array[Symbol], FalseClass)),
        unique_by: T.nilable(T.any(T::Array[Symbol], Symbol))
      ).returns(ActiveRecord::Result)
    end
    def insert(attributes, returning: nil, unique_by: nil); end

    sig do
      params(
        attributes: Hash,
        returning: T.nilable(T.any(T::Array[Symbol], FalseClass))
      ).returns(ActiveRecord::Result)
    end
    def insert!(attributes, returning: nil); end

    sig do
      params(
        attributes: T::Array[Hash],
        returning: T.nilable(T.any(T::Array[Symbol], FalseClass)),
        unique_by: T.nilable(T.any(T::Array[Symbol], Symbol))
      ).returns(ActiveRecord::Result)
    end
    def insert_all(attributes, returning: nil, unique_by: nil); end

    sig do
      params(
        attributes: T::Array[Hash],
        returning: T.nilable(T.any(T::Array[Symbol], FalseClass))
      ).returns(ActiveRecord::Result)
    end
    def insert_all!(attributes, returning: nil); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def invert_where(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def left_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def left_outer_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def limit(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def lock(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def merge(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def none(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def offset(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def only(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def optimizer_hints(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def or(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def preload(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def readonly(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def references(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def reorder(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def reselect(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def reverse_chronological(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def reverse_order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def rewhere(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def select(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def strict_loading(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def structurally_compatible?(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def uniq!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def unscope(*args, &blk); end

    sig do
      params(
        attributes: Hash,
        returning: T.nilable(T.any(T::Array[Symbol], FalseClass)),
        unique_by: T.nilable(T.any(T::Array[Symbol], Symbol))
      ).returns(ActiveRecord::Result)
    end
    def upsert(attributes, returning: nil, unique_by: nil); end

    sig do
      params(
        attributes: T::Array[Hash],
        returning: T.nilable(T.any(T::Array[Symbol], FalseClass)),
        unique_by: T.nilable(T.any(T::Array[Symbol], Symbol))
      ).returns(ActiveRecord::Result)
    end
    def upsert_all(attributes, returning: nil, unique_by: nil); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelationWhereChain) }
    def where(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def without(*args, &blk); end
  end

  module GeneratedAttributeMethods
    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at; end

    sig { params(value: ::ActiveSupport::TimeWithZone).returns(::ActiveSupport::TimeWithZone) }
    def created_at=(value); end

    sig { returns(T::Boolean) }
    def created_at?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_before_last_save; end

    sig { returns(T.untyped) }
    def created_at_before_type_cast; end

    sig { returns(T::Boolean) }
    def created_at_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def created_at_change; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def created_at_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def created_at_changed?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_in_database; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def created_at_previous_change; end

    sig { returns(T::Boolean) }
    def created_at_previously_changed?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_was; end

    sig { void }
    def created_at_will_change!; end

    sig { returns(::String) }
    def domain; end

    sig { params(value: ::String).returns(::String) }
    def domain=(value); end

    sig { returns(T::Boolean) }
    def domain?; end

    sig { returns(T.nilable(::String)) }
    def domain_before_last_save; end

    sig { returns(T.untyped) }
    def domain_before_type_cast; end

    sig { returns(T::Boolean) }
    def domain_came_from_user?; end

    sig { returns(T.nilable([::String, ::String])) }
    def domain_change; end

    sig { returns(T.nilable([::String, ::String])) }
    def domain_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def domain_changed?; end

    sig { returns(T.nilable(::String)) }
    def domain_in_database; end

    sig { returns(T.nilable([::String, ::String])) }
    def domain_previous_change; end

    sig { returns(T::Boolean) }
    def domain_previously_changed?; end

    sig { returns(T.nilable(::String)) }
    def domain_previously_was; end

    sig { returns(T.nilable(::String)) }
    def domain_was; end

    sig { void }
    def domain_will_change!; end

    sig { returns(T.nilable(::Float)) }
    def expiration_date; end

    sig { params(value: T.nilable(::Float)).returns(T.nilable(::Float)) }
    def expiration_date=(value); end

    sig { returns(T::Boolean) }
    def expiration_date?; end

    sig { returns(T.nilable(::Float)) }
    def expiration_date_before_last_save; end

    sig { returns(T.untyped) }
    def expiration_date_before_type_cast; end

    sig { returns(T::Boolean) }
    def expiration_date_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Float), T.nilable(::Float)])) }
    def expiration_date_change; end

    sig { returns(T.nilable([T.nilable(::Float), T.nilable(::Float)])) }
    def expiration_date_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def expiration_date_changed?; end

    sig { returns(T.nilable(::Float)) }
    def expiration_date_in_database; end

    sig { returns(T.nilable([T.nilable(::Float), T.nilable(::Float)])) }
    def expiration_date_previous_change; end

    sig { returns(T::Boolean) }
    def expiration_date_previously_changed?; end

    sig { returns(T.nilable(::Float)) }
    def expiration_date_previously_was; end

    sig { returns(T.nilable(::Float)) }
    def expiration_date_was; end

    sig { void }
    def expiration_date_will_change!; end

    sig { returns(T::Boolean) }
    def host_only; end

    sig { params(value: T::Boolean).returns(T::Boolean) }
    def host_only=(value); end

    sig { returns(T::Boolean) }
    def host_only?; end

    sig { returns(T.nilable(T::Boolean)) }
    def host_only_before_last_save; end

    sig { returns(T.untyped) }
    def host_only_before_type_cast; end

    sig { returns(T::Boolean) }
    def host_only_came_from_user?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def host_only_change; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def host_only_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def host_only_changed?; end

    sig { returns(T.nilable(T::Boolean)) }
    def host_only_in_database; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def host_only_previous_change; end

    sig { returns(T::Boolean) }
    def host_only_previously_changed?; end

    sig { returns(T.nilable(T::Boolean)) }
    def host_only_previously_was; end

    sig { returns(T.nilable(T::Boolean)) }
    def host_only_was; end

    sig { void }
    def host_only_will_change!; end

    sig { returns(T::Boolean) }
    def http_only; end

    sig { params(value: T::Boolean).returns(T::Boolean) }
    def http_only=(value); end

    sig { returns(T::Boolean) }
    def http_only?; end

    sig { returns(T.nilable(T::Boolean)) }
    def http_only_before_last_save; end

    sig { returns(T.untyped) }
    def http_only_before_type_cast; end

    sig { returns(T::Boolean) }
    def http_only_came_from_user?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def http_only_change; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def http_only_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def http_only_changed?; end

    sig { returns(T.nilable(T::Boolean)) }
    def http_only_in_database; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def http_only_previous_change; end

    sig { returns(T::Boolean) }
    def http_only_previously_changed?; end

    sig { returns(T.nilable(T::Boolean)) }
    def http_only_previously_was; end

    sig { returns(T.nilable(T::Boolean)) }
    def http_only_was; end

    sig { void }
    def http_only_will_change!; end

    sig { returns(T.nilable(::String)) }
    def id; end

    sig { params(value: ::String).returns(::String) }
    def id=(value); end

    sig { returns(T::Boolean) }
    def id?; end

    sig { returns(T.nilable(::String)) }
    def id_before_last_save; end

    sig { returns(T.untyped) }
    def id_before_type_cast; end

    sig { returns(T::Boolean) }
    def id_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def id_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def id_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def id_changed?; end

    sig { returns(T.nilable(::String)) }
    def id_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def id_previous_change; end

    sig { returns(T::Boolean) }
    def id_previously_changed?; end

    sig { returns(T.nilable(::String)) }
    def id_previously_was; end

    sig { returns(T.nilable(::String)) }
    def id_was; end

    sig { void }
    def id_will_change!; end

    sig { returns(::String) }
    def name; end

    sig { params(value: ::String).returns(::String) }
    def name=(value); end

    sig { returns(T::Boolean) }
    def name?; end

    sig { returns(T.nilable(::String)) }
    def name_before_last_save; end

    sig { returns(T.untyped) }
    def name_before_type_cast; end

    sig { returns(T::Boolean) }
    def name_came_from_user?; end

    sig { returns(T.nilable([::String, ::String])) }
    def name_change; end

    sig { returns(T.nilable([::String, ::String])) }
    def name_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def name_changed?; end

    sig { returns(T.nilable(::String)) }
    def name_in_database; end

    sig { returns(T.nilable([::String, ::String])) }
    def name_previous_change; end

    sig { returns(T::Boolean) }
    def name_previously_changed?; end

    sig { returns(T.nilable(::String)) }
    def name_previously_was; end

    sig { returns(T.nilable(::String)) }
    def name_was; end

    sig { void }
    def name_will_change!; end

    sig { returns(::String) }
    def path; end

    sig { params(value: ::String).returns(::String) }
    def path=(value); end

    sig { returns(T::Boolean) }
    def path?; end

    sig { returns(T.nilable(::String)) }
    def path_before_last_save; end

    sig { returns(T.untyped) }
    def path_before_type_cast; end

    sig { returns(T::Boolean) }
    def path_came_from_user?; end

    sig { returns(T.nilable([::String, ::String])) }
    def path_change; end

    sig { returns(T.nilable([::String, ::String])) }
    def path_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def path_changed?; end

    sig { returns(T.nilable(::String)) }
    def path_in_database; end

    sig { returns(T.nilable([::String, ::String])) }
    def path_previous_change; end

    sig { returns(T::Boolean) }
    def path_previously_changed?; end

    sig { returns(T.nilable(::String)) }
    def path_previously_was; end

    sig { returns(T.nilable(::String)) }
    def path_was; end

    sig { void }
    def path_will_change!; end

    sig { void }
    def restore_created_at!; end

    sig { void }
    def restore_domain!; end

    sig { void }
    def restore_expiration_date!; end

    sig { void }
    def restore_host_only!; end

    sig { void }
    def restore_http_only!; end

    sig { void }
    def restore_id!; end

    sig { void }
    def restore_name!; end

    sig { void }
    def restore_path!; end

    sig { void }
    def restore_same_site!; end

    sig { void }
    def restore_secure!; end

    sig { void }
    def restore_service!; end

    sig { void }
    def restore_session!; end

    sig { void }
    def restore_value!; end

    sig { returns(::String) }
    def same_site; end

    sig { params(value: ::String).returns(::String) }
    def same_site=(value); end

    sig { returns(T::Boolean) }
    def same_site?; end

    sig { returns(T.nilable(::String)) }
    def same_site_before_last_save; end

    sig { returns(T.untyped) }
    def same_site_before_type_cast; end

    sig { returns(T::Boolean) }
    def same_site_came_from_user?; end

    sig { returns(T.nilable([::String, ::String])) }
    def same_site_change; end

    sig { returns(T.nilable([::String, ::String])) }
    def same_site_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def same_site_changed?; end

    sig { returns(T.nilable(::String)) }
    def same_site_in_database; end

    sig { returns(T.nilable([::String, ::String])) }
    def same_site_previous_change; end

    sig { returns(T::Boolean) }
    def same_site_previously_changed?; end

    sig { returns(T.nilable(::String)) }
    def same_site_previously_was; end

    sig { returns(T.nilable(::String)) }
    def same_site_was; end

    sig { void }
    def same_site_will_change!; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def saved_change_to_created_at; end

    sig { returns(T::Boolean) }
    def saved_change_to_created_at?; end

    sig { returns(T.nilable([::String, ::String])) }
    def saved_change_to_domain; end

    sig { returns(T::Boolean) }
    def saved_change_to_domain?; end

    sig { returns(T.nilable([T.nilable(::Float), T.nilable(::Float)])) }
    def saved_change_to_expiration_date; end

    sig { returns(T::Boolean) }
    def saved_change_to_expiration_date?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def saved_change_to_host_only; end

    sig { returns(T::Boolean) }
    def saved_change_to_host_only?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def saved_change_to_http_only; end

    sig { returns(T::Boolean) }
    def saved_change_to_http_only?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_id?; end

    sig { returns(T.nilable([::String, ::String])) }
    def saved_change_to_name; end

    sig { returns(T::Boolean) }
    def saved_change_to_name?; end

    sig { returns(T.nilable([::String, ::String])) }
    def saved_change_to_path; end

    sig { returns(T::Boolean) }
    def saved_change_to_path?; end

    sig { returns(T.nilable([::String, ::String])) }
    def saved_change_to_same_site; end

    sig { returns(T::Boolean) }
    def saved_change_to_same_site?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def saved_change_to_secure; end

    sig { returns(T::Boolean) }
    def saved_change_to_secure?; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def saved_change_to_service; end

    sig { returns(T::Boolean) }
    def saved_change_to_service?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def saved_change_to_session; end

    sig { returns(T::Boolean) }
    def saved_change_to_session?; end

    sig { returns(T.nilable([::String, ::String])) }
    def saved_change_to_value; end

    sig { returns(T::Boolean) }
    def saved_change_to_value?; end

    sig { returns(T::Boolean) }
    def secure; end

    sig { params(value: T::Boolean).returns(T::Boolean) }
    def secure=(value); end

    sig { returns(T::Boolean) }
    def secure?; end

    sig { returns(T.nilable(T::Boolean)) }
    def secure_before_last_save; end

    sig { returns(T.untyped) }
    def secure_before_type_cast; end

    sig { returns(T::Boolean) }
    def secure_came_from_user?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def secure_change; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def secure_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def secure_changed?; end

    sig { returns(T.nilable(T::Boolean)) }
    def secure_in_database; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def secure_previous_change; end

    sig { returns(T::Boolean) }
    def secure_previously_changed?; end

    sig { returns(T.nilable(T::Boolean)) }
    def secure_previously_was; end

    sig { returns(T.nilable(T::Boolean)) }
    def secure_was; end

    sig { void }
    def secure_will_change!; end

    sig { returns(T.untyped) }
    def service; end

    sig { params(value: T.untyped).returns(T.untyped) }
    def service=(value); end

    sig { returns(T::Boolean) }
    def service?; end

    sig { returns(T.untyped) }
    def service_before_last_save; end

    sig { returns(T.untyped) }
    def service_before_type_cast; end

    sig { returns(T::Boolean) }
    def service_came_from_user?; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def service_change; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def service_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def service_changed?; end

    sig { returns(T.untyped) }
    def service_in_database; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def service_previous_change; end

    sig { returns(T::Boolean) }
    def service_previously_changed?; end

    sig { returns(T.untyped) }
    def service_previously_was; end

    sig { returns(T.untyped) }
    def service_was; end

    sig { void }
    def service_will_change!; end

    sig { returns(T::Boolean) }
    def session; end

    sig { params(value: T::Boolean).returns(T::Boolean) }
    def session=(value); end

    sig { returns(T::Boolean) }
    def session?; end

    sig { returns(T.nilable(T::Boolean)) }
    def session_before_last_save; end

    sig { returns(T.untyped) }
    def session_before_type_cast; end

    sig { returns(T::Boolean) }
    def session_came_from_user?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def session_change; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def session_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def session_changed?; end

    sig { returns(T.nilable(T::Boolean)) }
    def session_in_database; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def session_previous_change; end

    sig { returns(T::Boolean) }
    def session_previously_changed?; end

    sig { returns(T.nilable(T::Boolean)) }
    def session_previously_was; end

    sig { returns(T.nilable(T::Boolean)) }
    def session_was; end

    sig { void }
    def session_will_change!; end

    sig { returns(::String) }
    def value; end

    sig { params(value: ::String).returns(::String) }
    def value=(value); end

    sig { returns(T::Boolean) }
    def value?; end

    sig { returns(T.nilable(::String)) }
    def value_before_last_save; end

    sig { returns(T.untyped) }
    def value_before_type_cast; end

    sig { returns(T::Boolean) }
    def value_came_from_user?; end

    sig { returns(T.nilable([::String, ::String])) }
    def value_change; end

    sig { returns(T.nilable([::String, ::String])) }
    def value_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def value_changed?; end

    sig { returns(T.nilable(::String)) }
    def value_in_database; end

    sig { returns(T.nilable([::String, ::String])) }
    def value_previous_change; end

    sig { returns(T::Boolean) }
    def value_previously_changed?; end

    sig { returns(T.nilable(::String)) }
    def value_previously_was; end

    sig { returns(T.nilable(::String)) }
    def value_was; end

    sig { void }
    def value_will_change!; end

    sig { returns(T::Boolean) }
    def will_save_change_to_created_at?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_domain?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_expiration_date?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_host_only?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_http_only?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_name?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_path?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_same_site?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_secure?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_service?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_session?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_value?; end
  end

  module GeneratedRelationMethods
    sig { returns(PrivateRelation) }
    def all; end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def and(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def annotate(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def chronological(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def create_with(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def distinct(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def eager_load(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def except(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def excluding(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def extending(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def extract_associated(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def from(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def group(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def having(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def in_order_of(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def includes(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def invert_where(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def left_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def left_outer_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def limit(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def lock(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def merge(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def none(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def offset(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def only(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def optimizer_hints(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def or(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def preload(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def readonly(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def references(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def reorder(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def reselect(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def reverse_chronological(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def reverse_order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def rewhere(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def select(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def strict_loading(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def structurally_compatible?(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def uniq!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def unscope(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelationWhereChain) }
    def where(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def without(*args, &blk); end
  end

  class PrivateAssociationRelation < ::ActiveRecord::AssociationRelation
    include CommonRelationMethods
    include GeneratedAssociationRelationMethods

    Elem = type_member { { fixed: ::Cookie } }

    sig { returns(T::Array[::Cookie]) }
    def to_a; end

    sig { returns(T::Array[::Cookie]) }
    def to_ary; end
  end

  class PrivateAssociationRelationWhereChain < PrivateAssociationRelation
    Elem = type_member { { fixed: ::Cookie } }

    sig { params(args: T.untyped).returns(PrivateAssociationRelation) }
    def associated(*args); end

    sig { params(args: T.untyped).returns(PrivateAssociationRelation) }
    def missing(*args); end

    sig { params(opts: T.untyped, rest: T.untyped).returns(PrivateAssociationRelation) }
    def not(opts, *rest); end
  end

  class PrivateCollectionProxy < ::ActiveRecord::Associations::CollectionProxy
    include CommonRelationMethods
    include GeneratedAssociationRelationMethods

    Elem = type_member { { fixed: ::Cookie } }

    sig do
      params(
        records: T.any(::Cookie, T::Enumerable[T.any(::Cookie, T::Enumerable[::Cookie])])
      ).returns(PrivateCollectionProxy)
    end
    def <<(*records); end

    sig do
      params(
        records: T.any(::Cookie, T::Enumerable[T.any(::Cookie, T::Enumerable[::Cookie])])
      ).returns(PrivateCollectionProxy)
    end
    def append(*records); end

    sig { returns(PrivateCollectionProxy) }
    def clear; end

    sig do
      params(
        records: T.any(::Cookie, T::Enumerable[T.any(::Cookie, T::Enumerable[::Cookie])])
      ).returns(PrivateCollectionProxy)
    end
    def concat(*records); end

    sig do
      params(
        records: T.any(::Cookie, Integer, String, T::Enumerable[T.any(::Cookie, Integer, String, T::Enumerable[::Cookie])])
      ).returns(T::Array[::Cookie])
    end
    def delete(*records); end

    sig do
      params(
        records: T.any(::Cookie, Integer, String, T::Enumerable[T.any(::Cookie, Integer, String, T::Enumerable[::Cookie])])
      ).returns(T::Array[::Cookie])
    end
    def destroy(*records); end

    sig { returns(T::Array[::Cookie]) }
    def load_target; end

    sig do
      params(
        records: T.any(::Cookie, T::Enumerable[T.any(::Cookie, T::Enumerable[::Cookie])])
      ).returns(PrivateCollectionProxy)
    end
    def prepend(*records); end

    sig do
      params(
        records: T.any(::Cookie, T::Enumerable[T.any(::Cookie, T::Enumerable[::Cookie])])
      ).returns(PrivateCollectionProxy)
    end
    def push(*records); end

    sig do
      params(
        other_array: T.any(::Cookie, T::Enumerable[T.any(::Cookie, T::Enumerable[::Cookie])])
      ).returns(T::Array[::Cookie])
    end
    def replace(other_array); end

    sig { returns(PrivateAssociationRelation) }
    def scope; end

    sig { returns(T::Array[::Cookie]) }
    def target; end

    sig { returns(T::Array[::Cookie]) }
    def to_a; end

    sig { returns(T::Array[::Cookie]) }
    def to_ary; end
  end

  class PrivateRelation < ::ActiveRecord::Relation
    include CommonRelationMethods
    include GeneratedRelationMethods

    Elem = type_member { { fixed: ::Cookie } }

    sig { returns(T::Array[::Cookie]) }
    def to_a; end

    sig { returns(T::Array[::Cookie]) }
    def to_ary; end
  end

  class PrivateRelationWhereChain < PrivateRelation
    Elem = type_member { { fixed: ::Cookie } }

    sig { params(args: T.untyped).returns(PrivateRelation) }
    def associated(*args); end

    sig { params(args: T.untyped).returns(PrivateRelation) }
    def missing(*args); end

    sig { params(opts: T.untyped, rest: T.untyped).returns(PrivateRelation) }
    def not(opts, *rest); end
  end
end
