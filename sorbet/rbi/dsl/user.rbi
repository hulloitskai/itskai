# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `User`.
# Please instead update this file by running `bin/tapioca dsl User`.

class User
  include GeneratedAssociationMethods
  include GeneratedAttributeMethods
  extend CommonRelationMethods
  extend GeneratedRelationMethods

  sig { returns(ActionText::RichText) }
  def rich_text_bio; end

  sig { returns(ActiveStorage::Attached::One) }
  def avatar; end

  sig { params(attachable: T.untyped).returns(T.untyped) }
  def avatar=(attachable); end

  sig { returns(ActionText::RichText) }
  def bio; end

  sig { params(value: T.untyped).returns(T.untyped) }
  def bio=(value); end

  sig { params(method_name: T.untyped, mode: T.nilable(Symbol), refresh: T::Boolean).returns(T.untyped) }
  def reindex(method_name = nil, mode: nil, refresh: false); end

  sig { params(value: ActionText::RichText).returns(ActionText::RichText) }
  def rich_text_bio=(value); end

  sig { returns(T::Hash[String, T.untyped]) }
  def search_data; end

  sig { returns(T::Boolean) }
  def should_index?; end

  sig { params(options: T.untyped).returns(Searchkick::Relation) }
  def similar(**options); end

  private

  sig { returns(NilClass) }
  def to_ary; end

  class << self
    sig { params(term: String, options: T.untyped, block: T.untyped).returns(Searchkick::Relation) }
    def search(term = "*", **options, &block); end

    sig { params(name: T.untyped).returns(Searchkick::Index) }
    def search_index(name: nil); end
  end

  module CommonRelationMethods
    sig { params(block: T.nilable(T.proc.params(record: ::User).returns(T.untyped))).returns(T::Boolean) }
    def any?(&block); end

    sig { params(column_name: T.any(String, Symbol)).returns(T.untyped) }
    def average(column_name); end

    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::User).void)).returns(::User) }
    def build(attributes = nil, &block); end

    sig { params(operation: Symbol, column_name: T.any(String, Symbol)).returns(T.untyped) }
    def calculate(operation, column_name); end

    sig { params(column_name: T.untyped).returns(T.untyped) }
    def count(column_name = nil); end

    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::User).void)).returns(::User) }
    def create(attributes = nil, &block); end

    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::User).void)).returns(::User) }
    def create!(attributes = nil, &block); end

    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::User).void)).returns(::User) }
    def create_or_find_by(attributes, &block); end

    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::User).void)).returns(::User) }
    def create_or_find_by!(attributes, &block); end

    sig { returns(T::Array[::User]) }
    def destroy_all; end

    sig { params(conditions: T.untyped).returns(T::Boolean) }
    def exists?(conditions = :none); end

    sig { returns(T.nilable(::User)) }
    def fifth; end

    sig { returns(::User) }
    def fifth!; end

    sig { params(args: T.untyped).returns(T.untyped) }
    def find(*args); end

    sig { params(args: T.untyped).returns(T.nilable(::User)) }
    def find_by(*args); end

    sig { params(args: T.untyped).returns(::User) }
    def find_by!(*args); end

    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::User).void)).returns(::User) }
    def find_or_create_by(attributes, &block); end

    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::User).void)).returns(::User) }
    def find_or_create_by!(attributes, &block); end

    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::User).void)).returns(::User) }
    def find_or_initialize_by(attributes, &block); end

    sig { params(arg: T.untyped, args: T.untyped).returns(::User) }
    def find_sole_by(arg, *args); end

    sig { params(limit: T.untyped).returns(T.untyped) }
    def first(limit = nil); end

    sig { returns(::User) }
    def first!; end

    sig { returns(T.nilable(::User)) }
    def forty_two; end

    sig { returns(::User) }
    def forty_two!; end

    sig { returns(T.nilable(::User)) }
    def fourth; end

    sig { returns(::User) }
    def fourth!; end

    sig { returns(Array) }
    def ids; end

    sig { params(record: T.untyped).returns(T::Boolean) }
    def include?(record); end

    sig { params(limit: T.untyped).returns(T.untyped) }
    def last(limit = nil); end

    sig { returns(::User) }
    def last!; end

    sig { params(block: T.nilable(T.proc.params(record: ::User).returns(T.untyped))).returns(T::Boolean) }
    def many?(&block); end

    sig { params(column_name: T.any(String, Symbol)).returns(T.untyped) }
    def maximum(column_name); end

    sig { params(record: T.untyped).returns(T::Boolean) }
    def member?(record); end

    sig { params(column_name: T.any(String, Symbol)).returns(T.untyped) }
    def minimum(column_name); end

    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::User).void)).returns(::User) }
    def new(attributes = nil, &block); end

    sig { params(block: T.nilable(T.proc.params(record: ::User).returns(T.untyped))).returns(T::Boolean) }
    def none?(&block); end

    sig { params(block: T.nilable(T.proc.params(record: ::User).returns(T.untyped))).returns(T::Boolean) }
    def one?(&block); end

    sig { params(column_names: T.untyped).returns(T.untyped) }
    def pick(*column_names); end

    sig { params(column_names: T.untyped).returns(T.untyped) }
    def pluck(*column_names); end

    sig { returns(T.nilable(::User)) }
    def second; end

    sig { returns(::User) }
    def second!; end

    sig { returns(T.nilable(::User)) }
    def second_to_last; end

    sig { returns(::User) }
    def second_to_last!; end

    sig { returns(::User) }
    def sole; end

    sig do
      params(
        column_name: T.nilable(T.any(String, Symbol)),
        block: T.nilable(T.proc.params(record: T.untyped).returns(T.untyped))
      ).returns(T.untyped)
    end
    def sum(column_name = nil, &block); end

    sig { params(limit: T.untyped).returns(T.untyped) }
    def take(limit = nil); end

    sig { returns(::User) }
    def take!; end

    sig { returns(T.nilable(::User)) }
    def third; end

    sig { returns(::User) }
    def third!; end

    sig { returns(T.nilable(::User)) }
    def third_to_last; end

    sig { returns(::User) }
    def third_to_last!; end
  end

  module GeneratedAssociationMethods
    sig { returns(T::Array[T.untyped]) }
    def authored_comment_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def authored_comment_ids=(ids); end

    sig { returns(::Comment::PrivateCollectionProxy) }
    def authored_comments; end

    sig { params(value: T::Enumerable[::Comment]).void }
    def authored_comments=(value); end

    sig { returns(T::Array[T.untyped]) }
    def authored_post_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def authored_post_ids=(ids); end

    sig { returns(::Post::PrivateCollectionProxy) }
    def authored_posts; end

    sig { params(value: T::Enumerable[::Post]).void }
    def authored_posts=(value); end

    sig { returns(T.nilable(::ActiveStorage::Attachment)) }
    def avatar_attachment; end

    sig { params(value: T.nilable(::ActiveStorage::Attachment)).void }
    def avatar_attachment=(value); end

    sig { returns(T.nilable(::ActiveStorage::Blob)) }
    def avatar_blob; end

    sig { params(value: T.nilable(::ActiveStorage::Blob)).void }
    def avatar_blob=(value); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::ActiveStorage::Attachment) }
    def build_avatar_attachment(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::ActiveStorage::Blob) }
    def build_avatar_blob(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::User) }
    def build_invited_by(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::ActionText::RichText) }
    def build_rich_text_bio(*args, &blk); end

    sig { returns(T::Array[T.untyped]) }
    def business_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def business_ids=(ids); end

    sig { returns(ActiveRecord::Associations::CollectionProxy) }
    def businesses; end

    sig { params(value: T::Enumerable[T.untyped]).void }
    def businesses=(value); end

    sig { returns(ActiveRecord::Associations::CollectionProxy) }
    def communities; end

    sig { params(value: T::Enumerable[T.untyped]).void }
    def communities=(value); end

    sig { returns(T::Array[T.untyped]) }
    def community_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def community_ids=(ids); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::ActiveStorage::Attachment) }
    def create_avatar_attachment(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::ActiveStorage::Attachment) }
    def create_avatar_attachment!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::ActiveStorage::Blob) }
    def create_avatar_blob(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::ActiveStorage::Blob) }
    def create_avatar_blob!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::User) }
    def create_invited_by(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::User) }
    def create_invited_by!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::ActionText::RichText) }
    def create_rich_text_bio(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::ActionText::RichText) }
    def create_rich_text_bio!(*args, &blk); end

    sig { returns(ActiveRecord::Associations::CollectionProxy) }
    def followed_communities; end

    sig { params(value: T::Enumerable[T.untyped]).void }
    def followed_communities=(value); end

    sig { returns(T::Array[T.untyped]) }
    def followed_community_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def followed_community_ids=(ids); end

    sig { returns(T::Array[T.untyped]) }
    def following_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def following_ids=(ids); end

    sig { returns(::Following::PrivateCollectionProxy) }
    def followings; end

    sig { params(value: T::Enumerable[::Following]).void }
    def followings=(value); end

    sig { returns(T.nilable(::User)) }
    def invited_by; end

    sig { params(value: T.nilable(::User)).void }
    def invited_by=(value); end

    sig { returns(T::Array[T.untyped]) }
    def invited_user_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def invited_user_ids=(ids); end

    sig { returns(::User::PrivateCollectionProxy) }
    def invited_users; end

    sig { params(value: T::Enumerable[::User]).void }
    def invited_users=(value); end

    sig { returns(T::Array[T.untyped]) }
    def membership_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def membership_ids=(ids); end

    sig { returns(::Membership::PrivateCollectionProxy) }
    def memberships; end

    sig { params(value: T::Enumerable[::Membership]).void }
    def memberships=(value); end

    sig { returns(T::Array[T.untyped]) }
    def offering_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def offering_ids=(ids); end

    sig { returns(::Offering::PrivateCollectionProxy) }
    def offerings; end

    sig { params(value: T::Enumerable[::Offering]).void }
    def offerings=(value); end

    sig { returns(T::Array[T.untyped]) }
    def owned_business_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def owned_business_ids=(ids); end

    sig { returns(::Business::PrivateCollectionProxy) }
    def owned_businesses; end

    sig { params(value: T::Enumerable[::Business]).void }
    def owned_businesses=(value); end

    sig { returns(::Community::PrivateCollectionProxy) }
    def owned_communities; end

    sig { params(value: T::Enumerable[::Community]).void }
    def owned_communities=(value); end

    sig { returns(T::Array[T.untyped]) }
    def owned_community_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def owned_community_ids=(ids); end

    sig { returns(T::Array[T.untyped]) }
    def owned_offering_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def owned_offering_ids=(ids); end

    sig { returns(::Offering::PrivateCollectionProxy) }
    def owned_offerings; end

    sig { params(value: T::Enumerable[::Offering]).void }
    def owned_offerings=(value); end

    sig { returns(T::Array[T.untyped]) }
    def received_message_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def received_message_ids=(ids); end

    sig { returns(::Message::PrivateCollectionProxy) }
    def received_messages; end

    sig { params(value: T::Enumerable[::Message]).void }
    def received_messages=(value); end

    sig { returns(T.nilable(::ActiveStorage::Attachment)) }
    def reload_avatar_attachment; end

    sig { returns(T.nilable(::ActiveStorage::Blob)) }
    def reload_avatar_blob; end

    sig { returns(T.nilable(::User)) }
    def reload_invited_by; end

    sig { returns(T.nilable(::ActionText::RichText)) }
    def reload_rich_text_bio; end

    sig { returns(T.nilable(::ActionText::RichText)) }
    def rich_text_bio; end

    sig { params(value: T.nilable(::ActionText::RichText)).void }
    def rich_text_bio=(value); end

    sig { returns(T::Array[T.untyped]) }
    def sent_message_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def sent_message_ids=(ids); end

    sig { returns(::Message::PrivateCollectionProxy) }
    def sent_messages; end

    sig { params(value: T::Enumerable[::Message]).void }
    def sent_messages=(value); end
  end

  module GeneratedAssociationRelationMethods
    sig { returns(PrivateAssociationRelation) }
    def all; end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def and(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def annotate(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def chronological(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def create_with(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def created_by_invite(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def distinct(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def eager_load(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def except(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def excluding(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def extending(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def extract_associated(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def from(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def group(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def having(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def in_order_of(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def includes(*args, &blk); end

    sig do
      params(
        attributes: Hash,
        returning: T.nilable(T.any(T::Array[Symbol], FalseClass)),
        unique_by: T.nilable(T.any(T::Array[Symbol], Symbol))
      ).returns(ActiveRecord::Result)
    end
    def insert(attributes, returning: nil, unique_by: nil); end

    sig do
      params(
        attributes: Hash,
        returning: T.nilable(T.any(T::Array[Symbol], FalseClass))
      ).returns(ActiveRecord::Result)
    end
    def insert!(attributes, returning: nil); end

    sig do
      params(
        attributes: T::Array[Hash],
        returning: T.nilable(T.any(T::Array[Symbol], FalseClass)),
        unique_by: T.nilable(T.any(T::Array[Symbol], Symbol))
      ).returns(ActiveRecord::Result)
    end
    def insert_all(attributes, returning: nil, unique_by: nil); end

    sig do
      params(
        attributes: T::Array[Hash],
        returning: T.nilable(T.any(T::Array[Symbol], FalseClass))
      ).returns(ActiveRecord::Result)
    end
    def insert_all!(attributes, returning: nil); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def invert_where(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def invitation_accepted(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def invitation_not_accepted(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def left_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def left_outer_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def limit(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def lock(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def merge(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def no_active_invitation(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def none(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def offset(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def only(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def optimizer_hints(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def or(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def preload(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def readonly(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def references(*args, &blk); end

    sig { params(method_name: T.untyped, options: T.untyped).returns(T::Boolean) }
    def reindex(method_name = nil, **options); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def reorder(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def reselect(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def reverse_chronological(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def reverse_order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def rewhere(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def select(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def strict_loading(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def structurally_compatible?(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def test(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def uniq!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def unscope(*args, &blk); end

    sig do
      params(
        attributes: Hash,
        returning: T.nilable(T.any(T::Array[Symbol], FalseClass)),
        unique_by: T.nilable(T.any(T::Array[Symbol], Symbol))
      ).returns(ActiveRecord::Result)
    end
    def upsert(attributes, returning: nil, unique_by: nil); end

    sig do
      params(
        attributes: T::Array[Hash],
        returning: T.nilable(T.any(T::Array[Symbol], FalseClass)),
        unique_by: T.nilable(T.any(T::Array[Symbol], Symbol))
      ).returns(ActiveRecord::Result)
    end
    def upsert_all(attributes, returning: nil, unique_by: nil); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelationWhereChain) }
    def where(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def with_attached_avatar(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def with_rich_text_bio(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def with_rich_text_bio_and_embeds(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def without(*args, &blk); end
  end

  module GeneratedAttributeMethods
    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def confirmation_sent_at; end

    sig { params(value: T.nilable(::ActiveSupport::TimeWithZone)).returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def confirmation_sent_at=(value); end

    sig { returns(T::Boolean) }
    def confirmation_sent_at?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def confirmation_sent_at_before_last_save; end

    sig { returns(T.untyped) }
    def confirmation_sent_at_before_type_cast; end

    sig { returns(T::Boolean) }
    def confirmation_sent_at_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def confirmation_sent_at_change; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def confirmation_sent_at_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def confirmation_sent_at_changed?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def confirmation_sent_at_in_database; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def confirmation_sent_at_previous_change; end

    sig { returns(T::Boolean) }
    def confirmation_sent_at_previously_changed?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def confirmation_sent_at_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def confirmation_sent_at_was; end

    sig { void }
    def confirmation_sent_at_will_change!; end

    sig { returns(T.nilable(::String)) }
    def confirmation_token; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def confirmation_token=(value); end

    sig { returns(T::Boolean) }
    def confirmation_token?; end

    sig { returns(T.nilable(::String)) }
    def confirmation_token_before_last_save; end

    sig { returns(T.untyped) }
    def confirmation_token_before_type_cast; end

    sig { returns(T::Boolean) }
    def confirmation_token_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def confirmation_token_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def confirmation_token_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def confirmation_token_changed?; end

    sig { returns(T.nilable(::String)) }
    def confirmation_token_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def confirmation_token_previous_change; end

    sig { returns(T::Boolean) }
    def confirmation_token_previously_changed?; end

    sig { returns(T.nilable(::String)) }
    def confirmation_token_previously_was; end

    sig { returns(T.nilable(::String)) }
    def confirmation_token_was; end

    sig { void }
    def confirmation_token_will_change!; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def confirmed_at; end

    sig { params(value: T.nilable(::ActiveSupport::TimeWithZone)).returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def confirmed_at=(value); end

    sig { returns(T::Boolean) }
    def confirmed_at?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def confirmed_at_before_last_save; end

    sig { returns(T.untyped) }
    def confirmed_at_before_type_cast; end

    sig { returns(T::Boolean) }
    def confirmed_at_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def confirmed_at_change; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def confirmed_at_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def confirmed_at_changed?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def confirmed_at_in_database; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def confirmed_at_previous_change; end

    sig { returns(T::Boolean) }
    def confirmed_at_previously_changed?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def confirmed_at_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def confirmed_at_was; end

    sig { void }
    def confirmed_at_will_change!; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at; end

    sig { params(value: ::ActiveSupport::TimeWithZone).returns(::ActiveSupport::TimeWithZone) }
    def created_at=(value); end

    sig { returns(T::Boolean) }
    def created_at?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_before_last_save; end

    sig { returns(T.untyped) }
    def created_at_before_type_cast; end

    sig { returns(T::Boolean) }
    def created_at_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def created_at_change; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def created_at_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def created_at_changed?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_in_database; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def created_at_previous_change; end

    sig { returns(T::Boolean) }
    def created_at_previously_changed?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_was; end

    sig { void }
    def created_at_will_change!; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def current_sign_in_at; end

    sig { params(value: T.nilable(::ActiveSupport::TimeWithZone)).returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def current_sign_in_at=(value); end

    sig { returns(T::Boolean) }
    def current_sign_in_at?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def current_sign_in_at_before_last_save; end

    sig { returns(T.untyped) }
    def current_sign_in_at_before_type_cast; end

    sig { returns(T::Boolean) }
    def current_sign_in_at_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def current_sign_in_at_change; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def current_sign_in_at_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def current_sign_in_at_changed?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def current_sign_in_at_in_database; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def current_sign_in_at_previous_change; end

    sig { returns(T::Boolean) }
    def current_sign_in_at_previously_changed?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def current_sign_in_at_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def current_sign_in_at_was; end

    sig { void }
    def current_sign_in_at_will_change!; end

    sig { returns(T.untyped) }
    def current_sign_in_ip; end

    sig { params(value: T.untyped).returns(T.untyped) }
    def current_sign_in_ip=(value); end

    sig { returns(T::Boolean) }
    def current_sign_in_ip?; end

    sig { returns(T.untyped) }
    def current_sign_in_ip_before_last_save; end

    sig { returns(T.untyped) }
    def current_sign_in_ip_before_type_cast; end

    sig { returns(T::Boolean) }
    def current_sign_in_ip_came_from_user?; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def current_sign_in_ip_change; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def current_sign_in_ip_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def current_sign_in_ip_changed?; end

    sig { returns(T.untyped) }
    def current_sign_in_ip_in_database; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def current_sign_in_ip_previous_change; end

    sig { returns(T::Boolean) }
    def current_sign_in_ip_previously_changed?; end

    sig { returns(T.untyped) }
    def current_sign_in_ip_previously_was; end

    sig { returns(T.untyped) }
    def current_sign_in_ip_was; end

    sig { void }
    def current_sign_in_ip_will_change!; end

    sig { returns(::String) }
    def display_name; end

    sig { params(value: ::String).returns(::String) }
    def display_name=(value); end

    sig { returns(T::Boolean) }
    def display_name?; end

    sig { returns(T.nilable(::String)) }
    def display_name_before_last_save; end

    sig { returns(T.untyped) }
    def display_name_before_type_cast; end

    sig { returns(T::Boolean) }
    def display_name_came_from_user?; end

    sig { returns(T.nilable([::String, ::String])) }
    def display_name_change; end

    sig { returns(T.nilable([::String, ::String])) }
    def display_name_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def display_name_changed?; end

    sig { returns(T.nilable(::String)) }
    def display_name_in_database; end

    sig { returns(T.nilable([::String, ::String])) }
    def display_name_previous_change; end

    sig { returns(T::Boolean) }
    def display_name_previously_changed?; end

    sig { returns(T.nilable(::String)) }
    def display_name_previously_was; end

    sig { returns(T.nilable(::String)) }
    def display_name_was; end

    sig { void }
    def display_name_will_change!; end

    sig { returns(::String) }
    def email; end

    sig { params(value: ::String).returns(::String) }
    def email=(value); end

    sig { returns(T::Boolean) }
    def email?; end

    sig { returns(T.nilable(::String)) }
    def email_before_last_save; end

    sig { returns(T.untyped) }
    def email_before_type_cast; end

    sig { returns(T::Boolean) }
    def email_came_from_user?; end

    sig { returns(T.nilable([::String, ::String])) }
    def email_change; end

    sig { returns(T.nilable([::String, ::String])) }
    def email_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def email_changed?; end

    sig { returns(T.nilable(::String)) }
    def email_in_database; end

    sig { returns(T.nilable([::String, ::String])) }
    def email_previous_change; end

    sig { returns(T::Boolean) }
    def email_previously_changed?; end

    sig { returns(T.nilable(::String)) }
    def email_previously_was; end

    sig { returns(T.nilable(::String)) }
    def email_was; end

    sig { void }
    def email_will_change!; end

    sig { returns(::String) }
    def encrypted_password; end

    sig { params(value: ::String).returns(::String) }
    def encrypted_password=(value); end

    sig { returns(T::Boolean) }
    def encrypted_password?; end

    sig { returns(T.nilable(::String)) }
    def encrypted_password_before_last_save; end

    sig { returns(T.untyped) }
    def encrypted_password_before_type_cast; end

    sig { returns(T::Boolean) }
    def encrypted_password_came_from_user?; end

    sig { returns(T.nilable([::String, ::String])) }
    def encrypted_password_change; end

    sig { returns(T.nilable([::String, ::String])) }
    def encrypted_password_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def encrypted_password_changed?; end

    sig { returns(T.nilable(::String)) }
    def encrypted_password_in_database; end

    sig { returns(T.nilable([::String, ::String])) }
    def encrypted_password_previous_change; end

    sig { returns(T::Boolean) }
    def encrypted_password_previously_changed?; end

    sig { returns(T.nilable(::String)) }
    def encrypted_password_previously_was; end

    sig { returns(T.nilable(::String)) }
    def encrypted_password_was; end

    sig { void }
    def encrypted_password_will_change!; end

    sig { returns(::String) }
    def first_name; end

    sig { params(value: ::String).returns(::String) }
    def first_name=(value); end

    sig { returns(T::Boolean) }
    def first_name?; end

    sig { returns(T.nilable(::String)) }
    def first_name_before_last_save; end

    sig { returns(T.untyped) }
    def first_name_before_type_cast; end

    sig { returns(T::Boolean) }
    def first_name_came_from_user?; end

    sig { returns(T.nilable([::String, ::String])) }
    def first_name_change; end

    sig { returns(T.nilable([::String, ::String])) }
    def first_name_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def first_name_changed?; end

    sig { returns(T.nilable(::String)) }
    def first_name_in_database; end

    sig { returns(T.nilable([::String, ::String])) }
    def first_name_previous_change; end

    sig { returns(T::Boolean) }
    def first_name_previously_changed?; end

    sig { returns(T.nilable(::String)) }
    def first_name_previously_was; end

    sig { returns(T.nilable(::String)) }
    def first_name_was; end

    sig { void }
    def first_name_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def hubspot_id; end

    sig { params(value: T.nilable(::Integer)).returns(T.nilable(::Integer)) }
    def hubspot_id=(value); end

    sig { returns(T::Boolean) }
    def hubspot_id?; end

    sig { returns(T.nilable(::Integer)) }
    def hubspot_id_before_last_save; end

    sig { returns(T.untyped) }
    def hubspot_id_before_type_cast; end

    sig { returns(T::Boolean) }
    def hubspot_id_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def hubspot_id_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def hubspot_id_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def hubspot_id_changed?; end

    sig { returns(T.nilable(::Integer)) }
    def hubspot_id_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def hubspot_id_previous_change; end

    sig { returns(T::Boolean) }
    def hubspot_id_previously_changed?; end

    sig { returns(T.nilable(::Integer)) }
    def hubspot_id_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def hubspot_id_was; end

    sig { void }
    def hubspot_id_will_change!; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def hubspot_updated_at; end

    sig { params(value: T.nilable(::ActiveSupport::TimeWithZone)).returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def hubspot_updated_at=(value); end

    sig { returns(T::Boolean) }
    def hubspot_updated_at?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def hubspot_updated_at_before_last_save; end

    sig { returns(T.untyped) }
    def hubspot_updated_at_before_type_cast; end

    sig { returns(T::Boolean) }
    def hubspot_updated_at_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def hubspot_updated_at_change; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def hubspot_updated_at_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def hubspot_updated_at_changed?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def hubspot_updated_at_in_database; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def hubspot_updated_at_previous_change; end

    sig { returns(T::Boolean) }
    def hubspot_updated_at_previously_changed?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def hubspot_updated_at_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def hubspot_updated_at_was; end

    sig { void }
    def hubspot_updated_at_will_change!; end

    sig { returns(T.nilable(::String)) }
    def id; end

    sig { params(value: ::String).returns(::String) }
    def id=(value); end

    sig { returns(T::Boolean) }
    def id?; end

    sig { returns(T.nilable(::String)) }
    def id_before_last_save; end

    sig { returns(T.untyped) }
    def id_before_type_cast; end

    sig { returns(T::Boolean) }
    def id_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def id_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def id_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def id_changed?; end

    sig { returns(T.nilable(::String)) }
    def id_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def id_previous_change; end

    sig { returns(T::Boolean) }
    def id_previously_changed?; end

    sig { returns(T.nilable(::String)) }
    def id_previously_was; end

    sig { returns(T.nilable(::String)) }
    def id_was; end

    sig { void }
    def id_will_change!; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def imported_at; end

    sig { params(value: T.nilable(::ActiveSupport::TimeWithZone)).returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def imported_at=(value); end

    sig { returns(T::Boolean) }
    def imported_at?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def imported_at_before_last_save; end

    sig { returns(T.untyped) }
    def imported_at_before_type_cast; end

    sig { returns(T::Boolean) }
    def imported_at_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def imported_at_change; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def imported_at_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def imported_at_changed?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def imported_at_in_database; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def imported_at_previous_change; end

    sig { returns(T::Boolean) }
    def imported_at_previously_changed?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def imported_at_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def imported_at_was; end

    sig { void }
    def imported_at_will_change!; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def invitation_accepted_at; end

    sig { params(value: T.nilable(::ActiveSupport::TimeWithZone)).returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def invitation_accepted_at=(value); end

    sig { returns(T::Boolean) }
    def invitation_accepted_at?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def invitation_accepted_at_before_last_save; end

    sig { returns(T.untyped) }
    def invitation_accepted_at_before_type_cast; end

    sig { returns(T::Boolean) }
    def invitation_accepted_at_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def invitation_accepted_at_change; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def invitation_accepted_at_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def invitation_accepted_at_changed?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def invitation_accepted_at_in_database; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def invitation_accepted_at_previous_change; end

    sig { returns(T::Boolean) }
    def invitation_accepted_at_previously_changed?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def invitation_accepted_at_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def invitation_accepted_at_was; end

    sig { void }
    def invitation_accepted_at_will_change!; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def invitation_created_at; end

    sig { params(value: T.nilable(::ActiveSupport::TimeWithZone)).returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def invitation_created_at=(value); end

    sig { returns(T::Boolean) }
    def invitation_created_at?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def invitation_created_at_before_last_save; end

    sig { returns(T.untyped) }
    def invitation_created_at_before_type_cast; end

    sig { returns(T::Boolean) }
    def invitation_created_at_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def invitation_created_at_change; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def invitation_created_at_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def invitation_created_at_changed?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def invitation_created_at_in_database; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def invitation_created_at_previous_change; end

    sig { returns(T::Boolean) }
    def invitation_created_at_previously_changed?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def invitation_created_at_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def invitation_created_at_was; end

    sig { void }
    def invitation_created_at_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def invitation_limit; end

    sig { params(value: T.nilable(::Integer)).returns(T.nilable(::Integer)) }
    def invitation_limit=(value); end

    sig { returns(T::Boolean) }
    def invitation_limit?; end

    sig { returns(T.nilable(::Integer)) }
    def invitation_limit_before_last_save; end

    sig { returns(T.untyped) }
    def invitation_limit_before_type_cast; end

    sig { returns(T::Boolean) }
    def invitation_limit_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def invitation_limit_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def invitation_limit_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def invitation_limit_changed?; end

    sig { returns(T.nilable(::Integer)) }
    def invitation_limit_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def invitation_limit_previous_change; end

    sig { returns(T::Boolean) }
    def invitation_limit_previously_changed?; end

    sig { returns(T.nilable(::Integer)) }
    def invitation_limit_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def invitation_limit_was; end

    sig { void }
    def invitation_limit_will_change!; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def invitation_sent_at; end

    sig { params(value: T.nilable(::ActiveSupport::TimeWithZone)).returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def invitation_sent_at=(value); end

    sig { returns(T::Boolean) }
    def invitation_sent_at?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def invitation_sent_at_before_last_save; end

    sig { returns(T.untyped) }
    def invitation_sent_at_before_type_cast; end

    sig { returns(T::Boolean) }
    def invitation_sent_at_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def invitation_sent_at_change; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def invitation_sent_at_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def invitation_sent_at_changed?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def invitation_sent_at_in_database; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def invitation_sent_at_previous_change; end

    sig { returns(T::Boolean) }
    def invitation_sent_at_previously_changed?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def invitation_sent_at_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def invitation_sent_at_was; end

    sig { void }
    def invitation_sent_at_will_change!; end

    sig { returns(T.nilable(::String)) }
    def invitation_token; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def invitation_token=(value); end

    sig { returns(T::Boolean) }
    def invitation_token?; end

    sig { returns(T.nilable(::String)) }
    def invitation_token_before_last_save; end

    sig { returns(T.untyped) }
    def invitation_token_before_type_cast; end

    sig { returns(T::Boolean) }
    def invitation_token_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def invitation_token_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def invitation_token_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def invitation_token_changed?; end

    sig { returns(T.nilable(::String)) }
    def invitation_token_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def invitation_token_previous_change; end

    sig { returns(T::Boolean) }
    def invitation_token_previously_changed?; end

    sig { returns(T.nilable(::String)) }
    def invitation_token_previously_was; end

    sig { returns(T.nilable(::String)) }
    def invitation_token_was; end

    sig { void }
    def invitation_token_will_change!; end

    sig { returns(T.nilable(::String)) }
    def invited_by_id; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def invited_by_id=(value); end

    sig { returns(T::Boolean) }
    def invited_by_id?; end

    sig { returns(T.nilable(::String)) }
    def invited_by_id_before_last_save; end

    sig { returns(T.untyped) }
    def invited_by_id_before_type_cast; end

    sig { returns(T::Boolean) }
    def invited_by_id_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def invited_by_id_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def invited_by_id_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def invited_by_id_changed?; end

    sig { returns(T.nilable(::String)) }
    def invited_by_id_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def invited_by_id_previous_change; end

    sig { returns(T::Boolean) }
    def invited_by_id_previously_changed?; end

    sig { returns(T.nilable(::String)) }
    def invited_by_id_previously_was; end

    sig { returns(T.nilable(::String)) }
    def invited_by_id_was; end

    sig { void }
    def invited_by_id_will_change!; end

    sig { returns(::String) }
    def last_name; end

    sig { params(value: ::String).returns(::String) }
    def last_name=(value); end

    sig { returns(T::Boolean) }
    def last_name?; end

    sig { returns(T.nilable(::String)) }
    def last_name_before_last_save; end

    sig { returns(T.untyped) }
    def last_name_before_type_cast; end

    sig { returns(T::Boolean) }
    def last_name_came_from_user?; end

    sig { returns(T.nilable([::String, ::String])) }
    def last_name_change; end

    sig { returns(T.nilable([::String, ::String])) }
    def last_name_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def last_name_changed?; end

    sig { returns(T.nilable(::String)) }
    def last_name_in_database; end

    sig { returns(T.nilable([::String, ::String])) }
    def last_name_previous_change; end

    sig { returns(T::Boolean) }
    def last_name_previously_changed?; end

    sig { returns(T.nilable(::String)) }
    def last_name_previously_was; end

    sig { returns(T.nilable(::String)) }
    def last_name_was; end

    sig { void }
    def last_name_will_change!; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def last_sign_in_at; end

    sig { params(value: T.nilable(::ActiveSupport::TimeWithZone)).returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def last_sign_in_at=(value); end

    sig { returns(T::Boolean) }
    def last_sign_in_at?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def last_sign_in_at_before_last_save; end

    sig { returns(T.untyped) }
    def last_sign_in_at_before_type_cast; end

    sig { returns(T::Boolean) }
    def last_sign_in_at_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def last_sign_in_at_change; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def last_sign_in_at_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def last_sign_in_at_changed?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def last_sign_in_at_in_database; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def last_sign_in_at_previous_change; end

    sig { returns(T::Boolean) }
    def last_sign_in_at_previously_changed?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def last_sign_in_at_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def last_sign_in_at_was; end

    sig { void }
    def last_sign_in_at_will_change!; end

    sig { returns(T.untyped) }
    def last_sign_in_ip; end

    sig { params(value: T.untyped).returns(T.untyped) }
    def last_sign_in_ip=(value); end

    sig { returns(T::Boolean) }
    def last_sign_in_ip?; end

    sig { returns(T.untyped) }
    def last_sign_in_ip_before_last_save; end

    sig { returns(T.untyped) }
    def last_sign_in_ip_before_type_cast; end

    sig { returns(T::Boolean) }
    def last_sign_in_ip_came_from_user?; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def last_sign_in_ip_change; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def last_sign_in_ip_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def last_sign_in_ip_changed?; end

    sig { returns(T.untyped) }
    def last_sign_in_ip_in_database; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def last_sign_in_ip_previous_change; end

    sig { returns(T::Boolean) }
    def last_sign_in_ip_previously_changed?; end

    sig { returns(T.untyped) }
    def last_sign_in_ip_previously_was; end

    sig { returns(T.untyped) }
    def last_sign_in_ip_was; end

    sig { void }
    def last_sign_in_ip_will_change!; end

    sig { returns(T.nilable(::String)) }
    def legacy_password_salt; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def legacy_password_salt=(value); end

    sig { returns(T::Boolean) }
    def legacy_password_salt?; end

    sig { returns(T.nilable(::String)) }
    def legacy_password_salt_before_last_save; end

    sig { returns(T.untyped) }
    def legacy_password_salt_before_type_cast; end

    sig { returns(T::Boolean) }
    def legacy_password_salt_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def legacy_password_salt_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def legacy_password_salt_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def legacy_password_salt_changed?; end

    sig { returns(T.nilable(::String)) }
    def legacy_password_salt_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def legacy_password_salt_previous_change; end

    sig { returns(T::Boolean) }
    def legacy_password_salt_previously_changed?; end

    sig { returns(T.nilable(::String)) }
    def legacy_password_salt_previously_was; end

    sig { returns(T.nilable(::String)) }
    def legacy_password_salt_was; end

    sig { void }
    def legacy_password_salt_will_change!; end

    sig { returns(T.untyped) }
    def metadata; end

    sig { params(value: T.untyped).returns(T.untyped) }
    def metadata=(value); end

    sig { returns(T::Boolean) }
    def metadata?; end

    sig { returns(T.untyped) }
    def metadata_before_last_save; end

    sig { returns(T.untyped) }
    def metadata_before_type_cast; end

    sig { returns(T::Boolean) }
    def metadata_came_from_user?; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def metadata_change; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def metadata_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def metadata_changed?; end

    sig { returns(T.untyped) }
    def metadata_in_database; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def metadata_previous_change; end

    sig { returns(T::Boolean) }
    def metadata_previously_changed?; end

    sig { returns(T.untyped) }
    def metadata_previously_was; end

    sig { returns(T.untyped) }
    def metadata_was; end

    sig { void }
    def metadata_will_change!; end

    sig { returns(::String) }
    def name; end

    sig { params(value: ::String).returns(::String) }
    def name=(value); end

    sig { returns(T::Boolean) }
    def name?; end

    sig { returns(T.nilable(::String)) }
    def name_before_last_save; end

    sig { returns(T.untyped) }
    def name_before_type_cast; end

    sig { returns(T::Boolean) }
    def name_came_from_user?; end

    sig { returns(T.nilable([::String, ::String])) }
    def name_change; end

    sig { returns(T.nilable([::String, ::String])) }
    def name_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def name_changed?; end

    sig { returns(T.nilable(::String)) }
    def name_in_database; end

    sig { returns(T.nilable([::String, ::String])) }
    def name_previous_change; end

    sig { returns(T::Boolean) }
    def name_previously_changed?; end

    sig { returns(T.nilable(::String)) }
    def name_previously_was; end

    sig { returns(T.nilable(::String)) }
    def name_was; end

    sig { void }
    def name_will_change!; end

    sig { returns(T.nilable(::String)) }
    def notion_page_id; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def notion_page_id=(value); end

    sig { returns(T::Boolean) }
    def notion_page_id?; end

    sig { returns(T.nilable(::String)) }
    def notion_page_id_before_last_save; end

    sig { returns(T.untyped) }
    def notion_page_id_before_type_cast; end

    sig { returns(T::Boolean) }
    def notion_page_id_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def notion_page_id_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def notion_page_id_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def notion_page_id_changed?; end

    sig { returns(T.nilable(::String)) }
    def notion_page_id_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def notion_page_id_previous_change; end

    sig { returns(T::Boolean) }
    def notion_page_id_previously_changed?; end

    sig { returns(T.nilable(::String)) }
    def notion_page_id_previously_was; end

    sig { returns(T.nilable(::String)) }
    def notion_page_id_was; end

    sig { void }
    def notion_page_id_will_change!; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def notion_updated_at; end

    sig { params(value: T.nilable(::ActiveSupport::TimeWithZone)).returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def notion_updated_at=(value); end

    sig { returns(T::Boolean) }
    def notion_updated_at?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def notion_updated_at_before_last_save; end

    sig { returns(T.untyped) }
    def notion_updated_at_before_type_cast; end

    sig { returns(T::Boolean) }
    def notion_updated_at_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def notion_updated_at_change; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def notion_updated_at_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def notion_updated_at_changed?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def notion_updated_at_in_database; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def notion_updated_at_previous_change; end

    sig { returns(T::Boolean) }
    def notion_updated_at_previously_changed?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def notion_updated_at_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def notion_updated_at_was; end

    sig { void }
    def notion_updated_at_will_change!; end

    sig { returns(T.nilable(::String)) }
    def omniauth_provider; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def omniauth_provider=(value); end

    sig { returns(T::Boolean) }
    def omniauth_provider?; end

    sig { returns(T.nilable(::String)) }
    def omniauth_provider_before_last_save; end

    sig { returns(T.untyped) }
    def omniauth_provider_before_type_cast; end

    sig { returns(T::Boolean) }
    def omniauth_provider_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def omniauth_provider_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def omniauth_provider_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def omniauth_provider_changed?; end

    sig { returns(T.nilable(::String)) }
    def omniauth_provider_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def omniauth_provider_previous_change; end

    sig { returns(T::Boolean) }
    def omniauth_provider_previously_changed?; end

    sig { returns(T.nilable(::String)) }
    def omniauth_provider_previously_was; end

    sig { returns(T.nilable(::String)) }
    def omniauth_provider_was; end

    sig { void }
    def omniauth_provider_will_change!; end

    sig { returns(T.nilable(::String)) }
    def omniauth_uid; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def omniauth_uid=(value); end

    sig { returns(T::Boolean) }
    def omniauth_uid?; end

    sig { returns(T.nilable(::String)) }
    def omniauth_uid_before_last_save; end

    sig { returns(T.untyped) }
    def omniauth_uid_before_type_cast; end

    sig { returns(T::Boolean) }
    def omniauth_uid_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def omniauth_uid_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def omniauth_uid_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def omniauth_uid_changed?; end

    sig { returns(T.nilable(::String)) }
    def omniauth_uid_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def omniauth_uid_previous_change; end

    sig { returns(T::Boolean) }
    def omniauth_uid_previously_changed?; end

    sig { returns(T.nilable(::String)) }
    def omniauth_uid_previously_was; end

    sig { returns(T.nilable(::String)) }
    def omniauth_uid_was; end

    sig { void }
    def omniauth_uid_will_change!; end

    sig { returns(T::Boolean) }
    def playces_io; end

    sig { params(value: T::Boolean).returns(T::Boolean) }
    def playces_io=(value); end

    sig { returns(T::Boolean) }
    def playces_io?; end

    sig { returns(T.nilable(T::Boolean)) }
    def playces_io_before_last_save; end

    sig { returns(T.untyped) }
    def playces_io_before_type_cast; end

    sig { returns(T::Boolean) }
    def playces_io_came_from_user?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def playces_io_change; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def playces_io_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def playces_io_changed?; end

    sig { returns(T.nilable(T::Boolean)) }
    def playces_io_in_database; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def playces_io_previous_change; end

    sig { returns(T::Boolean) }
    def playces_io_previously_changed?; end

    sig { returns(T.nilable(T::Boolean)) }
    def playces_io_previously_was; end

    sig { returns(T.nilable(T::Boolean)) }
    def playces_io_was; end

    sig { void }
    def playces_io_will_change!; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def remember_created_at; end

    sig { params(value: T.nilable(::ActiveSupport::TimeWithZone)).returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def remember_created_at=(value); end

    sig { returns(T::Boolean) }
    def remember_created_at?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def remember_created_at_before_last_save; end

    sig { returns(T.untyped) }
    def remember_created_at_before_type_cast; end

    sig { returns(T::Boolean) }
    def remember_created_at_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def remember_created_at_change; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def remember_created_at_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def remember_created_at_changed?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def remember_created_at_in_database; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def remember_created_at_previous_change; end

    sig { returns(T::Boolean) }
    def remember_created_at_previously_changed?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def remember_created_at_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def remember_created_at_was; end

    sig { void }
    def remember_created_at_will_change!; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def reset_password_sent_at; end

    sig { params(value: T.nilable(::ActiveSupport::TimeWithZone)).returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def reset_password_sent_at=(value); end

    sig { returns(T::Boolean) }
    def reset_password_sent_at?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def reset_password_sent_at_before_last_save; end

    sig { returns(T.untyped) }
    def reset_password_sent_at_before_type_cast; end

    sig { returns(T::Boolean) }
    def reset_password_sent_at_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def reset_password_sent_at_change; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def reset_password_sent_at_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def reset_password_sent_at_changed?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def reset_password_sent_at_in_database; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def reset_password_sent_at_previous_change; end

    sig { returns(T::Boolean) }
    def reset_password_sent_at_previously_changed?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def reset_password_sent_at_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def reset_password_sent_at_was; end

    sig { void }
    def reset_password_sent_at_will_change!; end

    sig { returns(T.nilable(::String)) }
    def reset_password_token; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def reset_password_token=(value); end

    sig { returns(T::Boolean) }
    def reset_password_token?; end

    sig { returns(T.nilable(::String)) }
    def reset_password_token_before_last_save; end

    sig { returns(T.untyped) }
    def reset_password_token_before_type_cast; end

    sig { returns(T::Boolean) }
    def reset_password_token_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def reset_password_token_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def reset_password_token_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def reset_password_token_changed?; end

    sig { returns(T.nilable(::String)) }
    def reset_password_token_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def reset_password_token_previous_change; end

    sig { returns(T::Boolean) }
    def reset_password_token_previously_changed?; end

    sig { returns(T.nilable(::String)) }
    def reset_password_token_previously_was; end

    sig { returns(T.nilable(::String)) }
    def reset_password_token_was; end

    sig { void }
    def reset_password_token_will_change!; end

    sig { void }
    def restore_confirmation_sent_at!; end

    sig { void }
    def restore_confirmation_token!; end

    sig { void }
    def restore_confirmed_at!; end

    sig { void }
    def restore_created_at!; end

    sig { void }
    def restore_current_sign_in_at!; end

    sig { void }
    def restore_current_sign_in_ip!; end

    sig { void }
    def restore_display_name!; end

    sig { void }
    def restore_email!; end

    sig { void }
    def restore_encrypted_password!; end

    sig { void }
    def restore_first_name!; end

    sig { void }
    def restore_hubspot_id!; end

    sig { void }
    def restore_hubspot_updated_at!; end

    sig { void }
    def restore_id!; end

    sig { void }
    def restore_imported_at!; end

    sig { void }
    def restore_invitation_accepted_at!; end

    sig { void }
    def restore_invitation_created_at!; end

    sig { void }
    def restore_invitation_limit!; end

    sig { void }
    def restore_invitation_sent_at!; end

    sig { void }
    def restore_invitation_token!; end

    sig { void }
    def restore_invited_by_id!; end

    sig { void }
    def restore_last_name!; end

    sig { void }
    def restore_last_sign_in_at!; end

    sig { void }
    def restore_last_sign_in_ip!; end

    sig { void }
    def restore_legacy_password_salt!; end

    sig { void }
    def restore_metadata!; end

    sig { void }
    def restore_name!; end

    sig { void }
    def restore_notion_page_id!; end

    sig { void }
    def restore_notion_updated_at!; end

    sig { void }
    def restore_omniauth_provider!; end

    sig { void }
    def restore_omniauth_uid!; end

    sig { void }
    def restore_playces_io!; end

    sig { void }
    def restore_remember_created_at!; end

    sig { void }
    def restore_reset_password_sent_at!; end

    sig { void }
    def restore_reset_password_token!; end

    sig { void }
    def restore_sign_in_count!; end

    sig { void }
    def restore_slug!; end

    sig { void }
    def restore_unconfirmed_email!; end

    sig { void }
    def restore_updated_at!; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def saved_change_to_confirmation_sent_at; end

    sig { returns(T::Boolean) }
    def saved_change_to_confirmation_sent_at?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_confirmation_token; end

    sig { returns(T::Boolean) }
    def saved_change_to_confirmation_token?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def saved_change_to_confirmed_at; end

    sig { returns(T::Boolean) }
    def saved_change_to_confirmed_at?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def saved_change_to_created_at; end

    sig { returns(T::Boolean) }
    def saved_change_to_created_at?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def saved_change_to_current_sign_in_at; end

    sig { returns(T::Boolean) }
    def saved_change_to_current_sign_in_at?; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def saved_change_to_current_sign_in_ip; end

    sig { returns(T::Boolean) }
    def saved_change_to_current_sign_in_ip?; end

    sig { returns(T.nilable([::String, ::String])) }
    def saved_change_to_display_name; end

    sig { returns(T::Boolean) }
    def saved_change_to_display_name?; end

    sig { returns(T.nilable([::String, ::String])) }
    def saved_change_to_email; end

    sig { returns(T::Boolean) }
    def saved_change_to_email?; end

    sig { returns(T.nilable([::String, ::String])) }
    def saved_change_to_encrypted_password; end

    sig { returns(T::Boolean) }
    def saved_change_to_encrypted_password?; end

    sig { returns(T.nilable([::String, ::String])) }
    def saved_change_to_first_name; end

    sig { returns(T::Boolean) }
    def saved_change_to_first_name?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_hubspot_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_hubspot_id?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def saved_change_to_hubspot_updated_at; end

    sig { returns(T::Boolean) }
    def saved_change_to_hubspot_updated_at?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_id?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def saved_change_to_imported_at; end

    sig { returns(T::Boolean) }
    def saved_change_to_imported_at?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def saved_change_to_invitation_accepted_at; end

    sig { returns(T::Boolean) }
    def saved_change_to_invitation_accepted_at?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def saved_change_to_invitation_created_at; end

    sig { returns(T::Boolean) }
    def saved_change_to_invitation_created_at?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_invitation_limit; end

    sig { returns(T::Boolean) }
    def saved_change_to_invitation_limit?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def saved_change_to_invitation_sent_at; end

    sig { returns(T::Boolean) }
    def saved_change_to_invitation_sent_at?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_invitation_token; end

    sig { returns(T::Boolean) }
    def saved_change_to_invitation_token?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_invited_by_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_invited_by_id?; end

    sig { returns(T.nilable([::String, ::String])) }
    def saved_change_to_last_name; end

    sig { returns(T::Boolean) }
    def saved_change_to_last_name?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def saved_change_to_last_sign_in_at; end

    sig { returns(T::Boolean) }
    def saved_change_to_last_sign_in_at?; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def saved_change_to_last_sign_in_ip; end

    sig { returns(T::Boolean) }
    def saved_change_to_last_sign_in_ip?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_legacy_password_salt; end

    sig { returns(T::Boolean) }
    def saved_change_to_legacy_password_salt?; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def saved_change_to_metadata; end

    sig { returns(T::Boolean) }
    def saved_change_to_metadata?; end

    sig { returns(T.nilable([::String, ::String])) }
    def saved_change_to_name; end

    sig { returns(T::Boolean) }
    def saved_change_to_name?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_notion_page_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_notion_page_id?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def saved_change_to_notion_updated_at; end

    sig { returns(T::Boolean) }
    def saved_change_to_notion_updated_at?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_omniauth_provider; end

    sig { returns(T::Boolean) }
    def saved_change_to_omniauth_provider?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_omniauth_uid; end

    sig { returns(T::Boolean) }
    def saved_change_to_omniauth_uid?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def saved_change_to_playces_io; end

    sig { returns(T::Boolean) }
    def saved_change_to_playces_io?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def saved_change_to_remember_created_at; end

    sig { returns(T::Boolean) }
    def saved_change_to_remember_created_at?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def saved_change_to_reset_password_sent_at; end

    sig { returns(T::Boolean) }
    def saved_change_to_reset_password_sent_at?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_reset_password_token; end

    sig { returns(T::Boolean) }
    def saved_change_to_reset_password_token?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def saved_change_to_sign_in_count; end

    sig { returns(T::Boolean) }
    def saved_change_to_sign_in_count?; end

    sig { returns(T.nilable([::String, ::String])) }
    def saved_change_to_slug; end

    sig { returns(T::Boolean) }
    def saved_change_to_slug?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_unconfirmed_email; end

    sig { returns(T::Boolean) }
    def saved_change_to_unconfirmed_email?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def saved_change_to_updated_at; end

    sig { returns(T::Boolean) }
    def saved_change_to_updated_at?; end

    sig { returns(::Integer) }
    def sign_in_count; end

    sig { params(value: ::Integer).returns(::Integer) }
    def sign_in_count=(value); end

    sig { returns(T::Boolean) }
    def sign_in_count?; end

    sig { returns(T.nilable(::Integer)) }
    def sign_in_count_before_last_save; end

    sig { returns(T.untyped) }
    def sign_in_count_before_type_cast; end

    sig { returns(T::Boolean) }
    def sign_in_count_came_from_user?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def sign_in_count_change; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def sign_in_count_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def sign_in_count_changed?; end

    sig { returns(T.nilable(::Integer)) }
    def sign_in_count_in_database; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def sign_in_count_previous_change; end

    sig { returns(T::Boolean) }
    def sign_in_count_previously_changed?; end

    sig { returns(T.nilable(::Integer)) }
    def sign_in_count_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def sign_in_count_was; end

    sig { void }
    def sign_in_count_will_change!; end

    sig { returns(::String) }
    def slug; end

    sig { params(value: ::String).returns(::String) }
    def slug=(value); end

    sig { returns(T::Boolean) }
    def slug?; end

    sig { returns(T.nilable(::String)) }
    def slug_before_last_save; end

    sig { returns(T.untyped) }
    def slug_before_type_cast; end

    sig { returns(T::Boolean) }
    def slug_came_from_user?; end

    sig { returns(T.nilable([::String, ::String])) }
    def slug_change; end

    sig { returns(T.nilable([::String, ::String])) }
    def slug_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def slug_changed?; end

    sig { returns(T.nilable(::String)) }
    def slug_in_database; end

    sig { returns(T.nilable([::String, ::String])) }
    def slug_previous_change; end

    sig { returns(T::Boolean) }
    def slug_previously_changed?; end

    sig { returns(T.nilable(::String)) }
    def slug_previously_was; end

    sig { returns(T.nilable(::String)) }
    def slug_was; end

    sig { void }
    def slug_will_change!; end

    sig { returns(T.nilable(::String)) }
    def unconfirmed_email; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def unconfirmed_email=(value); end

    sig { returns(T::Boolean) }
    def unconfirmed_email?; end

    sig { returns(T.nilable(::String)) }
    def unconfirmed_email_before_last_save; end

    sig { returns(T.untyped) }
    def unconfirmed_email_before_type_cast; end

    sig { returns(T::Boolean) }
    def unconfirmed_email_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def unconfirmed_email_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def unconfirmed_email_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def unconfirmed_email_changed?; end

    sig { returns(T.nilable(::String)) }
    def unconfirmed_email_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def unconfirmed_email_previous_change; end

    sig { returns(T::Boolean) }
    def unconfirmed_email_previously_changed?; end

    sig { returns(T.nilable(::String)) }
    def unconfirmed_email_previously_was; end

    sig { returns(T.nilable(::String)) }
    def unconfirmed_email_was; end

    sig { void }
    def unconfirmed_email_will_change!; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at; end

    sig { params(value: ::ActiveSupport::TimeWithZone).returns(::ActiveSupport::TimeWithZone) }
    def updated_at=(value); end

    sig { returns(T::Boolean) }
    def updated_at?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_before_last_save; end

    sig { returns(T.untyped) }
    def updated_at_before_type_cast; end

    sig { returns(T::Boolean) }
    def updated_at_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def updated_at_change; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def updated_at_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def updated_at_changed?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_in_database; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def updated_at_previous_change; end

    sig { returns(T::Boolean) }
    def updated_at_previously_changed?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_was; end

    sig { void }
    def updated_at_will_change!; end

    sig { returns(T::Boolean) }
    def will_save_change_to_confirmation_sent_at?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_confirmation_token?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_confirmed_at?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_created_at?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_current_sign_in_at?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_current_sign_in_ip?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_display_name?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_email?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_encrypted_password?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_first_name?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_hubspot_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_hubspot_updated_at?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_imported_at?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_invitation_accepted_at?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_invitation_created_at?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_invitation_limit?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_invitation_sent_at?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_invitation_token?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_invited_by_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_last_name?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_last_sign_in_at?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_last_sign_in_ip?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_legacy_password_salt?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_metadata?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_name?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_notion_page_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_notion_updated_at?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_omniauth_provider?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_omniauth_uid?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_playces_io?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_remember_created_at?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_reset_password_sent_at?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_reset_password_token?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_sign_in_count?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_slug?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_unconfirmed_email?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_updated_at?; end
  end

  module GeneratedRelationMethods
    sig { returns(PrivateRelation) }
    def all; end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def and(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def annotate(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def chronological(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def create_with(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def created_by_invite(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def distinct(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def eager_load(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def except(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def excluding(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def extending(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def extract_associated(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def from(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def group(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def having(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def in_order_of(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def includes(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def invert_where(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def invitation_accepted(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def invitation_not_accepted(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def left_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def left_outer_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def limit(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def lock(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def merge(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def no_active_invitation(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def none(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def offset(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def only(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def optimizer_hints(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def or(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def preload(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def readonly(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def references(*args, &blk); end

    sig { params(method_name: T.untyped, options: T.untyped).returns(T::Boolean) }
    def reindex(method_name = nil, **options); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def reorder(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def reselect(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def reverse_chronological(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def reverse_order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def rewhere(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def select(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def strict_loading(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def structurally_compatible?(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def test(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def uniq!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def unscope(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelationWhereChain) }
    def where(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def with_attached_avatar(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def with_rich_text_bio(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def with_rich_text_bio_and_embeds(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def without(*args, &blk); end
  end

  class PrivateAssociationRelation < ::ActiveRecord::AssociationRelation
    include CommonRelationMethods
    include GeneratedAssociationRelationMethods

    Elem = type_member { { fixed: ::User } }

    sig { returns(T::Array[::User]) }
    def to_ary; end
  end

  class PrivateAssociationRelationWhereChain < PrivateAssociationRelation
    Elem = type_member { { fixed: ::User } }

    sig { params(args: T.untyped).returns(PrivateAssociationRelation) }
    def associated(*args); end

    sig { params(args: T.untyped).returns(PrivateAssociationRelation) }
    def missing(*args); end

    sig { params(opts: T.untyped, rest: T.untyped).returns(PrivateAssociationRelation) }
    def not(opts, *rest); end
  end

  class PrivateCollectionProxy < ::ActiveRecord::Associations::CollectionProxy
    include CommonRelationMethods
    include GeneratedAssociationRelationMethods

    Elem = type_member { { fixed: ::User } }

    sig do
      params(
        records: T.any(::User, T::Enumerable[T.any(::User, T::Enumerable[::User])])
      ).returns(PrivateCollectionProxy)
    end
    def <<(*records); end

    sig do
      params(
        records: T.any(::User, T::Enumerable[T.any(::User, T::Enumerable[::User])])
      ).returns(PrivateCollectionProxy)
    end
    def append(*records); end

    sig { returns(PrivateCollectionProxy) }
    def clear; end

    sig do
      params(
        records: T.any(::User, T::Enumerable[T.any(::User, T::Enumerable[::User])])
      ).returns(PrivateCollectionProxy)
    end
    def concat(*records); end

    sig do
      params(
        records: T.any(::User, Integer, String, T::Enumerable[T.any(::User, Integer, String, T::Enumerable[::User])])
      ).returns(T::Array[::User])
    end
    def delete(*records); end

    sig do
      params(
        records: T.any(::User, Integer, String, T::Enumerable[T.any(::User, Integer, String, T::Enumerable[::User])])
      ).returns(T::Array[::User])
    end
    def destroy(*records); end

    sig { returns(T::Array[::User]) }
    def load_target; end

    sig do
      params(
        records: T.any(::User, T::Enumerable[T.any(::User, T::Enumerable[::User])])
      ).returns(PrivateCollectionProxy)
    end
    def prepend(*records); end

    sig do
      params(
        records: T.any(::User, T::Enumerable[T.any(::User, T::Enumerable[::User])])
      ).returns(PrivateCollectionProxy)
    end
    def push(*records); end

    sig do
      params(
        other_array: T.any(::User, T::Enumerable[T.any(::User, T::Enumerable[::User])])
      ).returns(T::Array[::User])
    end
    def replace(other_array); end

    sig { returns(PrivateAssociationRelation) }
    def scope; end

    sig { returns(T::Array[::User]) }
    def target; end

    sig { returns(T::Array[::User]) }
    def to_ary; end
  end

  class PrivateRelation < ::ActiveRecord::Relation
    include CommonRelationMethods
    include GeneratedRelationMethods

    Elem = type_member { { fixed: ::User } }

    sig { returns(T::Array[::User]) }
    def to_ary; end
  end

  class PrivateRelationWhereChain < PrivateRelation
    Elem = type_member { { fixed: ::User } }

    sig { params(args: T.untyped).returns(PrivateRelation) }
    def associated(*args); end

    sig { params(args: T.untyped).returns(PrivateRelation) }
    def missing(*args); end

    sig { params(opts: T.untyped, rest: T.untyped).returns(PrivateRelation) }
    def not(opts, *rest); end
  end
end
