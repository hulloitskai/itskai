# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `Offering`.
# Please instead update this file by running `bin/tapioca dsl Offering`.

class Offering
  include GeneratedAssociationMethods
  include GeneratedAttributeMethods
  extend CommonRelationMethods
  extend GeneratedRelationMethods

  sig { returns(ActionText::RichText) }
  def rich_text_about; end

  sig { returns(ActionText::RichText) }
  def about; end

  sig { params(value: T.untyped).returns(T.untyped) }
  def about=(value); end

  sig { returns(Enumerize::Set) }
  def audience_ages; end

  sig { returns(Enumerize::Set) }
  def audience_groupings; end

  sig { returns(ActiveStorage::Attached::Many) }
  def images; end

  sig { params(attachable: T.untyped).returns(T.untyped) }
  def images=(attachable); end

  sig { params(method_name: T.untyped, mode: T.nilable(Symbol), refresh: T::Boolean).returns(T.untyped) }
  def reindex(method_name = nil, mode: nil, refresh: false); end

  sig { params(value: ActionText::RichText).returns(ActionText::RichText) }
  def rich_text_about=(value); end

  sig { returns(T::Hash[String, T.untyped]) }
  def search_data; end

  sig { returns(T::Boolean) }
  def should_index?; end

  sig { params(options: T.untyped).returns(Searchkick::Relation) }
  def similar(**options); end

  sig { returns(Enumerize::Value) }
  def type; end

  sig { returns(Enumerize::Value) }
  def visibility; end

  private

  sig { returns(NilClass) }
  def to_ary; end

  class << self
    sig { returns(Enumerize::Attribute) }
    def audience_ages; end

    sig { returns(Enumerize::Attribute) }
    def audience_groupings; end

    sig { params(term: String, options: T.untyped, block: T.untyped).returns(Searchkick::Relation) }
    def search(term = "*", **options, &block); end

    sig { params(name: T.untyped).returns(Searchkick::Index) }
    def search_index(name: nil); end

    sig { returns(Enumerize::Attribute) }
    def type; end

    sig { returns(Enumerize::Attribute) }
    def visibility; end
  end

  module CommonRelationMethods
    sig { params(block: T.nilable(T.proc.params(record: ::Offering).returns(T.untyped))).returns(T::Boolean) }
    def any?(&block); end

    sig { params(column_name: T.any(String, Symbol)).returns(T.untyped) }
    def average(column_name); end

    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::Offering).void)).returns(::Offering) }
    def build(attributes = nil, &block); end

    sig { params(operation: Symbol, column_name: T.any(String, Symbol)).returns(T.untyped) }
    def calculate(operation, column_name); end

    sig { params(column_name: T.untyped).returns(T.untyped) }
    def count(column_name = nil); end

    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::Offering).void)).returns(::Offering) }
    def create(attributes = nil, &block); end

    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::Offering).void)).returns(::Offering) }
    def create!(attributes = nil, &block); end

    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::Offering).void)).returns(::Offering) }
    def create_or_find_by(attributes, &block); end

    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::Offering).void)).returns(::Offering) }
    def create_or_find_by!(attributes, &block); end

    sig { returns(T::Array[::Offering]) }
    def destroy_all; end

    sig { params(conditions: T.untyped).returns(T::Boolean) }
    def exists?(conditions = :none); end

    sig { returns(T.nilable(::Offering)) }
    def fifth; end

    sig { returns(::Offering) }
    def fifth!; end

    sig { params(args: T.untyped).returns(T.untyped) }
    def find(*args); end

    sig { params(args: T.untyped).returns(T.nilable(::Offering)) }
    def find_by(*args); end

    sig { params(args: T.untyped).returns(::Offering) }
    def find_by!(*args); end

    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::Offering).void)).returns(::Offering) }
    def find_or_create_by(attributes, &block); end

    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::Offering).void)).returns(::Offering) }
    def find_or_create_by!(attributes, &block); end

    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::Offering).void)).returns(::Offering) }
    def find_or_initialize_by(attributes, &block); end

    sig { params(arg: T.untyped, args: T.untyped).returns(::Offering) }
    def find_sole_by(arg, *args); end

    sig { params(limit: T.untyped).returns(T.untyped) }
    def first(limit = nil); end

    sig { returns(::Offering) }
    def first!; end

    sig { returns(T.nilable(::Offering)) }
    def forty_two; end

    sig { returns(::Offering) }
    def forty_two!; end

    sig { returns(T.nilable(::Offering)) }
    def fourth; end

    sig { returns(::Offering) }
    def fourth!; end

    sig { returns(Array) }
    def ids; end

    sig { params(record: T.untyped).returns(T::Boolean) }
    def include?(record); end

    sig { params(limit: T.untyped).returns(T.untyped) }
    def last(limit = nil); end

    sig { returns(::Offering) }
    def last!; end

    sig { params(block: T.nilable(T.proc.params(record: ::Offering).returns(T.untyped))).returns(T::Boolean) }
    def many?(&block); end

    sig { params(column_name: T.any(String, Symbol)).returns(T.untyped) }
    def maximum(column_name); end

    sig { params(record: T.untyped).returns(T::Boolean) }
    def member?(record); end

    sig { params(column_name: T.any(String, Symbol)).returns(T.untyped) }
    def minimum(column_name); end

    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::Offering).void)).returns(::Offering) }
    def new(attributes = nil, &block); end

    sig { params(block: T.nilable(T.proc.params(record: ::Offering).returns(T.untyped))).returns(T::Boolean) }
    def none?(&block); end

    sig { params(block: T.nilable(T.proc.params(record: ::Offering).returns(T.untyped))).returns(T::Boolean) }
    def one?(&block); end

    sig { params(column_names: T.untyped).returns(T.untyped) }
    def pick(*column_names); end

    sig { params(column_names: T.untyped).returns(T.untyped) }
    def pluck(*column_names); end

    sig { returns(T.nilable(::Offering)) }
    def second; end

    sig { returns(::Offering) }
    def second!; end

    sig { returns(T.nilable(::Offering)) }
    def second_to_last; end

    sig { returns(::Offering) }
    def second_to_last!; end

    sig { returns(::Offering) }
    def sole; end

    sig do
      params(
        column_name: T.nilable(T.any(String, Symbol)),
        block: T.nilable(T.proc.params(record: T.untyped).returns(T.untyped))
      ).returns(T.untyped)
    end
    def sum(column_name = nil, &block); end

    sig { params(limit: T.untyped).returns(T.untyped) }
    def take(limit = nil); end

    sig { returns(::Offering) }
    def take!; end

    sig { returns(T.nilable(::Offering)) }
    def third; end

    sig { returns(::Offering) }
    def third!; end

    sig { returns(T.nilable(::Offering)) }
    def third_to_last; end

    sig { returns(::Offering) }
    def third_to_last!; end
  end

  module GeneratedAssociationMethods
    sig { params(args: T.untyped, blk: T.untyped).returns(::Business) }
    def build_business(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::User) }
    def build_owner(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::ActionText::RichText) }
    def build_rich_text_about(*args, &blk); end

    sig { returns(T.nilable(::Business)) }
    def business; end

    sig { params(value: T.nilable(::Business)).void }
    def business=(value); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Business) }
    def create_business(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Business) }
    def create_business!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::User) }
    def create_owner(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::User) }
    def create_owner!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::ActionText::RichText) }
    def create_rich_text_about(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::ActionText::RichText) }
    def create_rich_text_about!(*args, &blk); end

    sig { returns(T::Array[T.untyped]) }
    def images_attachment_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def images_attachment_ids=(ids); end

    sig { returns(::ActiveStorage::Attachment::PrivateCollectionProxy) }
    def images_attachments; end

    sig { params(value: T::Enumerable[::ActiveStorage::Attachment]).void }
    def images_attachments=(value); end

    sig { returns(T::Array[T.untyped]) }
    def images_blob_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def images_blob_ids=(ids); end

    sig { returns(::ActiveStorage::Blob::PrivateCollectionProxy) }
    def images_blobs; end

    sig { params(value: T::Enumerable[::ActiveStorage::Blob]).void }
    def images_blobs=(value); end

    sig { returns(T::Array[T.untyped]) }
    def member_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def member_ids=(ids); end

    sig { returns(::User::PrivateCollectionProxy) }
    def members; end

    sig { params(value: T::Enumerable[::User]).void }
    def members=(value); end

    sig { returns(T::Array[T.untyped]) }
    def membership_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def membership_ids=(ids); end

    sig { returns(::Membership::PrivateCollectionProxy) }
    def memberships; end

    sig { params(value: T::Enumerable[::Membership]).void }
    def memberships=(value); end

    sig { returns(T.nilable(::User)) }
    def owner; end

    sig { params(value: T.nilable(::User)).void }
    def owner=(value); end

    sig { returns(T.nilable(::Business)) }
    def reload_business; end

    sig { returns(T.nilable(::User)) }
    def reload_owner; end

    sig { returns(T.nilable(::ActionText::RichText)) }
    def reload_rich_text_about; end

    sig { returns(T.nilable(::ActionText::RichText)) }
    def rich_text_about; end

    sig { params(value: T.nilable(::ActionText::RichText)).void }
    def rich_text_about=(value); end

    sig { returns(T::Array[T.untyped]) }
    def widget_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def widget_ids=(ids); end

    sig { returns(::Widget::PrivateCollectionProxy) }
    def widgets; end

    sig { params(value: T::Enumerable[::Widget]).void }
    def widgets=(value); end
  end

  module GeneratedAssociationRelationMethods
    sig { returns(PrivateAssociationRelation) }
    def all; end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def and(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def annotate(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def chronological(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def create_with(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def distinct(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def eager_load(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def except(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def excluding(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def extending(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def extract_associated(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def from(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def group(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def having(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def in_order_of(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def includes(*args, &blk); end

    sig do
      params(
        attributes: Hash,
        returning: T.nilable(T.any(T::Array[Symbol], FalseClass)),
        unique_by: T.nilable(T.any(T::Array[Symbol], Symbol))
      ).returns(ActiveRecord::Result)
    end
    def insert(attributes, returning: nil, unique_by: nil); end

    sig do
      params(
        attributes: Hash,
        returning: T.nilable(T.any(T::Array[Symbol], FalseClass))
      ).returns(ActiveRecord::Result)
    end
    def insert!(attributes, returning: nil); end

    sig do
      params(
        attributes: T::Array[Hash],
        returning: T.nilable(T.any(T::Array[Symbol], FalseClass)),
        unique_by: T.nilable(T.any(T::Array[Symbol], Symbol))
      ).returns(ActiveRecord::Result)
    end
    def insert_all(attributes, returning: nil, unique_by: nil); end

    sig do
      params(
        attributes: T::Array[Hash],
        returning: T.nilable(T.any(T::Array[Symbol], FalseClass))
      ).returns(ActiveRecord::Result)
    end
    def insert_all!(attributes, returning: nil); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def invert_where(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def left_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def left_outer_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def limit(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def lock(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def merge(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def none(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def offset(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def only(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def optimizer_hints(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def or(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def preload(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def readonly(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def references(*args, &blk); end

    sig { params(method_name: T.untyped, options: T.untyped).returns(T::Boolean) }
    def reindex(method_name = nil, **options); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def reorder(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def reselect(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def reverse_chronological(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def reverse_order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def rewhere(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def search_import(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def select(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def strict_loading(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def structurally_compatible?(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def test(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def uniq!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def unscope(*args, &blk); end

    sig do
      params(
        attributes: Hash,
        returning: T.nilable(T.any(T::Array[Symbol], FalseClass)),
        unique_by: T.nilable(T.any(T::Array[Symbol], Symbol))
      ).returns(ActiveRecord::Result)
    end
    def upsert(attributes, returning: nil, unique_by: nil); end

    sig do
      params(
        attributes: T::Array[Hash],
        returning: T.nilable(T.any(T::Array[Symbol], FalseClass)),
        unique_by: T.nilable(T.any(T::Array[Symbol], Symbol))
      ).returns(ActiveRecord::Result)
    end
    def upsert_all(attributes, returning: nil, unique_by: nil); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelationWhereChain) }
    def where(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def with_attached_images(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def with_rich_text_about(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def with_rich_text_about_and_embeds(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def without(*args, &blk); end
  end

  module GeneratedAttributeMethods
    sig { returns(T.untyped) }
    def audience_ages; end

    sig { params(value: T.untyped).returns(T.untyped) }
    def audience_ages=(value); end

    sig { returns(T::Boolean) }
    def audience_ages?; end

    sig { returns(T.untyped) }
    def audience_ages_before_last_save; end

    sig { returns(T.untyped) }
    def audience_ages_before_type_cast; end

    sig { returns(T::Boolean) }
    def audience_ages_came_from_user?; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def audience_ages_change; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def audience_ages_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def audience_ages_changed?; end

    sig { returns(T.untyped) }
    def audience_ages_in_database; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def audience_ages_previous_change; end

    sig { returns(T::Boolean) }
    def audience_ages_previously_changed?; end

    sig { returns(T.untyped) }
    def audience_ages_previously_was; end

    sig { returns(T.untyped) }
    def audience_ages_was; end

    sig { void }
    def audience_ages_will_change!; end

    sig { returns(T.untyped) }
    def audience_groupings; end

    sig { params(value: T.untyped).returns(T.untyped) }
    def audience_groupings=(value); end

    sig { returns(T::Boolean) }
    def audience_groupings?; end

    sig { returns(T.untyped) }
    def audience_groupings_before_last_save; end

    sig { returns(T.untyped) }
    def audience_groupings_before_type_cast; end

    sig { returns(T::Boolean) }
    def audience_groupings_came_from_user?; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def audience_groupings_change; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def audience_groupings_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def audience_groupings_changed?; end

    sig { returns(T.untyped) }
    def audience_groupings_in_database; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def audience_groupings_previous_change; end

    sig { returns(T::Boolean) }
    def audience_groupings_previously_changed?; end

    sig { returns(T.untyped) }
    def audience_groupings_previously_was; end

    sig { returns(T.untyped) }
    def audience_groupings_was; end

    sig { void }
    def audience_groupings_will_change!; end

    sig { returns(::String) }
    def blurb; end

    sig { params(value: ::String).returns(::String) }
    def blurb=(value); end

    sig { returns(T::Boolean) }
    def blurb?; end

    sig { returns(T.nilable(::String)) }
    def blurb_before_last_save; end

    sig { returns(T.untyped) }
    def blurb_before_type_cast; end

    sig { returns(T::Boolean) }
    def blurb_came_from_user?; end

    sig { returns(T.nilable([::String, ::String])) }
    def blurb_change; end

    sig { returns(T.nilable([::String, ::String])) }
    def blurb_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def blurb_changed?; end

    sig { returns(T.nilable(::String)) }
    def blurb_in_database; end

    sig { returns(T.nilable([::String, ::String])) }
    def blurb_previous_change; end

    sig { returns(T::Boolean) }
    def blurb_previously_changed?; end

    sig { returns(T.nilable(::String)) }
    def blurb_previously_was; end

    sig { returns(T.nilable(::String)) }
    def blurb_was; end

    sig { void }
    def blurb_will_change!; end

    sig { returns(::String) }
    def booking_button_label; end

    sig { params(value: ::String).returns(::String) }
    def booking_button_label=(value); end

    sig { returns(T::Boolean) }
    def booking_button_label?; end

    sig { returns(T.nilable(::String)) }
    def booking_button_label_before_last_save; end

    sig { returns(T.untyped) }
    def booking_button_label_before_type_cast; end

    sig { returns(T::Boolean) }
    def booking_button_label_came_from_user?; end

    sig { returns(T.nilable([::String, ::String])) }
    def booking_button_label_change; end

    sig { returns(T.nilable([::String, ::String])) }
    def booking_button_label_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def booking_button_label_changed?; end

    sig { returns(T.nilable(::String)) }
    def booking_button_label_in_database; end

    sig { returns(T.nilable([::String, ::String])) }
    def booking_button_label_previous_change; end

    sig { returns(T::Boolean) }
    def booking_button_label_previously_changed?; end

    sig { returns(T.nilable(::String)) }
    def booking_button_label_previously_was; end

    sig { returns(T.nilable(::String)) }
    def booking_button_label_was; end

    sig { void }
    def booking_button_label_will_change!; end

    sig { returns(T.nilable(::String)) }
    def booking_url; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def booking_url=(value); end

    sig { returns(T::Boolean) }
    def booking_url?; end

    sig { returns(T.nilable(::String)) }
    def booking_url_before_last_save; end

    sig { returns(T.untyped) }
    def booking_url_before_type_cast; end

    sig { returns(T::Boolean) }
    def booking_url_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def booking_url_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def booking_url_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def booking_url_changed?; end

    sig { returns(T.nilable(::String)) }
    def booking_url_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def booking_url_previous_change; end

    sig { returns(T::Boolean) }
    def booking_url_previously_changed?; end

    sig { returns(T.nilable(::String)) }
    def booking_url_previously_was; end

    sig { returns(T.nilable(::String)) }
    def booking_url_was; end

    sig { void }
    def booking_url_will_change!; end

    sig { returns(T.nilable(::String)) }
    def business_id; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def business_id=(value); end

    sig { returns(T::Boolean) }
    def business_id?; end

    sig { returns(T.nilable(::String)) }
    def business_id_before_last_save; end

    sig { returns(T.untyped) }
    def business_id_before_type_cast; end

    sig { returns(T::Boolean) }
    def business_id_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def business_id_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def business_id_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def business_id_changed?; end

    sig { returns(T.nilable(::String)) }
    def business_id_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def business_id_previous_change; end

    sig { returns(T::Boolean) }
    def business_id_previously_changed?; end

    sig { returns(T.nilable(::String)) }
    def business_id_previously_was; end

    sig { returns(T.nilable(::String)) }
    def business_id_was; end

    sig { void }
    def business_id_will_change!; end

    sig { returns(T.nilable(::String)) }
    def category; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def category=(value); end

    sig { returns(T::Boolean) }
    def category?; end

    sig { returns(T.nilable(::String)) }
    def category_before_last_save; end

    sig { returns(T.untyped) }
    def category_before_type_cast; end

    sig { returns(T::Boolean) }
    def category_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def category_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def category_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def category_changed?; end

    sig { returns(T.nilable(::String)) }
    def category_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def category_previous_change; end

    sig { returns(T::Boolean) }
    def category_previously_changed?; end

    sig { returns(T.nilable(::String)) }
    def category_previously_was; end

    sig { returns(T.nilable(::String)) }
    def category_was; end

    sig { void }
    def category_will_change!; end

    sig { returns(T.nilable(::String)) }
    def contact_button_label; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def contact_button_label=(value); end

    sig { returns(T::Boolean) }
    def contact_button_label?; end

    sig { returns(T.nilable(::String)) }
    def contact_button_label_before_last_save; end

    sig { returns(T.untyped) }
    def contact_button_label_before_type_cast; end

    sig { returns(T::Boolean) }
    def contact_button_label_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def contact_button_label_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def contact_button_label_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def contact_button_label_changed?; end

    sig { returns(T.nilable(::String)) }
    def contact_button_label_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def contact_button_label_previous_change; end

    sig { returns(T::Boolean) }
    def contact_button_label_previously_changed?; end

    sig { returns(T.nilable(::String)) }
    def contact_button_label_previously_was; end

    sig { returns(T.nilable(::String)) }
    def contact_button_label_was; end

    sig { void }
    def contact_button_label_will_change!; end

    sig { returns(T.nilable(::String)) }
    def contact_url; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def contact_url=(value); end

    sig { returns(T::Boolean) }
    def contact_url?; end

    sig { returns(T.nilable(::String)) }
    def contact_url_before_last_save; end

    sig { returns(T.untyped) }
    def contact_url_before_type_cast; end

    sig { returns(T::Boolean) }
    def contact_url_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def contact_url_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def contact_url_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def contact_url_changed?; end

    sig { returns(T.nilable(::String)) }
    def contact_url_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def contact_url_previous_change; end

    sig { returns(T::Boolean) }
    def contact_url_previously_changed?; end

    sig { returns(T.nilable(::String)) }
    def contact_url_previously_was; end

    sig { returns(T.nilable(::String)) }
    def contact_url_was; end

    sig { void }
    def contact_url_will_change!; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at; end

    sig { params(value: ::ActiveSupport::TimeWithZone).returns(::ActiveSupport::TimeWithZone) }
    def created_at=(value); end

    sig { returns(T::Boolean) }
    def created_at?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_before_last_save; end

    sig { returns(T.untyped) }
    def created_at_before_type_cast; end

    sig { returns(T::Boolean) }
    def created_at_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def created_at_change; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def created_at_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def created_at_changed?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_in_database; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def created_at_previous_change; end

    sig { returns(T::Boolean) }
    def created_at_previously_changed?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_was; end

    sig { void }
    def created_at_will_change!; end

    sig { returns(T.nilable(::String)) }
    def id; end

    sig { params(value: ::String).returns(::String) }
    def id=(value); end

    sig { returns(T::Boolean) }
    def id?; end

    sig { returns(T.nilable(::String)) }
    def id_before_last_save; end

    sig { returns(T.untyped) }
    def id_before_type_cast; end

    sig { returns(T::Boolean) }
    def id_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def id_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def id_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def id_changed?; end

    sig { returns(T.nilable(::String)) }
    def id_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def id_previous_change; end

    sig { returns(T::Boolean) }
    def id_previously_changed?; end

    sig { returns(T.nilable(::String)) }
    def id_previously_was; end

    sig { returns(T.nilable(::String)) }
    def id_was; end

    sig { void }
    def id_will_change!; end

    sig { returns(T.untyped) }
    def images_attachment_ids; end

    sig { params(value: T.untyped).returns(T.untyped) }
    def images_attachment_ids=(value); end

    sig { returns(T::Boolean) }
    def images_attachment_ids?; end

    sig { returns(T.untyped) }
    def images_attachment_ids_before_last_save; end

    sig { returns(T.untyped) }
    def images_attachment_ids_before_type_cast; end

    sig { returns(T::Boolean) }
    def images_attachment_ids_came_from_user?; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def images_attachment_ids_change; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def images_attachment_ids_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def images_attachment_ids_changed?; end

    sig { returns(T.untyped) }
    def images_attachment_ids_in_database; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def images_attachment_ids_previous_change; end

    sig { returns(T::Boolean) }
    def images_attachment_ids_previously_changed?; end

    sig { returns(T.untyped) }
    def images_attachment_ids_previously_was; end

    sig { returns(T.untyped) }
    def images_attachment_ids_was; end

    sig { void }
    def images_attachment_ids_will_change!; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def imported_at; end

    sig { params(value: T.nilable(::ActiveSupport::TimeWithZone)).returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def imported_at=(value); end

    sig { returns(T::Boolean) }
    def imported_at?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def imported_at_before_last_save; end

    sig { returns(T.untyped) }
    def imported_at_before_type_cast; end

    sig { returns(T::Boolean) }
    def imported_at_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def imported_at_change; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def imported_at_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def imported_at_changed?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def imported_at_in_database; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def imported_at_previous_change; end

    sig { returns(T::Boolean) }
    def imported_at_previously_changed?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def imported_at_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def imported_at_was; end

    sig { void }
    def imported_at_will_change!; end

    sig { returns(T.untyped) }
    def keywords; end

    sig { params(value: T.untyped).returns(T.untyped) }
    def keywords=(value); end

    sig { returns(T::Boolean) }
    def keywords?; end

    sig { returns(T.untyped) }
    def keywords_before_last_save; end

    sig { returns(T.untyped) }
    def keywords_before_type_cast; end

    sig { returns(T::Boolean) }
    def keywords_came_from_user?; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def keywords_change; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def keywords_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def keywords_changed?; end

    sig { returns(T.untyped) }
    def keywords_in_database; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def keywords_previous_change; end

    sig { returns(T::Boolean) }
    def keywords_previously_changed?; end

    sig { returns(T.untyped) }
    def keywords_previously_was; end

    sig { returns(T.untyped) }
    def keywords_was; end

    sig { void }
    def keywords_will_change!; end

    sig { returns(T.untyped) }
    def location; end

    sig { params(value: T.untyped).returns(T.untyped) }
    def location=(value); end

    sig { returns(T::Boolean) }
    def location?; end

    sig { returns(T.untyped) }
    def location_before_last_save; end

    sig { returns(T.untyped) }
    def location_before_type_cast; end

    sig { returns(T::Boolean) }
    def location_came_from_user?; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def location_change; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def location_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def location_changed?; end

    sig { returns(T.untyped) }
    def location_in_database; end

    sig { returns(::String) }
    def location_name; end

    sig { params(value: ::String).returns(::String) }
    def location_name=(value); end

    sig { returns(T::Boolean) }
    def location_name?; end

    sig { returns(T.nilable(::String)) }
    def location_name_before_last_save; end

    sig { returns(T.untyped) }
    def location_name_before_type_cast; end

    sig { returns(T::Boolean) }
    def location_name_came_from_user?; end

    sig { returns(T.nilable([::String, ::String])) }
    def location_name_change; end

    sig { returns(T.nilable([::String, ::String])) }
    def location_name_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def location_name_changed?; end

    sig { returns(T.nilable(::String)) }
    def location_name_in_database; end

    sig { returns(T.nilable([::String, ::String])) }
    def location_name_previous_change; end

    sig { returns(T::Boolean) }
    def location_name_previously_changed?; end

    sig { returns(T.nilable(::String)) }
    def location_name_previously_was; end

    sig { returns(T.nilable(::String)) }
    def location_name_was; end

    sig { void }
    def location_name_will_change!; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def location_previous_change; end

    sig { returns(T::Boolean) }
    def location_previously_changed?; end

    sig { returns(T.untyped) }
    def location_previously_was; end

    sig { returns(T.untyped) }
    def location_was; end

    sig { void }
    def location_will_change!; end

    sig { returns(T.untyped) }
    def metadata; end

    sig { params(value: T.untyped).returns(T.untyped) }
    def metadata=(value); end

    sig { returns(T::Boolean) }
    def metadata?; end

    sig { returns(T.untyped) }
    def metadata_before_last_save; end

    sig { returns(T.untyped) }
    def metadata_before_type_cast; end

    sig { returns(T::Boolean) }
    def metadata_came_from_user?; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def metadata_change; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def metadata_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def metadata_changed?; end

    sig { returns(T.untyped) }
    def metadata_in_database; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def metadata_previous_change; end

    sig { returns(T::Boolean) }
    def metadata_previously_changed?; end

    sig { returns(T.untyped) }
    def metadata_previously_was; end

    sig { returns(T.untyped) }
    def metadata_was; end

    sig { void }
    def metadata_will_change!; end

    sig { returns(::String) }
    def name; end

    sig { params(value: ::String).returns(::String) }
    def name=(value); end

    sig { returns(T::Boolean) }
    def name?; end

    sig { returns(T.nilable(::String)) }
    def name_before_last_save; end

    sig { returns(T.untyped) }
    def name_before_type_cast; end

    sig { returns(T::Boolean) }
    def name_came_from_user?; end

    sig { returns(T.nilable([::String, ::String])) }
    def name_change; end

    sig { returns(T.nilable([::String, ::String])) }
    def name_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def name_changed?; end

    sig { returns(T.nilable(::String)) }
    def name_in_database; end

    sig { returns(T.nilable([::String, ::String])) }
    def name_previous_change; end

    sig { returns(T::Boolean) }
    def name_previously_changed?; end

    sig { returns(T.nilable(::String)) }
    def name_previously_was; end

    sig { returns(T.nilable(::String)) }
    def name_was; end

    sig { void }
    def name_will_change!; end

    sig { returns(T.nilable(::String)) }
    def notion_page_id; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def notion_page_id=(value); end

    sig { returns(T::Boolean) }
    def notion_page_id?; end

    sig { returns(T.nilable(::String)) }
    def notion_page_id_before_last_save; end

    sig { returns(T.untyped) }
    def notion_page_id_before_type_cast; end

    sig { returns(T::Boolean) }
    def notion_page_id_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def notion_page_id_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def notion_page_id_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def notion_page_id_changed?; end

    sig { returns(T.nilable(::String)) }
    def notion_page_id_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def notion_page_id_previous_change; end

    sig { returns(T::Boolean) }
    def notion_page_id_previously_changed?; end

    sig { returns(T.nilable(::String)) }
    def notion_page_id_previously_was; end

    sig { returns(T.nilable(::String)) }
    def notion_page_id_was; end

    sig { void }
    def notion_page_id_will_change!; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def notion_updated_at; end

    sig { params(value: T.nilable(::ActiveSupport::TimeWithZone)).returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def notion_updated_at=(value); end

    sig { returns(T::Boolean) }
    def notion_updated_at?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def notion_updated_at_before_last_save; end

    sig { returns(T.untyped) }
    def notion_updated_at_before_type_cast; end

    sig { returns(T::Boolean) }
    def notion_updated_at_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def notion_updated_at_change; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def notion_updated_at_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def notion_updated_at_changed?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def notion_updated_at_in_database; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def notion_updated_at_previous_change; end

    sig { returns(T::Boolean) }
    def notion_updated_at_previously_changed?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def notion_updated_at_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def notion_updated_at_was; end

    sig { void }
    def notion_updated_at_will_change!; end

    sig { void }
    def restore_audience_ages!; end

    sig { void }
    def restore_audience_groupings!; end

    sig { void }
    def restore_blurb!; end

    sig { void }
    def restore_booking_button_label!; end

    sig { void }
    def restore_booking_url!; end

    sig { void }
    def restore_business_id!; end

    sig { void }
    def restore_category!; end

    sig { void }
    def restore_contact_button_label!; end

    sig { void }
    def restore_contact_url!; end

    sig { void }
    def restore_created_at!; end

    sig { void }
    def restore_id!; end

    sig { void }
    def restore_images_attachment_ids!; end

    sig { void }
    def restore_imported_at!; end

    sig { void }
    def restore_keywords!; end

    sig { void }
    def restore_location!; end

    sig { void }
    def restore_location_name!; end

    sig { void }
    def restore_metadata!; end

    sig { void }
    def restore_name!; end

    sig { void }
    def restore_notion_page_id!; end

    sig { void }
    def restore_notion_updated_at!; end

    sig { void }
    def restore_slug!; end

    sig { void }
    def restore_tags!; end

    sig { void }
    def restore_type!; end

    sig { void }
    def restore_updated_at!; end

    sig { void }
    def restore_visibility!; end

    sig { void }
    def restore_widget_ids!; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def saved_change_to_audience_ages; end

    sig { returns(T::Boolean) }
    def saved_change_to_audience_ages?; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def saved_change_to_audience_groupings; end

    sig { returns(T::Boolean) }
    def saved_change_to_audience_groupings?; end

    sig { returns(T.nilable([::String, ::String])) }
    def saved_change_to_blurb; end

    sig { returns(T::Boolean) }
    def saved_change_to_blurb?; end

    sig { returns(T.nilable([::String, ::String])) }
    def saved_change_to_booking_button_label; end

    sig { returns(T::Boolean) }
    def saved_change_to_booking_button_label?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_booking_url; end

    sig { returns(T::Boolean) }
    def saved_change_to_booking_url?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_business_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_business_id?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_category; end

    sig { returns(T::Boolean) }
    def saved_change_to_category?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_contact_button_label; end

    sig { returns(T::Boolean) }
    def saved_change_to_contact_button_label?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_contact_url; end

    sig { returns(T::Boolean) }
    def saved_change_to_contact_url?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def saved_change_to_created_at; end

    sig { returns(T::Boolean) }
    def saved_change_to_created_at?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_id?; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def saved_change_to_images_attachment_ids; end

    sig { returns(T::Boolean) }
    def saved_change_to_images_attachment_ids?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def saved_change_to_imported_at; end

    sig { returns(T::Boolean) }
    def saved_change_to_imported_at?; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def saved_change_to_keywords; end

    sig { returns(T::Boolean) }
    def saved_change_to_keywords?; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def saved_change_to_location; end

    sig { returns(T::Boolean) }
    def saved_change_to_location?; end

    sig { returns(T.nilable([::String, ::String])) }
    def saved_change_to_location_name; end

    sig { returns(T::Boolean) }
    def saved_change_to_location_name?; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def saved_change_to_metadata; end

    sig { returns(T::Boolean) }
    def saved_change_to_metadata?; end

    sig { returns(T.nilable([::String, ::String])) }
    def saved_change_to_name; end

    sig { returns(T::Boolean) }
    def saved_change_to_name?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_notion_page_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_notion_page_id?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def saved_change_to_notion_updated_at; end

    sig { returns(T::Boolean) }
    def saved_change_to_notion_updated_at?; end

    sig { returns(T.nilable([::String, ::String])) }
    def saved_change_to_slug; end

    sig { returns(T::Boolean) }
    def saved_change_to_slug?; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def saved_change_to_tags; end

    sig { returns(T::Boolean) }
    def saved_change_to_tags?; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def saved_change_to_type; end

    sig { returns(T::Boolean) }
    def saved_change_to_type?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def saved_change_to_updated_at; end

    sig { returns(T::Boolean) }
    def saved_change_to_updated_at?; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def saved_change_to_visibility; end

    sig { returns(T::Boolean) }
    def saved_change_to_visibility?; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def saved_change_to_widget_ids; end

    sig { returns(T::Boolean) }
    def saved_change_to_widget_ids?; end

    sig { returns(::String) }
    def slug; end

    sig { params(value: ::String).returns(::String) }
    def slug=(value); end

    sig { returns(T::Boolean) }
    def slug?; end

    sig { returns(T.nilable(::String)) }
    def slug_before_last_save; end

    sig { returns(T.untyped) }
    def slug_before_type_cast; end

    sig { returns(T::Boolean) }
    def slug_came_from_user?; end

    sig { returns(T.nilable([::String, ::String])) }
    def slug_change; end

    sig { returns(T.nilable([::String, ::String])) }
    def slug_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def slug_changed?; end

    sig { returns(T.nilable(::String)) }
    def slug_in_database; end

    sig { returns(T.nilable([::String, ::String])) }
    def slug_previous_change; end

    sig { returns(T::Boolean) }
    def slug_previously_changed?; end

    sig { returns(T.nilable(::String)) }
    def slug_previously_was; end

    sig { returns(T.nilable(::String)) }
    def slug_was; end

    sig { void }
    def slug_will_change!; end

    sig { returns(T.untyped) }
    def tags; end

    sig { params(value: T.untyped).returns(T.untyped) }
    def tags=(value); end

    sig { returns(T::Boolean) }
    def tags?; end

    sig { returns(T.untyped) }
    def tags_before_last_save; end

    sig { returns(T.untyped) }
    def tags_before_type_cast; end

    sig { returns(T::Boolean) }
    def tags_came_from_user?; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def tags_change; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def tags_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def tags_changed?; end

    sig { returns(T.untyped) }
    def tags_in_database; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def tags_previous_change; end

    sig { returns(T::Boolean) }
    def tags_previously_changed?; end

    sig { returns(T.untyped) }
    def tags_previously_was; end

    sig { returns(T.untyped) }
    def tags_was; end

    sig { void }
    def tags_will_change!; end

    sig { returns(T.untyped) }
    def type; end

    sig { params(value: T.untyped).returns(T.untyped) }
    def type=(value); end

    sig { returns(T::Boolean) }
    def type?; end

    sig { returns(T.untyped) }
    def type_before_last_save; end

    sig { returns(T.untyped) }
    def type_before_type_cast; end

    sig { returns(T::Boolean) }
    def type_came_from_user?; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def type_change; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def type_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def type_changed?; end

    sig { returns(T.untyped) }
    def type_in_database; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def type_previous_change; end

    sig { returns(T::Boolean) }
    def type_previously_changed?; end

    sig { returns(T.untyped) }
    def type_previously_was; end

    sig { returns(T.untyped) }
    def type_was; end

    sig { void }
    def type_will_change!; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at; end

    sig { params(value: ::ActiveSupport::TimeWithZone).returns(::ActiveSupport::TimeWithZone) }
    def updated_at=(value); end

    sig { returns(T::Boolean) }
    def updated_at?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_before_last_save; end

    sig { returns(T.untyped) }
    def updated_at_before_type_cast; end

    sig { returns(T::Boolean) }
    def updated_at_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def updated_at_change; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def updated_at_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def updated_at_changed?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_in_database; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def updated_at_previous_change; end

    sig { returns(T::Boolean) }
    def updated_at_previously_changed?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_was; end

    sig { void }
    def updated_at_will_change!; end

    sig { returns(T.untyped) }
    def visibility; end

    sig { params(value: T.untyped).returns(T.untyped) }
    def visibility=(value); end

    sig { returns(T::Boolean) }
    def visibility?; end

    sig { returns(T.untyped) }
    def visibility_before_last_save; end

    sig { returns(T.untyped) }
    def visibility_before_type_cast; end

    sig { returns(T::Boolean) }
    def visibility_came_from_user?; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def visibility_change; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def visibility_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def visibility_changed?; end

    sig { returns(T.untyped) }
    def visibility_in_database; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def visibility_previous_change; end

    sig { returns(T::Boolean) }
    def visibility_previously_changed?; end

    sig { returns(T.untyped) }
    def visibility_previously_was; end

    sig { returns(T.untyped) }
    def visibility_was; end

    sig { void }
    def visibility_will_change!; end

    sig { returns(T.untyped) }
    def widget_ids; end

    sig { params(value: T.untyped).returns(T.untyped) }
    def widget_ids=(value); end

    sig { returns(T::Boolean) }
    def widget_ids?; end

    sig { returns(T.untyped) }
    def widget_ids_before_last_save; end

    sig { returns(T.untyped) }
    def widget_ids_before_type_cast; end

    sig { returns(T::Boolean) }
    def widget_ids_came_from_user?; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def widget_ids_change; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def widget_ids_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def widget_ids_changed?; end

    sig { returns(T.untyped) }
    def widget_ids_in_database; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def widget_ids_previous_change; end

    sig { returns(T::Boolean) }
    def widget_ids_previously_changed?; end

    sig { returns(T.untyped) }
    def widget_ids_previously_was; end

    sig { returns(T.untyped) }
    def widget_ids_was; end

    sig { void }
    def widget_ids_will_change!; end

    sig { returns(T::Boolean) }
    def will_save_change_to_audience_ages?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_audience_groupings?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_blurb?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_booking_button_label?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_booking_url?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_business_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_category?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_contact_button_label?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_contact_url?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_created_at?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_images_attachment_ids?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_imported_at?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_keywords?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_location?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_location_name?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_metadata?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_name?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_notion_page_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_notion_updated_at?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_slug?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_tags?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_type?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_updated_at?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_visibility?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_widget_ids?; end
  end

  module GeneratedRelationMethods
    sig { returns(PrivateRelation) }
    def all; end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def and(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def annotate(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def chronological(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def create_with(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def distinct(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def eager_load(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def except(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def excluding(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def extending(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def extract_associated(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def from(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def group(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def having(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def in_order_of(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def includes(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def invert_where(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def left_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def left_outer_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def limit(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def lock(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def merge(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def none(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def offset(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def only(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def optimizer_hints(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def or(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def preload(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def readonly(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def references(*args, &blk); end

    sig { params(method_name: T.untyped, options: T.untyped).returns(T::Boolean) }
    def reindex(method_name = nil, **options); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def reorder(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def reselect(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def reverse_chronological(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def reverse_order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def rewhere(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def search_import(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def select(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def strict_loading(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def structurally_compatible?(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def test(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def uniq!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def unscope(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelationWhereChain) }
    def where(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def with_attached_images(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def with_rich_text_about(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def with_rich_text_about_and_embeds(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def without(*args, &blk); end
  end

  class PrivateAssociationRelation < ::ActiveRecord::AssociationRelation
    include CommonRelationMethods
    include GeneratedAssociationRelationMethods

    Elem = type_member { { fixed: ::Offering } }

    sig { returns(T::Array[::Offering]) }
    def to_ary; end
  end

  class PrivateAssociationRelationWhereChain < PrivateAssociationRelation
    Elem = type_member { { fixed: ::Offering } }

    sig { params(args: T.untyped).returns(PrivateAssociationRelation) }
    def associated(*args); end

    sig { params(args: T.untyped).returns(PrivateAssociationRelation) }
    def missing(*args); end

    sig { params(opts: T.untyped, rest: T.untyped).returns(PrivateAssociationRelation) }
    def not(opts, *rest); end
  end

  class PrivateCollectionProxy < ::ActiveRecord::Associations::CollectionProxy
    include CommonRelationMethods
    include GeneratedAssociationRelationMethods

    Elem = type_member { { fixed: ::Offering } }

    sig do
      params(
        records: T.any(::Offering, T::Enumerable[T.any(::Offering, T::Enumerable[::Offering])])
      ).returns(PrivateCollectionProxy)
    end
    def <<(*records); end

    sig do
      params(
        records: T.any(::Offering, T::Enumerable[T.any(::Offering, T::Enumerable[::Offering])])
      ).returns(PrivateCollectionProxy)
    end
    def append(*records); end

    sig { returns(PrivateCollectionProxy) }
    def clear; end

    sig do
      params(
        records: T.any(::Offering, T::Enumerable[T.any(::Offering, T::Enumerable[::Offering])])
      ).returns(PrivateCollectionProxy)
    end
    def concat(*records); end

    sig do
      params(
        records: T.any(::Offering, Integer, String, T::Enumerable[T.any(::Offering, Integer, String, T::Enumerable[::Offering])])
      ).returns(T::Array[::Offering])
    end
    def delete(*records); end

    sig do
      params(
        records: T.any(::Offering, Integer, String, T::Enumerable[T.any(::Offering, Integer, String, T::Enumerable[::Offering])])
      ).returns(T::Array[::Offering])
    end
    def destroy(*records); end

    sig { returns(T::Array[::Offering]) }
    def load_target; end

    sig do
      params(
        records: T.any(::Offering, T::Enumerable[T.any(::Offering, T::Enumerable[::Offering])])
      ).returns(PrivateCollectionProxy)
    end
    def prepend(*records); end

    sig do
      params(
        records: T.any(::Offering, T::Enumerable[T.any(::Offering, T::Enumerable[::Offering])])
      ).returns(PrivateCollectionProxy)
    end
    def push(*records); end

    sig do
      params(
        other_array: T.any(::Offering, T::Enumerable[T.any(::Offering, T::Enumerable[::Offering])])
      ).returns(T::Array[::Offering])
    end
    def replace(other_array); end

    sig { returns(PrivateAssociationRelation) }
    def scope; end

    sig { returns(T::Array[::Offering]) }
    def target; end

    sig { returns(T::Array[::Offering]) }
    def to_ary; end
  end

  class PrivateRelation < ::ActiveRecord::Relation
    include CommonRelationMethods
    include GeneratedRelationMethods

    Elem = type_member { { fixed: ::Offering } }

    sig { returns(T::Array[::Offering]) }
    def to_ary; end
  end

  class PrivateRelationWhereChain < PrivateRelation
    Elem = type_member { { fixed: ::Offering } }

    sig { params(args: T.untyped).returns(PrivateRelation) }
    def associated(*args); end

    sig { params(args: T.untyped).returns(PrivateRelation) }
    def missing(*args); end

    sig { params(opts: T.untyped, rest: T.untyped).returns(PrivateRelation) }
    def not(opts, *rest); end
  end
end
