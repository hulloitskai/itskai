# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `LocationLogAddress`.
# Please instead update this file by running `bin/tapioca dsl LocationLogAddress`.

class LocationLogAddress
  include GeneratedAssociationMethods
  include GeneratedAttributeMethods
  extend CommonRelationMethods
  extend GeneratedRelationMethods

  private

  sig { returns(NilClass) }
  def to_ary; end

  module CommonRelationMethods
    sig do
      params(
        block: T.nilable(T.proc.params(record: ::LocationLogAddress).returns(T.untyped))
      ).returns(T::Boolean)
    end
    def any?(&block); end

    sig { params(column_name: T.any(String, Symbol)).returns(T.untyped) }
    def average(column_name); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::LocationLogAddress).void)
      ).returns(::LocationLogAddress)
    end
    def build(attributes = nil, &block); end

    sig { params(operation: Symbol, column_name: T.any(String, Symbol)).returns(T.untyped) }
    def calculate(operation, column_name); end

    sig { params(column_name: T.untyped).returns(T.untyped) }
    def count(column_name = nil); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::LocationLogAddress).void)
      ).returns(::LocationLogAddress)
    end
    def create(attributes = nil, &block); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::LocationLogAddress).void)
      ).returns(::LocationLogAddress)
    end
    def create!(attributes = nil, &block); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::LocationLogAddress).void)
      ).returns(::LocationLogAddress)
    end
    def create_or_find_by(attributes, &block); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::LocationLogAddress).void)
      ).returns(::LocationLogAddress)
    end
    def create_or_find_by!(attributes, &block); end

    sig { returns(T::Array[::LocationLogAddress]) }
    def destroy_all; end

    sig { params(conditions: T.untyped).returns(T::Boolean) }
    def exists?(conditions = :none); end

    sig { returns(T.nilable(::LocationLogAddress)) }
    def fifth; end

    sig { returns(::LocationLogAddress) }
    def fifth!; end

    sig { params(args: T.untyped).returns(T.untyped) }
    def find(*args); end

    sig { params(args: T.untyped).returns(T.nilable(::LocationLogAddress)) }
    def find_by(*args); end

    sig { params(args: T.untyped).returns(::LocationLogAddress) }
    def find_by!(*args); end

    sig do
      params(
        start: T.untyped,
        finish: T.untyped,
        batch_size: Integer,
        error_on_ignore: T.untyped,
        order: Symbol,
        block: T.nilable(T.proc.params(object: ::LocationLogAddress).void)
      ).returns(T.nilable(T::Enumerator[::LocationLogAddress]))
    end
    def find_each(start: nil, finish: nil, batch_size: 1000, error_on_ignore: nil, order: :asc, &block); end

    sig do
      params(
        start: T.untyped,
        finish: T.untyped,
        batch_size: Integer,
        error_on_ignore: T.untyped,
        order: Symbol,
        block: T.nilable(T.proc.params(object: T::Array[::LocationLogAddress]).void)
      ).returns(T.nilable(T::Enumerator[T::Enumerator[::LocationLogAddress]]))
    end
    def find_in_batches(start: nil, finish: nil, batch_size: 1000, error_on_ignore: nil, order: :asc, &block); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::LocationLogAddress).void)
      ).returns(::LocationLogAddress)
    end
    def find_or_create_by(attributes, &block); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::LocationLogAddress).void)
      ).returns(::LocationLogAddress)
    end
    def find_or_create_by!(attributes, &block); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::LocationLogAddress).void)
      ).returns(::LocationLogAddress)
    end
    def find_or_initialize_by(attributes, &block); end

    sig { params(signed_id: T.untyped, purpose: T.untyped).returns(T.nilable(::LocationLogAddress)) }
    def find_signed(signed_id, purpose: nil); end

    sig { params(signed_id: T.untyped, purpose: T.untyped).returns(::LocationLogAddress) }
    def find_signed!(signed_id, purpose: nil); end

    sig { params(arg: T.untyped, args: T.untyped).returns(::LocationLogAddress) }
    def find_sole_by(arg, *args); end

    sig { params(limit: T.untyped).returns(T.untyped) }
    def first(limit = nil); end

    sig { returns(::LocationLogAddress) }
    def first!; end

    sig { returns(T.nilable(::LocationLogAddress)) }
    def forty_two; end

    sig { returns(::LocationLogAddress) }
    def forty_two!; end

    sig { returns(T.nilable(::LocationLogAddress)) }
    def fourth; end

    sig { returns(::LocationLogAddress) }
    def fourth!; end

    sig { returns(Array) }
    def ids; end

    sig do
      params(
        of: Integer,
        start: T.untyped,
        finish: T.untyped,
        load: T.untyped,
        error_on_ignore: T.untyped,
        order: Symbol,
        use_ranges: T.untyped,
        block: T.nilable(T.proc.params(object: PrivateRelation).void)
      ).returns(T.nilable(::ActiveRecord::Batches::BatchEnumerator))
    end
    def in_batches(of: 1000, start: nil, finish: nil, load: false, error_on_ignore: nil, order: :asc, use_ranges: nil, &block); end

    sig { params(record: T.untyped).returns(T::Boolean) }
    def include?(record); end

    sig { params(limit: T.untyped).returns(T.untyped) }
    def last(limit = nil); end

    sig { returns(::LocationLogAddress) }
    def last!; end

    sig do
      params(
        block: T.nilable(T.proc.params(record: ::LocationLogAddress).returns(T.untyped))
      ).returns(T::Boolean)
    end
    def many?(&block); end

    sig { params(column_name: T.any(String, Symbol)).returns(T.untyped) }
    def maximum(column_name); end

    sig { params(record: T.untyped).returns(T::Boolean) }
    def member?(record); end

    sig { params(column_name: T.any(String, Symbol)).returns(T.untyped) }
    def minimum(column_name); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::LocationLogAddress).void)
      ).returns(::LocationLogAddress)
    end
    def new(attributes = nil, &block); end

    sig do
      params(
        block: T.nilable(T.proc.params(record: ::LocationLogAddress).returns(T.untyped))
      ).returns(T::Boolean)
    end
    def none?(&block); end

    sig do
      params(
        block: T.nilable(T.proc.params(record: ::LocationLogAddress).returns(T.untyped))
      ).returns(T::Boolean)
    end
    def one?(&block); end

    sig { params(column_names: T.untyped).returns(T.untyped) }
    def pick(*column_names); end

    sig { params(column_names: T.untyped).returns(T.untyped) }
    def pluck(*column_names); end

    sig { returns(T.nilable(::LocationLogAddress)) }
    def second; end

    sig { returns(::LocationLogAddress) }
    def second!; end

    sig { returns(T.nilable(::LocationLogAddress)) }
    def second_to_last; end

    sig { returns(::LocationLogAddress) }
    def second_to_last!; end

    sig { returns(::LocationLogAddress) }
    def sole; end

    sig do
      params(
        column_name: T.nilable(T.any(String, Symbol)),
        block: T.nilable(T.proc.params(record: T.untyped).returns(T.untyped))
      ).returns(T.untyped)
    end
    def sum(column_name = nil, &block); end

    sig { params(limit: T.untyped).returns(T.untyped) }
    def take(limit = nil); end

    sig { returns(::LocationLogAddress) }
    def take!; end

    sig { returns(T.nilable(::LocationLogAddress)) }
    def third; end

    sig { returns(::LocationLogAddress) }
    def third!; end

    sig { returns(T.nilable(::LocationLogAddress)) }
    def third_to_last; end

    sig { returns(::LocationLogAddress) }
    def third_to_last!; end
  end

  module GeneratedAssociationMethods
    sig { params(args: T.untyped, blk: T.untyped).returns(::LocationLog) }
    def build_location_log(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::LocationLog) }
    def create_location_log(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::LocationLog) }
    def create_location_log!(*args, &blk); end

    sig { returns(T.nilable(::LocationLog)) }
    def location_log; end

    sig { params(value: T.nilable(::LocationLog)).void }
    def location_log=(value); end

    sig { returns(T.nilable(::LocationLog)) }
    def reload_location_log; end
  end

  module GeneratedAssociationRelationMethods
    sig { returns(PrivateAssociationRelation) }
    def all; end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def and(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def annotate(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def chronological(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def create_with(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def distinct(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def eager_load(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def except(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def excluding(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def extending(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def extract_associated(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def from(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def group(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def having(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def in_order_of(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def includes(*args, &blk); end

    sig do
      params(
        attributes: Hash,
        returning: T.nilable(T.any(T::Array[Symbol], FalseClass)),
        unique_by: T.nilable(T.any(T::Array[Symbol], Symbol))
      ).returns(ActiveRecord::Result)
    end
    def insert(attributes, returning: nil, unique_by: nil); end

    sig do
      params(
        attributes: Hash,
        returning: T.nilable(T.any(T::Array[Symbol], FalseClass))
      ).returns(ActiveRecord::Result)
    end
    def insert!(attributes, returning: nil); end

    sig do
      params(
        attributes: T::Array[Hash],
        returning: T.nilable(T.any(T::Array[Symbol], FalseClass)),
        unique_by: T.nilable(T.any(T::Array[Symbol], Symbol))
      ).returns(ActiveRecord::Result)
    end
    def insert_all(attributes, returning: nil, unique_by: nil); end

    sig do
      params(
        attributes: T::Array[Hash],
        returning: T.nilable(T.any(T::Array[Symbol], FalseClass))
      ).returns(ActiveRecord::Result)
    end
    def insert_all!(attributes, returning: nil); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def invert_where(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def left_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def left_outer_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def limit(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def lock(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def merge(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def none(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def null_relation?(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def offset(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def only(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def optimizer_hints(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def or(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def preload(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def readonly(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def references(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def regroup(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def reorder(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def reselect(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def reverse_chronological(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def reverse_order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def rewhere(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def select(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def strict_loading(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def structurally_compatible?(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def uniq!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def unscope(*args, &blk); end

    sig do
      params(
        attributes: Hash,
        returning: T.nilable(T.any(T::Array[Symbol], FalseClass)),
        unique_by: T.nilable(T.any(T::Array[Symbol], Symbol))
      ).returns(ActiveRecord::Result)
    end
    def upsert(attributes, returning: nil, unique_by: nil); end

    sig do
      params(
        attributes: T::Array[Hash],
        returning: T.nilable(T.any(T::Array[Symbol], FalseClass)),
        unique_by: T.nilable(T.any(T::Array[Symbol], Symbol))
      ).returns(ActiveRecord::Result)
    end
    def upsert_all(attributes, returning: nil, unique_by: nil); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelationWhereChain) }
    def where(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def with(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def without(*args, &blk); end
  end

  module GeneratedAttributeMethods
    sig { returns(T.untyped) }
    def city; end

    sig { params(value: T.untyped).returns(T.untyped) }
    def city=(value); end

    sig { returns(T::Boolean) }
    def city?; end

    sig { returns(T.untyped) }
    def city_before_last_save; end

    sig { returns(T.untyped) }
    def city_before_type_cast; end

    sig { returns(T::Boolean) }
    def city_came_from_user?; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def city_change; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def city_change_to_be_saved; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def city_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.untyped) }
    def city_in_database; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def city_previous_change; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def city_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.untyped) }
    def city_previously_was; end

    sig { returns(T.untyped) }
    def city_was; end

    sig { void }
    def city_will_change!; end

    sig { returns(::String) }
    def country; end

    sig { params(value: ::String).returns(::String) }
    def country=(value); end

    sig { returns(T::Boolean) }
    def country?; end

    sig { returns(T.nilable(::String)) }
    def country_before_last_save; end

    sig { returns(T.untyped) }
    def country_before_type_cast; end

    sig { returns(T::Boolean) }
    def country_came_from_user?; end

    sig { returns(T.nilable([::String, ::String])) }
    def country_change; end

    sig { returns(T.nilable([::String, ::String])) }
    def country_change_to_be_saved; end

    sig { params(from: ::String, to: ::String).returns(T::Boolean) }
    def country_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(::String) }
    def country_code; end

    sig { params(value: ::String).returns(::String) }
    def country_code=(value); end

    sig { returns(T::Boolean) }
    def country_code?; end

    sig { returns(T.nilable(::String)) }
    def country_code_before_last_save; end

    sig { returns(T.untyped) }
    def country_code_before_type_cast; end

    sig { returns(T::Boolean) }
    def country_code_came_from_user?; end

    sig { returns(T.nilable([::String, ::String])) }
    def country_code_change; end

    sig { returns(T.nilable([::String, ::String])) }
    def country_code_change_to_be_saved; end

    sig { params(from: ::String, to: ::String).returns(T::Boolean) }
    def country_code_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def country_code_in_database; end

    sig { returns(T.nilable([::String, ::String])) }
    def country_code_previous_change; end

    sig { params(from: ::String, to: ::String).returns(T::Boolean) }
    def country_code_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def country_code_previously_was; end

    sig { returns(T.nilable(::String)) }
    def country_code_was; end

    sig { void }
    def country_code_will_change!; end

    sig { returns(T.nilable(::String)) }
    def country_in_database; end

    sig { returns(T.nilable([::String, ::String])) }
    def country_previous_change; end

    sig { params(from: ::String, to: ::String).returns(T::Boolean) }
    def country_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def country_previously_was; end

    sig { returns(T.nilable(::String)) }
    def country_was; end

    sig { void }
    def country_will_change!; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at; end

    sig { params(value: ::ActiveSupport::TimeWithZone).returns(::ActiveSupport::TimeWithZone) }
    def created_at=(value); end

    sig { returns(T::Boolean) }
    def created_at?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_before_last_save; end

    sig { returns(T.untyped) }
    def created_at_before_type_cast; end

    sig { returns(T::Boolean) }
    def created_at_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def created_at_change; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def created_at_change_to_be_saved; end

    sig { params(from: ::ActiveSupport::TimeWithZone, to: ::ActiveSupport::TimeWithZone).returns(T::Boolean) }
    def created_at_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_in_database; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def created_at_previous_change; end

    sig { params(from: ::ActiveSupport::TimeWithZone, to: ::ActiveSupport::TimeWithZone).returns(T::Boolean) }
    def created_at_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_was; end

    sig { void }
    def created_at_will_change!; end

    sig { returns(::String) }
    def full_address; end

    sig { params(value: ::String).returns(::String) }
    def full_address=(value); end

    sig { returns(T::Boolean) }
    def full_address?; end

    sig { returns(T.nilable(::String)) }
    def full_address_before_last_save; end

    sig { returns(T.untyped) }
    def full_address_before_type_cast; end

    sig { returns(T::Boolean) }
    def full_address_came_from_user?; end

    sig { returns(T.nilable([::String, ::String])) }
    def full_address_change; end

    sig { returns(T.nilable([::String, ::String])) }
    def full_address_change_to_be_saved; end

    sig { params(from: ::String, to: ::String).returns(T::Boolean) }
    def full_address_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def full_address_in_database; end

    sig { returns(T.nilable([::String, ::String])) }
    def full_address_previous_change; end

    sig { params(from: ::String, to: ::String).returns(T::Boolean) }
    def full_address_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def full_address_previously_was; end

    sig { returns(T.nilable(::String)) }
    def full_address_was; end

    sig { void }
    def full_address_will_change!; end

    sig { returns(T.nilable(::String)) }
    def id; end

    sig { params(value: ::String).returns(::String) }
    def id=(value); end

    sig { returns(T::Boolean) }
    def id?; end

    sig { returns(T.nilable(::String)) }
    def id_before_last_save; end

    sig { returns(T.untyped) }
    def id_before_type_cast; end

    sig { returns(T::Boolean) }
    def id_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def id_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def id_change_to_be_saved; end

    sig { params(from: ::String, to: ::String).returns(T::Boolean) }
    def id_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def id_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def id_previous_change; end

    sig { params(from: ::String, to: ::String).returns(T::Boolean) }
    def id_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def id_previously_was; end

    sig { returns(T.nilable(::String)) }
    def id_value; end

    sig { params(value: ::String).returns(::String) }
    def id_value=(value); end

    sig { returns(T::Boolean) }
    def id_value?; end

    sig { returns(T.nilable(::String)) }
    def id_value_before_last_save; end

    sig { returns(T.untyped) }
    def id_value_before_type_cast; end

    sig { returns(T::Boolean) }
    def id_value_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def id_value_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def id_value_change_to_be_saved; end

    sig { params(from: ::String, to: ::String).returns(T::Boolean) }
    def id_value_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def id_value_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def id_value_previous_change; end

    sig { params(from: ::String, to: ::String).returns(T::Boolean) }
    def id_value_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def id_value_previously_was; end

    sig { returns(T.nilable(::String)) }
    def id_value_was; end

    sig { void }
    def id_value_will_change!; end

    sig { returns(T.nilable(::String)) }
    def id_was; end

    sig { void }
    def id_will_change!; end

    sig { returns(::String) }
    def location_log_id; end

    sig { params(value: ::String).returns(::String) }
    def location_log_id=(value); end

    sig { returns(T::Boolean) }
    def location_log_id?; end

    sig { returns(T.nilable(::String)) }
    def location_log_id_before_last_save; end

    sig { returns(T.untyped) }
    def location_log_id_before_type_cast; end

    sig { returns(T::Boolean) }
    def location_log_id_came_from_user?; end

    sig { returns(T.nilable([::String, ::String])) }
    def location_log_id_change; end

    sig { returns(T.nilable([::String, ::String])) }
    def location_log_id_change_to_be_saved; end

    sig { params(from: ::String, to: ::String).returns(T::Boolean) }
    def location_log_id_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def location_log_id_in_database; end

    sig { returns(T.nilable([::String, ::String])) }
    def location_log_id_previous_change; end

    sig { params(from: ::String, to: ::String).returns(T::Boolean) }
    def location_log_id_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def location_log_id_previously_was; end

    sig { returns(T.nilable(::String)) }
    def location_log_id_was; end

    sig { void }
    def location_log_id_will_change!; end

    sig { returns(T.untyped) }
    def neighbourhood; end

    sig { params(value: T.untyped).returns(T.untyped) }
    def neighbourhood=(value); end

    sig { returns(T::Boolean) }
    def neighbourhood?; end

    sig { returns(T.untyped) }
    def neighbourhood_before_last_save; end

    sig { returns(T.untyped) }
    def neighbourhood_before_type_cast; end

    sig { returns(T::Boolean) }
    def neighbourhood_came_from_user?; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def neighbourhood_change; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def neighbourhood_change_to_be_saved; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def neighbourhood_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.untyped) }
    def neighbourhood_in_database; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def neighbourhood_previous_change; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def neighbourhood_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.untyped) }
    def neighbourhood_previously_was; end

    sig { returns(T.untyped) }
    def neighbourhood_was; end

    sig { void }
    def neighbourhood_will_change!; end

    sig { returns(T.untyped) }
    def place_name; end

    sig { params(value: T.untyped).returns(T.untyped) }
    def place_name=(value); end

    sig { returns(T::Boolean) }
    def place_name?; end

    sig { returns(T.untyped) }
    def place_name_before_last_save; end

    sig { returns(T.untyped) }
    def place_name_before_type_cast; end

    sig { returns(T::Boolean) }
    def place_name_came_from_user?; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def place_name_change; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def place_name_change_to_be_saved; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def place_name_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.untyped) }
    def place_name_in_database; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def place_name_previous_change; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def place_name_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.untyped) }
    def place_name_previously_was; end

    sig { returns(T.untyped) }
    def place_name_was; end

    sig { void }
    def place_name_will_change!; end

    sig { returns(T.untyped) }
    def postal_code; end

    sig { params(value: T.untyped).returns(T.untyped) }
    def postal_code=(value); end

    sig { returns(T::Boolean) }
    def postal_code?; end

    sig { returns(T.untyped) }
    def postal_code_before_last_save; end

    sig { returns(T.untyped) }
    def postal_code_before_type_cast; end

    sig { returns(T::Boolean) }
    def postal_code_came_from_user?; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def postal_code_change; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def postal_code_change_to_be_saved; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def postal_code_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.untyped) }
    def postal_code_in_database; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def postal_code_previous_change; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def postal_code_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.untyped) }
    def postal_code_previously_was; end

    sig { returns(T.untyped) }
    def postal_code_was; end

    sig { void }
    def postal_code_will_change!; end

    sig { returns(::String) }
    def province; end

    sig { params(value: ::String).returns(::String) }
    def province=(value); end

    sig { returns(T::Boolean) }
    def province?; end

    sig { returns(T.nilable(::String)) }
    def province_before_last_save; end

    sig { returns(T.untyped) }
    def province_before_type_cast; end

    sig { returns(T::Boolean) }
    def province_came_from_user?; end

    sig { returns(T.nilable([::String, ::String])) }
    def province_change; end

    sig { returns(T.nilable([::String, ::String])) }
    def province_change_to_be_saved; end

    sig { params(from: ::String, to: ::String).returns(T::Boolean) }
    def province_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def province_in_database; end

    sig { returns(T.nilable([::String, ::String])) }
    def province_previous_change; end

    sig { params(from: ::String, to: ::String).returns(T::Boolean) }
    def province_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def province_previously_was; end

    sig { returns(T.nilable(::String)) }
    def province_was; end

    sig { void }
    def province_will_change!; end

    sig { void }
    def restore_city!; end

    sig { void }
    def restore_country!; end

    sig { void }
    def restore_country_code!; end

    sig { void }
    def restore_created_at!; end

    sig { void }
    def restore_full_address!; end

    sig { void }
    def restore_id!; end

    sig { void }
    def restore_id_value!; end

    sig { void }
    def restore_location_log_id!; end

    sig { void }
    def restore_neighbourhood!; end

    sig { void }
    def restore_place_name!; end

    sig { void }
    def restore_postal_code!; end

    sig { void }
    def restore_province!; end

    sig { void }
    def restore_street_address!; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def saved_change_to_city; end

    sig { returns(T::Boolean) }
    def saved_change_to_city?; end

    sig { returns(T.nilable([::String, ::String])) }
    def saved_change_to_country; end

    sig { returns(T::Boolean) }
    def saved_change_to_country?; end

    sig { returns(T.nilable([::String, ::String])) }
    def saved_change_to_country_code; end

    sig { returns(T::Boolean) }
    def saved_change_to_country_code?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def saved_change_to_created_at; end

    sig { returns(T::Boolean) }
    def saved_change_to_created_at?; end

    sig { returns(T.nilable([::String, ::String])) }
    def saved_change_to_full_address; end

    sig { returns(T::Boolean) }
    def saved_change_to_full_address?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_id?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_id_value; end

    sig { returns(T::Boolean) }
    def saved_change_to_id_value?; end

    sig { returns(T.nilable([::String, ::String])) }
    def saved_change_to_location_log_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_location_log_id?; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def saved_change_to_neighbourhood; end

    sig { returns(T::Boolean) }
    def saved_change_to_neighbourhood?; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def saved_change_to_place_name; end

    sig { returns(T::Boolean) }
    def saved_change_to_place_name?; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def saved_change_to_postal_code; end

    sig { returns(T::Boolean) }
    def saved_change_to_postal_code?; end

    sig { returns(T.nilable([::String, ::String])) }
    def saved_change_to_province; end

    sig { returns(T::Boolean) }
    def saved_change_to_province?; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def saved_change_to_street_address; end

    sig { returns(T::Boolean) }
    def saved_change_to_street_address?; end

    sig { returns(T.untyped) }
    def street_address; end

    sig { params(value: T.untyped).returns(T.untyped) }
    def street_address=(value); end

    sig { returns(T::Boolean) }
    def street_address?; end

    sig { returns(T.untyped) }
    def street_address_before_last_save; end

    sig { returns(T.untyped) }
    def street_address_before_type_cast; end

    sig { returns(T::Boolean) }
    def street_address_came_from_user?; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def street_address_change; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def street_address_change_to_be_saved; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def street_address_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.untyped) }
    def street_address_in_database; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def street_address_previous_change; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def street_address_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.untyped) }
    def street_address_previously_was; end

    sig { returns(T.untyped) }
    def street_address_was; end

    sig { void }
    def street_address_will_change!; end

    sig { returns(T::Boolean) }
    def will_save_change_to_city?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_country?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_country_code?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_created_at?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_full_address?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_id_value?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_location_log_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_neighbourhood?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_place_name?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_postal_code?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_province?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_street_address?; end
  end

  module GeneratedRelationMethods
    sig { returns(PrivateRelation) }
    def all; end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def and(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def annotate(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def chronological(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def create_with(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def distinct(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def eager_load(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def except(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def excluding(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def extending(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def extract_associated(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def from(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def group(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def having(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def in_order_of(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def includes(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def invert_where(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def left_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def left_outer_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def limit(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def lock(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def merge(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def none(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def null_relation?(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def offset(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def only(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def optimizer_hints(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def or(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def preload(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def readonly(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def references(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def regroup(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def reorder(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def reselect(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def reverse_chronological(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def reverse_order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def rewhere(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def select(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def strict_loading(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def structurally_compatible?(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def uniq!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def unscope(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelationWhereChain) }
    def where(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def with(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def without(*args, &blk); end
  end

  class PrivateAssociationRelation < ::ActiveRecord::AssociationRelation
    include CommonRelationMethods
    include GeneratedAssociationRelationMethods

    Elem = type_member { { fixed: ::LocationLogAddress } }

    sig { returns(T::Array[::LocationLogAddress]) }
    def to_a; end

    sig { returns(T::Array[::LocationLogAddress]) }
    def to_ary; end
  end

  class PrivateAssociationRelationWhereChain < PrivateAssociationRelation
    Elem = type_member { { fixed: ::LocationLogAddress } }

    sig { params(args: T.untyped).returns(PrivateAssociationRelation) }
    def associated(*args); end

    sig { params(args: T.untyped).returns(PrivateAssociationRelation) }
    def missing(*args); end

    sig { params(opts: T.untyped, rest: T.untyped).returns(PrivateAssociationRelation) }
    def not(opts, *rest); end
  end

  class PrivateCollectionProxy < ::ActiveRecord::Associations::CollectionProxy
    include CommonRelationMethods
    include GeneratedAssociationRelationMethods

    Elem = type_member { { fixed: ::LocationLogAddress } }

    sig do
      params(
        records: T.any(::LocationLogAddress, T::Enumerable[T.any(::LocationLogAddress, T::Enumerable[::LocationLogAddress])])
      ).returns(PrivateCollectionProxy)
    end
    def <<(*records); end

    sig do
      params(
        records: T.any(::LocationLogAddress, T::Enumerable[T.any(::LocationLogAddress, T::Enumerable[::LocationLogAddress])])
      ).returns(PrivateCollectionProxy)
    end
    def append(*records); end

    sig { returns(PrivateCollectionProxy) }
    def clear; end

    sig do
      params(
        records: T.any(::LocationLogAddress, T::Enumerable[T.any(::LocationLogAddress, T::Enumerable[::LocationLogAddress])])
      ).returns(PrivateCollectionProxy)
    end
    def concat(*records); end

    sig do
      params(
        records: T.any(::LocationLogAddress, Integer, String, T::Enumerable[T.any(::LocationLogAddress, Integer, String, T::Enumerable[::LocationLogAddress])])
      ).returns(T::Array[::LocationLogAddress])
    end
    def delete(*records); end

    sig do
      params(
        records: T.any(::LocationLogAddress, Integer, String, T::Enumerable[T.any(::LocationLogAddress, Integer, String, T::Enumerable[::LocationLogAddress])])
      ).returns(T::Array[::LocationLogAddress])
    end
    def destroy(*records); end

    sig { returns(T::Array[::LocationLogAddress]) }
    def load_target; end

    sig do
      params(
        records: T.any(::LocationLogAddress, T::Enumerable[T.any(::LocationLogAddress, T::Enumerable[::LocationLogAddress])])
      ).returns(PrivateCollectionProxy)
    end
    def prepend(*records); end

    sig do
      params(
        records: T.any(::LocationLogAddress, T::Enumerable[T.any(::LocationLogAddress, T::Enumerable[::LocationLogAddress])])
      ).returns(PrivateCollectionProxy)
    end
    def push(*records); end

    sig do
      params(
        other_array: T.any(::LocationLogAddress, T::Enumerable[T.any(::LocationLogAddress, T::Enumerable[::LocationLogAddress])])
      ).returns(T::Array[::LocationLogAddress])
    end
    def replace(other_array); end

    sig { returns(PrivateAssociationRelation) }
    def scope; end

    sig { returns(T::Array[::LocationLogAddress]) }
    def target; end

    sig { returns(T::Array[::LocationLogAddress]) }
    def to_a; end

    sig { returns(T::Array[::LocationLogAddress]) }
    def to_ary; end
  end

  class PrivateRelation < ::ActiveRecord::Relation
    include CommonRelationMethods
    include GeneratedRelationMethods

    Elem = type_member { { fixed: ::LocationLogAddress } }

    sig { returns(T::Array[::LocationLogAddress]) }
    def to_a; end

    sig { returns(T::Array[::LocationLogAddress]) }
    def to_ary; end
  end

  class PrivateRelationWhereChain < PrivateRelation
    Elem = type_member { { fixed: ::LocationLogAddress } }

    sig { params(args: T.untyped).returns(PrivateRelation) }
    def associated(*args); end

    sig { params(args: T.untyped).returns(PrivateRelation) }
    def missing(*args); end

    sig { params(opts: T.untyped, rest: T.untyped).returns(PrivateRelation) }
    def not(opts, *rest); end
  end
end
