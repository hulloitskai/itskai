# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `inertia_rails` gem.
# Please instead update this file by running `bin/tapioca gem inertia_rails`.


class ActionDispatch::DebugExceptions
  include ::InertiaDebugExceptions
end

# source://inertia_rails//lib/patches/debug_exceptions/patch-5-1.rb#10
module InertiaDebugExceptions
  # source://inertia_rails//lib/patches/debug_exceptions/patch-5-1.rb#11
  def render_for_browser_request(request, wrapper); end
end

# source://inertia_rails//lib/inertia_rails/lazy.rb#1
module InertiaRails
  # source://activesupport/7.1.3.4/lib/active_support/core_ext/module/attribute_accessors_per_thread.rb#74
  def threadsafe_page; end

  # source://activesupport/7.1.3.4/lib/active_support/core_ext/module/attribute_accessors_per_thread.rb#116
  def threadsafe_page=(obj); end

  class << self
    # @yield [Configuration]
    #
    # source://inertia_rails//lib/inertia_rails/inertia_rails.rb#6
    def configure; end

    # @return [Boolean]
    #
    # source://inertia_rails//lib/inertia_rails/inertia_rails.rb#30
    def deep_merge_shared_data?; end

    # @return [Boolean]
    #
    # source://inertia_rails//lib/inertia_rails/inertia_rails.rb#26
    def default_render?; end

    # source://inertia_rails//lib/inertia_rails/inertia_rails.rb#14
    def layout; end

    # source://inertia_rails//lib/inertia_rails/inertia_rails.rb#34
    def lazy(value = T.unsafe(nil), &block); end

    sig { returns(T.nilable(T::Hash[::Symbol, T.untyped])) }
    def page; end

    sig { params(page: T.nilable(T::Hash[::Symbol, T.untyped])).returns(T.nilable(T::Hash[::Symbol, T.untyped])) }
    def page=(page); end

    # @return [Boolean]
    #
    # source://inertia_rails//lib/inertia_rails/inertia_rails.rb#18
    def ssr_enabled?; end

    # source://inertia_rails//lib/inertia_rails/inertia_rails.rb#22
    def ssr_url; end

    # source://activesupport/7.1.3.4/lib/active_support/core_ext/module/attribute_accessors_per_thread.rb#49
    def threadsafe_page; end

    # source://activesupport/7.1.3.4/lib/active_support/core_ext/module/attribute_accessors_per_thread.rb#108
    def threadsafe_page=(obj); end

    # source://inertia_rails//lib/inertia_rails/inertia_rails.rb#10
    def version; end
  end
end

# source://inertia_rails//lib/inertia_rails/inertia_rails.rb#40
module InertiaRails::Configuration
  # source://inertia_rails//lib/inertia_rails/inertia_rails.rb#46
  def deep_merge_shared_data; end

  # source://inertia_rails//lib/inertia_rails/inertia_rails.rb#46
  def deep_merge_shared_data=(val); end

  # source://inertia_rails//lib/inertia_rails/inertia_rails.rb#45
  def default_render; end

  # source://inertia_rails//lib/inertia_rails/inertia_rails.rb#45
  def default_render=(val); end

  # source://inertia_rails//lib/inertia_rails/inertia_rails.rb#41
  def layout; end

  # source://inertia_rails//lib/inertia_rails/inertia_rails.rb#41
  def layout=(val); end

  # source://inertia_rails//lib/inertia_rails/inertia_rails.rb#43
  def ssr_enabled; end

  # source://inertia_rails//lib/inertia_rails/inertia_rails.rb#43
  def ssr_enabled=(val); end

  # source://inertia_rails//lib/inertia_rails/inertia_rails.rb#44
  def ssr_url; end

  # source://inertia_rails//lib/inertia_rails/inertia_rails.rb#44
  def ssr_url=(val); end

  # source://inertia_rails//lib/inertia_rails/inertia_rails.rb#42
  def version; end

  # source://inertia_rails//lib/inertia_rails/inertia_rails.rb#42
  def version=(val); end

  class << self
    # source://inertia_rails//lib/inertia_rails/inertia_rails.rb#46
    def deep_merge_shared_data; end

    # source://inertia_rails//lib/inertia_rails/inertia_rails.rb#46
    def deep_merge_shared_data=(val); end

    # source://inertia_rails//lib/inertia_rails/inertia_rails.rb#45
    def default_render; end

    # source://inertia_rails//lib/inertia_rails/inertia_rails.rb#45
    def default_render=(val); end

    # source://inertia_rails//lib/inertia_rails/inertia_rails.rb#48
    def evaluated_version; end

    # source://inertia_rails//lib/inertia_rails/inertia_rails.rb#41
    def layout; end

    # source://inertia_rails//lib/inertia_rails/inertia_rails.rb#41
    def layout=(val); end

    # source://inertia_rails//lib/inertia_rails/inertia_rails.rb#43
    def ssr_enabled; end

    # source://inertia_rails//lib/inertia_rails/inertia_rails.rb#43
    def ssr_enabled=(val); end

    # source://inertia_rails//lib/inertia_rails/inertia_rails.rb#44
    def ssr_url; end

    # source://inertia_rails//lib/inertia_rails/inertia_rails.rb#44
    def ssr_url=(val); end

    # source://inertia_rails//lib/inertia_rails/inertia_rails.rb#42
    def version; end

    # source://inertia_rails//lib/inertia_rails/inertia_rails.rb#42
    def version=(val); end
  end
end

# source://inertia_rails//lib/inertia_rails/controller.rb#4
module InertiaRails::Controller
  extend ::ActiveSupport::Concern

  requires_ancestor { ActionController::Base }

  mixes_in_class_methods ::InertiaRails::Controller::ClassMethods

  # source://inertia_rails//lib/inertia_rails/controller.rb#54
  def default_render; end

  # source://inertia_rails//lib/inertia_rails/controller.rb#46
  def inertia_headers; end

  # source://inertia_rails//lib/inertia_rails/controller.rb#50
  def inertia_headers=(value); end

  # source://inertia_rails//lib/inertia_rails/controller.rb#80
  def inertia_view_assigns; end

  # source://inertia_rails//lib/inertia_rails/controller.rb#71
  def redirect_back(fallback_location:, allow_other_host: T.unsafe(nil), **options); end

  # source://inertia_rails//lib/inertia_rails/controller.rb#66
  def redirect_to(options = T.unsafe(nil), response_options = T.unsafe(nil)); end

  # source://inertia_rails//lib/inertia_rails/controller.rb#62
  def shared_data; end

  private

  # source://inertia_rails//lib/inertia_rails/controller.rb#100
  def capture_inertia_errors(options); end

  # source://inertia_rails//lib/inertia_rails/controller.rb#106
  def evaluated_blocks; end

  # source://inertia_rails//lib/inertia_rails/controller.rb#87
  def inertia_layout; end

  # source://inertia_rails//lib/inertia_rails/controller.rb#95
  def inertia_location(url); end

  sig { void }
  def prepare_instance_variables; end
end

# source://inertia_rails//lib/inertia_rails/controller.rb#30
module InertiaRails::Controller::ClassMethods
  # source://inertia_rails//lib/inertia_rails/controller.rb#31
  def inertia_share(hash = T.unsafe(nil), &block); end

  # source://inertia_rails//lib/inertia_rails/controller.rb#38
  def use_inertia_instance_props; end
end

# source://inertia_rails//lib/inertia_rails/engine.rb#5
class InertiaRails::Engine < ::Rails::Engine
  class << self
    # source://activesupport/7.1.3.4/lib/active_support/callbacks.rb#70
    def __callbacks; end
  end
end

# source://inertia_rails//lib/inertia_rails.rb#23
class InertiaRails::Error < ::StandardError; end

# source://inertia_rails//lib/inertia_rails/lazy.rb#2
class InertiaRails::Lazy
  # @return [Lazy] a new instance of Lazy
  #
  # source://inertia_rails//lib/inertia_rails/lazy.rb#3
  def initialize(value = T.unsafe(nil), &block); end

  # source://inertia_rails//lib/inertia_rails/lazy.rb#8
  def call; end

  # source://inertia_rails//lib/inertia_rails/lazy.rb#12
  def to_proc; end
end

# source://inertia_rails//lib/inertia_rails/middleware.rb#2
class InertiaRails::Middleware
  # @return [Middleware] a new instance of Middleware
  #
  # source://inertia_rails//lib/inertia_rails/middleware.rb#3
  def initialize(app); end

  # source://inertia_rails//lib/inertia_rails/middleware.rb#7
  def call(env); end
end

# source://inertia_rails//lib/inertia_rails/middleware.rb#12
class InertiaRails::Middleware::InertiaRailsRequest
  # @return [InertiaRailsRequest] a new instance of InertiaRailsRequest
  def initialize(*_arg0, **_arg1, &_arg2); end

  # source://inertia_rails//lib/inertia_rails/middleware.rb#18
  def response; end

  private

  # source://inertia_rails//lib/inertia_rails/middleware.rb#92
  def copy_xsrf_to_csrf!; end

  # source://inertia_rails//lib/inertia_rails/middleware.rb#87
  def force_refresh(request); end

  # @return [Boolean]
  #
  # source://inertia_rails//lib/inertia_rails/middleware.rb#57
  def get?; end

  # @return [Boolean]
  #
  # source://inertia_rails//lib/inertia_rails/middleware.rb#49
  def inertia_non_post_redirect?(status); end

  # @return [Boolean]
  #
  # source://inertia_rails//lib/inertia_rails/middleware.rb#69
  def inertia_request?; end

  # source://inertia_rails//lib/inertia_rails/middleware.rb#65
  def inertia_version; end

  # @return [Boolean]
  #
  # source://inertia_rails//lib/inertia_rails/middleware.rb#33
  def keep_inertia_errors?(status); end

  # @return [Boolean]
  #
  # source://inertia_rails//lib/inertia_rails/middleware.rb#45
  def non_get_redirectable_method?; end

  # @return [Boolean]
  #
  # source://inertia_rails//lib/inertia_rails/middleware.rb#41
  def redirect_status?(status); end

  # source://inertia_rails//lib/inertia_rails/middleware.rb#61
  def request_method; end

  # source://inertia_rails//lib/inertia_rails/middleware.rb#83
  def saved_version; end

  # source://inertia_rails//lib/inertia_rails/middleware.rb#77
  def sent_version; end

  # @return [Boolean]
  #
  # source://inertia_rails//lib/inertia_rails/middleware.rb#53
  def stale_inertia_get?; end

  # @return [Boolean]
  #
  # source://inertia_rails//lib/inertia_rails/middleware.rb#37
  def stale_inertia_request?; end

  sig { returns(T::Boolean) }
  def version_stale?; end
end

# source://inertia_rails//lib/inertia_rails/renderer.rb#4
class InertiaRails::Renderer
  # @return [Renderer] a new instance of Renderer
  def initialize(*_arg0, **_arg1, &_arg2); end

  # Returns the value of attribute component.
  #
  # source://inertia_rails//lib/inertia_rails/renderer.rb#5
  def component; end

  # source://inertia_rails//lib/inertia_rails/renderer.rb#18
  def render; end

  # Returns the value of attribute view_data.
  #
  # source://inertia_rails//lib/inertia_rails/renderer.rb#5
  def view_data; end

  private

  # source://inertia_rails//lib/inertia_rails/renderer.rb#43
  def computed_props; end

  # source://inertia_rails//lib/inertia_rails/renderer.rb#74
  def deep_transform_values(hash, proc); end

  # source://inertia_rails//lib/inertia_rails/renderer.rb#39
  def layout; end

  # source://inertia_rails//lib/inertia_rails/renderer.rb#65
  def page; end

  # source://inertia_rails//lib/inertia_rails/renderer.rb#80
  def partial_keys; end

  # source://inertia_rails//lib/inertia_rails/renderer.rb#88
  def prop_merge_method; end

  # source://inertia_rails//lib/inertia_rails/renderer.rb#31
  def render_ssr; end

  # @return [Boolean]
  #
  # source://inertia_rails//lib/inertia_rails/renderer.rb#84
  def rendering_partial_component?; end
end

class InertiaRails::StaticController < ::ApplicationController
  def static; end

  private

  # source://actionview/7.1.3.4/lib/action_view/layouts.rb#330
  def _layout(lookup_context, formats); end

  class << self
    # source://actionpack/7.1.3.4/lib/action_controller/metal/params_wrapper.rb#187
    def _wrapper_options; end

    # source://actionpack/7.1.3.4/lib/action_controller/metal/helpers.rb#65
    def helpers_path; end

    # source://actionpack/7.1.3.4/lib/action_controller/metal.rb#262
    def middleware_stack; end
  end
end
