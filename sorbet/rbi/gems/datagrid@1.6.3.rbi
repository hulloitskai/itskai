# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `datagrid` gem.
# Please instead update this file by running `bin/tapioca gem datagrid`.

class ActionView::Helpers::FormBuilder
  include ::Datagrid::FormBuilder
end

# source://datagrid//lib/datagrid/configuration.rb#1
module Datagrid
  extend ::ActiveSupport::Autoload
  include GeneratedInstanceMethods
  include ::ActiveModel::AttributeAssignment
  include ::Datagrid::Core::InstanceMethods
  include ::Datagrid::Core
  include ::Datagrid::ActiveModel::InstanceMethods
  include ::Datagrid::ActiveModel
  include ::Datagrid::Filters::CompositeFilters::InstanceMethods
  include ::Datagrid::Filters::CompositeFilters
  include ::Datagrid::Filters::InstanceMethods
  include ::Datagrid::Filters
  include ::Datagrid::Columns::InstanceMethods
  include ::Datagrid::Columns
  include ::Datagrid::ColumnNamesAttribute
  include ::Datagrid::Ordering::InstanceMethods
  include ::Datagrid::Ordering

  mixes_in_class_methods GeneratedClassMethods
  mixes_in_class_methods ::Datagrid::Core::ClassMethods
  mixes_in_class_methods ::Datagrid::ActiveModel::ClassMethods
  mixes_in_class_methods ::ActiveModel::Naming
  mixes_in_class_methods ::Datagrid::Filters::ClassMethods
  mixes_in_class_methods ::Datagrid::Filters::CompositeFilters::ClassMethods
  mixes_in_class_methods ::Datagrid::Columns::ClassMethods
  mixes_in_class_methods ::Datagrid::ColumnNamesAttribute::ClassMethods
  mixes_in_class_methods ::Datagrid::Ordering::ClassMethods

  class << self
    # source://datagrid//lib/datagrid/configuration.rb#3
    def configuration; end

    # @yield [configuration]
    #
    # source://datagrid//lib/datagrid/configuration.rb#7
    def configure; end

    # @private
    #
    # source://datagrid//lib/datagrid.rb#26
    def included(base); end
  end

  module GeneratedClassMethods
    def batch_size; end
    def batch_size; end
    def batch_size=(value); end
    def batch_size=(value); end
    def batch_size?; end
    def batch_size?; end
    def cached; end
    def cached; end
    def cached=(value); end
    def cached=(value); end
    def cached?; end
    def cached?; end
    def columns_array; end
    def columns_array; end
    def columns_array=(value); end
    def columns_array=(value); end
    def columns_array?; end
    def columns_array?; end
    def datagrid_attributes; end
    def datagrid_attributes; end
    def datagrid_attributes; end
    def datagrid_attributes; end
    def datagrid_attributes=(value); end
    def datagrid_attributes=(value); end
    def datagrid_attributes=(value); end
    def datagrid_attributes=(value); end
    def datagrid_attributes?; end
    def datagrid_attributes?; end
    def datagrid_attributes?; end
    def datagrid_attributes?; end
    def decorator; end
    def decorator; end
    def decorator=(value); end
    def decorator=(value); end
    def decorator?; end
    def decorator?; end
    def default_column_options; end
    def default_column_options; end
    def default_column_options=(value); end
    def default_column_options=(value); end
    def default_column_options?; end
    def default_column_options?; end
    def dynamic_block; end
    def dynamic_block; end
    def dynamic_block; end
    def dynamic_block; end
    def dynamic_block=(value); end
    def dynamic_block=(value); end
    def dynamic_block=(value); end
    def dynamic_block=(value); end
    def dynamic_block?; end
    def dynamic_block?; end
    def dynamic_block?; end
    def dynamic_block?; end
    def filters_array; end
    def filters_array=(value); end
    def filters_array?; end
    def forbidden_attributes_protection; end
    def forbidden_attributes_protection; end
    def forbidden_attributes_protection; end
    def forbidden_attributes_protection; end
    def forbidden_attributes_protection=(value); end
    def forbidden_attributes_protection=(value); end
    def forbidden_attributes_protection=(value); end
    def forbidden_attributes_protection=(value); end
    def forbidden_attributes_protection?; end
    def forbidden_attributes_protection?; end
    def forbidden_attributes_protection?; end
    def forbidden_attributes_protection?; end
    def scope_value; end
    def scope_value; end
    def scope_value; end
    def scope_value; end
    def scope_value=(value); end
    def scope_value=(value); end
    def scope_value=(value); end
    def scope_value=(value); end
    def scope_value?; end
    def scope_value?; end
    def scope_value?; end
    def scope_value?; end
  end

  module GeneratedInstanceMethods
    def batch_size; end
    def batch_size; end
    def batch_size=(value); end
    def batch_size=(value); end
    def batch_size?; end
    def batch_size?; end
    def cached; end
    def cached; end
    def cached=(value); end
    def cached=(value); end
    def cached?; end
    def cached?; end
    def columns_array; end
    def columns_array; end
    def columns_array=(value); end
    def columns_array=(value); end
    def columns_array?; end
    def columns_array?; end
    def datagrid_attributes; end
    def datagrid_attributes; end
    def datagrid_attributes; end
    def datagrid_attributes; end
    def datagrid_attributes?; end
    def datagrid_attributes?; end
    def datagrid_attributes?; end
    def datagrid_attributes?; end
    def decorator; end
    def decorator; end
    def decorator?; end
    def decorator?; end
    def default_column_options; end
    def default_column_options; end
    def default_column_options?; end
    def default_column_options?; end
    def dynamic_block; end
    def dynamic_block; end
    def dynamic_block; end
    def dynamic_block; end
    def dynamic_block?; end
    def dynamic_block?; end
    def dynamic_block?; end
    def dynamic_block?; end
    def filters_array; end
    def filters_array=(value); end
    def filters_array?; end
    def forbidden_attributes_protection; end
    def forbidden_attributes_protection; end
    def forbidden_attributes_protection; end
    def forbidden_attributes_protection; end
    def forbidden_attributes_protection?; end
    def forbidden_attributes_protection?; end
    def forbidden_attributes_protection?; end
    def forbidden_attributes_protection?; end
    def scope_value; end
    def scope_value; end
    def scope_value; end
    def scope_value; end
    def scope_value=(value); end
    def scope_value=(value); end
    def scope_value=(value); end
    def scope_value=(value); end
    def scope_value?; end
    def scope_value?; end
    def scope_value?; end
    def scope_value?; end
  end
end

# Required to be ActiveModel compatible
#
# @private
#
# source://datagrid//lib/datagrid/active_model.rb#6
module Datagrid::ActiveModel
  include ::Datagrid::ActiveModel::InstanceMethods

  mixes_in_class_methods ::Datagrid::ActiveModel::ClassMethods
  mixes_in_class_methods ::ActiveModel::Naming

  class << self
    # source://datagrid//lib/datagrid/active_model.rb#8
    def included(base); end
  end
end

# self.included
#
# source://datagrid//lib/datagrid/active_model.rb#26
module Datagrid::ActiveModel::ClassMethods
  # source://datagrid//lib/datagrid/active_model.rb#27
  def param_name; end
end

# ClassMethods
#
# source://datagrid//lib/datagrid/active_model.rb#32
module Datagrid::ActiveModel::InstanceMethods
  # source://datagrid//lib/datagrid/active_model.rb#37
  def param_key; end

  # source://datagrid//lib/datagrid/active_model.rb#33
  def param_name; end

  # @return [Boolean]
  #
  # source://datagrid//lib/datagrid/active_model.rb#45
  def persisted?; end

  # source://datagrid//lib/datagrid/active_model.rb#41
  def to_key; end

  # source://datagrid//lib/datagrid/active_model.rb#49
  def to_model; end

  # source://datagrid//lib/datagrid/active_model.rb#53
  def to_param; end
end

# source://datagrid//lib/datagrid.rb#40
class Datagrid::ArgumentError < ::ArgumentError; end

# source://datagrid//lib/datagrid/column_names_attribute.rb#2
module Datagrid::ColumnNamesAttribute
  extend ::ActiveSupport::Concern

  mixes_in_class_methods ::Datagrid::ColumnNamesAttribute::ClassMethods

  # source://datagrid//lib/datagrid/column_names_attribute.rb#40
  def columns(*args, **options); end

  # Returns a list of enabled columns with <tt>:mandatory => true</tt> option
  # If no mandatory columns specified than all of them considered mandatory
  #
  # source://datagrid//lib/datagrid/column_names_attribute.rb#46
  def mandatory_columns; end

  # Returns a list of enabled columns without <tt>:mandatory => true</tt> option
  #
  # source://datagrid//lib/datagrid/column_names_attribute.rb#51
  def optional_columns; end

  protected

  # source://datagrid//lib/datagrid/column_names_attribute.rb#81
  def columns_enabled_by_default; end

  # @return [Boolean]
  #
  # source://datagrid//lib/datagrid/column_names_attribute.rb#75
  def columns_visibility_enabled?; end

  # source://datagrid//lib/datagrid/column_names_attribute.rb#57
  def optional_columns_select; end

  # source://datagrid//lib/datagrid/column_names_attribute.rb#61
  def selected_column_names(*args); end
end

# source://datagrid//lib/datagrid/column_names_attribute.rb#16
module Datagrid::ColumnNamesAttribute::ClassMethods
  # Adds a filter that acts like a column selection
  # All defined columns will be available to select/deselect
  # as a multi-select enum filter.
  # Columns with <tt>:mandatory => true</tt> option
  # will always present in the grid table and won't be listed
  # in column names selection
  # Accepts same options as <tt>:enum</tt> filter
  #
  # Examples:
  #
  #   column_names_filter(header: "Choose columns")
  #
  # source://datagrid//lib/datagrid/column_names_attribute.rb#29
  def column_names_filter(**options); end
end

# source://datagrid//lib/datagrid.rb#41
class Datagrid::ColumnUnavailableError < ::StandardError; end

# source://datagrid//lib/datagrid/columns.rb#6
module Datagrid::Columns
  include GeneratedInstanceMethods
  include ::ActiveModel::AttributeAssignment
  include ::Datagrid::Core::InstanceMethods
  include ::Datagrid::Core
  include ::Datagrid::Columns::InstanceMethods

  mixes_in_class_methods GeneratedClassMethods
  mixes_in_class_methods ::Datagrid::Columns::ClassMethods
  mixes_in_class_methods ::Datagrid::Core::ClassMethods

  class << self
    # @private
    #
    # source://datagrid//lib/datagrid/columns.rb#9
    def included(base); end
  end

  module GeneratedClassMethods
    def batch_size; end
    def batch_size=(value); end
    def batch_size?; end
    def cached; end
    def cached=(value); end
    def cached?; end
    def columns_array; end
    def columns_array=(value); end
    def columns_array?; end
    def datagrid_attributes; end
    def datagrid_attributes=(value); end
    def datagrid_attributes?; end
    def decorator; end
    def decorator=(value); end
    def decorator?; end
    def default_column_options; end
    def default_column_options=(value); end
    def default_column_options?; end
    def dynamic_block; end
    def dynamic_block=(value); end
    def dynamic_block?; end
    def forbidden_attributes_protection; end
    def forbidden_attributes_protection=(value); end
    def forbidden_attributes_protection?; end
    def scope_value; end
    def scope_value=(value); end
    def scope_value?; end
  end

  module GeneratedInstanceMethods
    def batch_size; end
    def batch_size=(value); end
    def batch_size?; end
    def cached; end
    def cached=(value); end
    def cached?; end
    def columns_array; end
    def columns_array=(value); end
    def columns_array?; end
    def datagrid_attributes; end
    def datagrid_attributes?; end
    def decorator; end
    def decorator?; end
    def default_column_options; end
    def default_column_options?; end
    def dynamic_block; end
    def dynamic_block?; end
    def forbidden_attributes_protection; end
    def forbidden_attributes_protection?; end
    def scope_value; end
    def scope_value=(value); end
    def scope_value?; end
  end
end

# self.included
#
# source://datagrid//lib/datagrid/columns.rb#34
module Datagrid::Columns::ClassMethods
  # Defines new datagrid column
  #
  # Arguments:
  #
  # * <tt>name</tt> - column name
  # * <tt>query</tt> - a string representing the query to select this column (supports only ActiveRecord)
  # * <tt>options</tt> - hash of options
  # * <tt>block</tt> - proc to calculate a column value
  #
  # Available options:
  #
  # * <tt>:html</tt> - determines if current column should be present in html table and how is it formatted
  # * <tt>:order</tt> - determines if this column could be sortable and how.
  #   The value of order is explicitly passed to ORM ordering method.
  #   Ex: <tt>"created_at, id"</tt> for ActiveRecord, <tt>[:created_at, :id]</tt> for Mongoid
  # * <tt>:order_desc</tt> - determines a descending order for given column
  #   (only in case when <tt>:order</tt> can not be easily reversed by ORM)
  # * <tt>:order_by_value</tt> - used in case it is easier to perform ordering at ruby level not on database level.
  #   Warning: using ruby to order large datasets is very unrecommended.
  #   If set to true - datagrid will use column value to order by this column
  #   If block is given - datagrid will use value returned from block
  # * <tt>:mandatory</tt> - if true, column will never be hidden with #column_names selection
  # * <tt>:url</tt> - a proc with one argument, pass this option to easily convert the value into an URL
  # * <tt>:before</tt> - determines the position of this column, by adding it before the column passed here
  # * <tt>:after</tt> - determines the position of this column, by adding it after the column passed here
  # * <tt>:if</tt> - the column is shown if the reult of calling this argument is true
  # * <tt>:unless</tt> - the column is shown unless the reult of calling this argument is true
  # * <tt>:preload</tt> - spefies which associations of the scope should be preloaded for this column
  #
  # See: https://github.com/bogdan/datagrid/wiki/Columns for examples
  #
  # source://datagrid//lib/datagrid/columns.rb#125
  def column(name, query = T.unsafe(nil), **options, &block); end

  # Returns column definition with given name
  #
  # source://datagrid//lib/datagrid/columns.rb#130
  def column_by_name(name); end

  # Returns an array of all defined column names
  #
  # source://datagrid//lib/datagrid/columns.rb#135
  def column_names; end

  # Returns a list of columns defined.
  # All column definistion are returned by default
  # You can limit the output with only columns you need like:
  #
  #   GridClass.columns(:id, :name)
  #
  # Supported options:
  #
  # * :data - if true returns only columns with data representation. Default: false.
  # * :html - if true returns only columns with html columns. Default: false.
  #
  # source://datagrid//lib/datagrid/columns.rb#91
  def columns(*args, data: T.unsafe(nil), html: T.unsafe(nil)); end

  # Defines a model decorator that will be used to define a column value.
  # All column blocks will be given a decorated version of the model.
  #
  #   decorate { |user| UserPresenter.new(user) }
  #
  #   decorate { UserPresenter } # a shortcut
  #
  # source://datagrid//lib/datagrid/columns.rb#172
  def decorate(model = T.unsafe(nil), &block); end

  # source://datagrid//lib/datagrid/columns.rb#198
  def define_column(columns, name, query = T.unsafe(nil), **options, &block); end

  # source://datagrid//lib/datagrid/columns.rb#188
  def filter_columns(columns_array, *names, data: T.unsafe(nil), html: T.unsafe(nil)); end

  # source://datagrid//lib/datagrid/columns.rb#210
  def find_column_by_name(columns, name); end

  # Formats column value for HTML.
  # Helps to distinguish formatting as plain data and HTML
  #
  #   column(:name) do |model|
  #     format(model.name) do |value|
  #       content_tag(:strong, value)
  #     end
  #   end
  #
  # source://datagrid//lib/datagrid/columns.rb#151
  def format(value, &block); end

  # source://datagrid//lib/datagrid/columns.rb#183
  def inherited(child_class); end

  # source://datagrid//lib/datagrid/columns.rb#139
  def respond_to(&block); end
end

# source://datagrid//lib/datagrid/columns/column.rb#1
class Datagrid::Columns::Column
  # @return [Column] a new instance of Column
  #
  # source://datagrid//lib/datagrid/columns/column.rb#34
  def initialize(grid_class, name, query, options = T.unsafe(nil), &block); end

  # source://datagrid//lib/datagrid/columns/column.rb#134
  def append_preload(scope); end

  # @return [Boolean]
  #
  # source://datagrid//lib/datagrid/columns/column.rb#101
  def data?; end

  # Returns the value of attribute data_block.
  #
  # source://datagrid//lib/datagrid/columns/column.rb#32
  def data_block; end

  # Sets the attribute data_block
  #
  # @param value the value to set the attribute data_block to.
  #
  # source://datagrid//lib/datagrid/columns/column.rb#32
  def data_block=(_arg0); end

  # source://datagrid//lib/datagrid/columns/column.rb#50
  def data_value(model, grid); end

  # source://datagrid//lib/datagrid/columns/column.rb#159
  def driver; end

  # @return [Boolean]
  #
  # source://datagrid//lib/datagrid/columns/column.rb#113
  def enabled?(grid); end

  # source://datagrid//lib/datagrid/columns/column.rb#130
  def generic_value(model, grid); end

  # Returns the value of attribute grid_class.
  #
  # source://datagrid//lib/datagrid/columns/column.rb#32
  def grid_class; end

  # Sets the attribute grid_class
  #
  # @param value the value to set the attribute grid_class to.
  #
  # source://datagrid//lib/datagrid/columns/column.rb#32
  def grid_class=(_arg0); end

  # source://datagrid//lib/datagrid/columns/column.rb#60
  def header; end

  # @return [Boolean]
  #
  # source://datagrid//lib/datagrid/columns/column.rb#97
  def html?; end

  # Returns the value of attribute html_block.
  #
  # source://datagrid//lib/datagrid/columns/column.rb#32
  def html_block; end

  # Sets the attribute html_block
  #
  # @param value the value to set the attribute html_block to.
  #
  # source://datagrid//lib/datagrid/columns/column.rb#32
  def html_block=(_arg0); end

  # source://datagrid//lib/datagrid/columns/column.rb#125
  def html_value(context, asset, grid); end

  # source://datagrid//lib/datagrid/columns/column.rb#117
  def inspect; end

  # source://datagrid//lib/datagrid/columns/column.rb#56
  def label; end

  # @return [Boolean]
  #
  # source://datagrid//lib/datagrid/columns/column.rb#105
  def mandatory?; end

  # @return [Boolean]
  #
  # source://datagrid//lib/datagrid/columns/column.rb#109
  def mandatory_explicitly_set?; end

  # Returns the value of attribute name.
  #
  # source://datagrid//lib/datagrid/columns/column.rb#32
  def name; end

  # Sets the attribute name
  #
  # @param value the value to set the attribute name to.
  #
  # source://datagrid//lib/datagrid/columns/column.rb#32
  def name=(_arg0); end

  # Returns the value of attribute options.
  #
  # source://datagrid//lib/datagrid/columns/column.rb#32
  def options; end

  # Sets the attribute options
  #
  # @param value the value to set the attribute options to.
  #
  # source://datagrid//lib/datagrid/columns/column.rb#32
  def options=(_arg0); end

  # source://datagrid//lib/datagrid/columns/column.rb#68
  def order; end

  # source://datagrid//lib/datagrid/columns/column.rb#80
  def order_by_value(model, grid); end

  # @return [Boolean]
  #
  # source://datagrid//lib/datagrid/columns/column.rb#88
  def order_by_value?; end

  # source://datagrid//lib/datagrid/columns/column.rb#92
  def order_desc; end

  # source://datagrid//lib/datagrid/columns/column.rb#148
  def preload; end

  # Returns the value of attribute query.
  #
  # source://datagrid//lib/datagrid/columns/column.rb#32
  def query; end

  # Sets the attribute query
  #
  # @param value the value to set the attribute query to.
  #
  # source://datagrid//lib/datagrid/columns/column.rb#32
  def query=(_arg0); end

  # @return [Boolean]
  #
  # source://datagrid//lib/datagrid/columns/column.rb#76
  def supports_order?; end

  # source://datagrid//lib/datagrid/columns/column.rb#121
  def to_s; end
end

# source://datagrid//lib/datagrid/columns/column.rb#3
class Datagrid::Columns::Column::ResponseFormat
  # @return [ResponseFormat] a new instance of ResponseFormat
  # @yield [_self]
  # @yieldparam _self [Datagrid::Columns::Column::ResponseFormat] the object that the method was called on
  #
  # source://datagrid//lib/datagrid/columns/column.rb#7
  def initialize; end

  # source://datagrid//lib/datagrid/columns/column.rb#19
  def call_data; end

  # source://datagrid//lib/datagrid/columns/column.rb#27
  def call_html(context); end

  # source://datagrid//lib/datagrid/columns/column.rb#11
  def data(&block); end

  # Returns the value of attribute data_block.
  #
  # source://datagrid//lib/datagrid/columns/column.rb#5
  def data_block; end

  # Sets the attribute data_block
  #
  # @param value the value to set the attribute data_block to.
  #
  # source://datagrid//lib/datagrid/columns/column.rb#5
  def data_block=(_arg0); end

  # source://datagrid//lib/datagrid/columns/column.rb#15
  def html(&block); end

  # Returns the value of attribute html_block.
  #
  # source://datagrid//lib/datagrid/columns/column.rb#5
  def html_block; end

  # Sets the attribute html_block
  #
  # @param value the value to set the attribute html_block to.
  #
  # source://datagrid//lib/datagrid/columns/column.rb#5
  def html_block=(_arg0); end

  # source://datagrid//lib/datagrid/columns/column.rb#23
  def to_s; end
end

# InstanceMethods
#
# source://datagrid//lib/datagrid/columns.rb#549
class Datagrid::Columns::DataRow
  # @return [DataRow] a new instance of DataRow
  #
  # source://datagrid//lib/datagrid/columns.rb#551
  def initialize(grid, model); end

  # source://datagrid//lib/datagrid/columns.rb#556
  def method_missing(meth, *args, &blk); end
end

# ClassMethods
#
# source://datagrid//lib/datagrid/columns.rb#219
module Datagrid::Columns::InstanceMethods
  # source://datagrid//lib/datagrid/columns.rb#408
  def initialize(*_arg0); end

  # source://datagrid//lib/datagrid/columns.rb#221
  def assets; end

  # Returns all columns that are possible to be displayed for the current grid object
  #
  #   class MyGrid
  #     filter(:search) {|scope, value| scope.full_text_search(value)}
  #     column(:id)
  #     column(:name, :mandatory => true)
  #     column(:search_match, :if => proc {|grid| grid.search.present? }) do |model, grid|
  #       search_match_line(model.searchable_content, grid.search)
  #     end
  #   end
  #
  #   grid = MyGrid.new
  #   grid.columns # => [ #<Column:name> ]
  #   grid.available_columns # => [ #<Column:id>, #<Column:name> ]
  #   grid.search = "keyword"
  #   grid.available_columns # => [ #<Column:id>, #<Column:name>, #<Column:search_match> ]
  #
  # source://datagrid//lib/datagrid/columns.rb#430
  def available_columns; end

  # Defines a column at instance level
  #
  # See Datagrid::Columns::ClassMethods#column for more info
  #
  # source://datagrid//lib/datagrid/columns.rb#404
  def column(name, query = T.unsafe(nil), **options, &block); end

  # Finds a column definition by name
  #
  # source://datagrid//lib/datagrid/columns.rb#352
  def column_by_name(name); end

  # Returns all columns selected in grid instance
  #
  # Examples:
  #
  #   MyGrid.new.columns # => all defined columns
  #   grid = MyGrid.new(:column_names => [:id, :name])
  #   grid.columns # => id and name columns
  #   grid.columns(:id, :category) # => id and category column
  #
  # source://datagrid//lib/datagrid/columns.rb#333
  def columns(*args, data: T.unsafe(nil), html: T.unsafe(nil)); end

  # Returns Array of Arrays with data for each row in datagrid assets with header.
  #
  # Arguments:
  #
  #   * <tt>column_names</tt> - list of column names if you want to limit data only to specified columns
  #
  # source://datagrid//lib/datagrid/columns.rb#274
  def data(*column_names); end

  # Returns all columns that can be represented in plain data(non-html) way
  #
  # source://datagrid//lib/datagrid/columns.rb#342
  def data_columns(*names, **options); end

  # Return Array of Hashes where keys are column names and values are column values
  # for each row in filtered datagrid relation.
  #
  # Example:
  #
  #     class MyGrid
  #       scope { Model }
  #       column(:id)
  #       column(:name)
  #     end
  #
  #     Model.create!(:name => "One")
  #     Model.create!(:name => "Two")
  #
  #     MyGrid.new.data_hash # => [{:name => "One"}, {:name => "Two"}]
  #
  # source://datagrid//lib/datagrid/columns.rb#294
  def data_hash; end

  # Returns an object representing a grid row.
  # Allows to access column values
  #
  # Example:
  #
  #  class MyGrid
  #    scope { User }
  #    column(:id)
  #    column(:name)
  #    column(:number_of_purchases) do |user|
  #      user.purchases.count
  #    end
  #  end
  #
  #  row = MyGrid.new.data_row(User.last)
  #  row.id # => user.id
  #  row.number_of_purchases # => user.purchases.count
  #
  # source://datagrid//lib/datagrid/columns.rb#397
  def data_row(asset); end

  # Return a cell data value for given column name and asset
  #
  # source://datagrid//lib/datagrid/columns.rb#437
  def data_value(column_name, asset); end

  # Returns a decorated version of given model if decorator is specified or the model otherwise.
  #
  # source://datagrid//lib/datagrid/columns.rb#460
  def decorate(model); end

  # Gives ability to have a different formatting for CSV and HTML column value.
  #
  # Example:
  #
  #   column(:name) do |model|
  #     format(model.name) do |value|
  #       content_tag(:strong, value)
  #     end
  #   end
  #
  #   column(:company) do |model|
  #     format(model.company.name) do
  #       render :partial => "company_with_logo", :locals => {:company => model.company }
  #     end
  #   end
  #
  # source://datagrid//lib/datagrid/columns.rb#371
  def format(value, &block); end

  # source://datagrid//lib/datagrid/columns.rb#464
  def generic_value(column, model); end

  # Returns <tt>Hash</tt> where keys are column names and values are column values for the given asset
  #
  # source://datagrid//lib/datagrid/columns.rb#250
  def hash_for(asset); end

  # Returns <tt>Array</tt> of human readable column names. See also "Localization" section
  #
  # Arguments:
  #
  #   * <tt>column_names</tt> - list of column names if you want to limit data only to specified columns
  #
  # source://datagrid//lib/datagrid/columns.rb#234
  def header(*column_names); end

  # Returns all columns that can be represented in HTML table
  #
  # source://datagrid//lib/datagrid/columns.rb#347
  def html_columns(*names, **options); end

  # Return a cell HTML value for given column name and asset and view context
  #
  # source://datagrid//lib/datagrid/columns.rb#447
  def html_value(column_name, context, asset); end

  # Returns <tt>Array</tt> column values for given asset
  #
  # Arguments:
  #
  #   * <tt>column_names</tt> - list of column names if you want to limit data only to specified columns
  #
  # source://datagrid//lib/datagrid/columns.rb#243
  def row_for(asset, *column_names); end

  # Returns Array of Arrays with data for each row in datagrid assets without header.
  #
  # Arguments:
  #
  #   * <tt>column_names</tt> - list of column names if you want to limit data only to specified columns
  #
  # source://datagrid//lib/datagrid/columns.rb#263
  def rows(*column_names); end

  # Returns a CSV representation of the data in the grid
  # You are able to specify which columns you want to see in CSV.
  # All data columns are included by default
  # Also you can specify options hash as last argument that is proxied to
  # Ruby CSV library.
  #
  # Example:
  #
  #   grid.to_csv
  #   grid.to_csv(:id, :name)
  #   grid.to_csv(:col_sep => ';')
  #
  # source://datagrid//lib/datagrid/columns.rb#311
  def to_csv(*column_names, **options); end

  protected

  # source://datagrid//lib/datagrid/columns.rb#482
  def append_column_preload(scope); end

  # source://datagrid//lib/datagrid/columns.rb#488
  def cache(column, asset, type); end

  # source://datagrid//lib/datagrid/columns.rb#503
  def cache_key(asset); end

  # source://datagrid//lib/datagrid/columns.rb#522
  def each_with_batches(&block); end

  # source://datagrid//lib/datagrid/columns.rb#514
  def map_with_batches(&block); end

  # source://datagrid//lib/datagrid/columns.rb#530
  def value_from_html_block(context, asset, column); end
end

# source://datagrid//lib/datagrid/configuration.rb#11
class Datagrid::Configuration < ::Struct; end

# self.included
#
# source://datagrid//lib/datagrid.rb#39
class Datagrid::ConfigurationError < ::StandardError; end

# source://datagrid//lib/datagrid/core.rb#5
module Datagrid::Core
  include GeneratedInstanceMethods
  include ::ActiveModel::AttributeAssignment
  include ::Datagrid::Core::InstanceMethods

  mixes_in_class_methods GeneratedClassMethods
  mixes_in_class_methods ::Datagrid::Core::ClassMethods

  class << self
    # @private
    #
    # source://datagrid//lib/datagrid/core.rb#7
    def included(base); end
  end

  module GeneratedClassMethods
    def datagrid_attributes; end
    def datagrid_attributes=(value); end
    def datagrid_attributes?; end
    def dynamic_block; end
    def dynamic_block=(value); end
    def dynamic_block?; end
    def forbidden_attributes_protection; end
    def forbidden_attributes_protection=(value); end
    def forbidden_attributes_protection?; end
    def scope_value; end
    def scope_value=(value); end
    def scope_value?; end
  end

  module GeneratedInstanceMethods
    def datagrid_attributes; end
    def datagrid_attributes?; end
    def dynamic_block; end
    def dynamic_block?; end
    def forbidden_attributes_protection; end
    def forbidden_attributes_protection?; end
    def scope_value; end
    def scope_value=(value); end
    def scope_value?; end
  end
end

# self.included
#
# source://datagrid//lib/datagrid/core.rb#25
module Datagrid::Core::ClassMethods
  # source://datagrid//lib/datagrid/core.rb#27
  def datagrid_attribute(name, &block); end

  # source://datagrid//lib/datagrid/core.rb#57
  def driver; end

  # Allows dynamic columns definition, that could not be defined at class level
  #
  #   class MerchantsGrid
  #
  #     scope { Merchant }
  #
  #     column(:name)
  #
  #     dynamic do
  #       PurchaseCategory.all.each do |category|
  #         column(:"#{category.name.underscore}_sales") do |merchant|
  #           merchant.purchases.where(:category_id => category.id).count
  #         end
  #       end
  #     end
  #   end
  #
  #   grid = MerchantsGrid.new
  #   grid.data # => [
  #             #      [ "Name",   "Swimwear Sales", "Sportswear Sales", ... ]
  #             #      [ "Reebok", 2083382,            8382283,          ... ]
  #             #      [ "Nike",   8372283,            18734783,         ... ]
  #             #    ]
  #
  # source://datagrid//lib/datagrid/core.rb#84
  def dynamic(&block); end

  # Defines a scope at class level
  #
  # source://datagrid//lib/datagrid/core.rb#44
  def scope(&block); end

  protected

  # @raise [Datagrid::ConfigurationError]
  #
  # source://datagrid//lib/datagrid/core.rb#98
  def check_scope_defined!(message = T.unsafe(nil)); end

  # source://datagrid//lib/datagrid/core.rb#103
  def inherited(child_class); end
end

# ClassMethods
#
# source://datagrid//lib/datagrid/core.rb#110
module Datagrid::Core::InstanceMethods
  # source://datagrid//lib/datagrid/core.rb#112
  def initialize(attributes = T.unsafe(nil), &block); end

  # source://datagrid//lib/datagrid/core.rb#238
  def ==(other); end

  # Alias for <tt>send</tt> method
  #
  # source://datagrid//lib/datagrid/core.rb#136
  def [](attribute); end

  # source://datagrid//lib/datagrid/core.rb#140
  def []=(attribute, value); end

  # Returns serializable query arguments skipping all nil values
  #
  #   grid = ProductsGrid.new(category: 'dresses', available: true)
  #   grid.as_query # => {category: 'dresses', available: true}
  #
  # source://datagrid//lib/datagrid/core.rb#169
  def as_query; end

  # Returns a scope(e.g ActiveRecord::Relation) with all applied filters
  #
  # source://datagrid//lib/datagrid/core.rb#145
  def assets; end

  # Returns a hash of grid attributes including filter values
  # and ordering values
  #
  # source://datagrid//lib/datagrid/core.rb#127
  def attributes; end

  # Updates datagrid attributes with a passed hash argument
  #
  # source://datagrid//lib/datagrid/core.rb#151
  def attributes=(attributes); end

  # source://datagrid//lib/datagrid/core.rb#227
  def check_scope_defined!(message = T.unsafe(nil)); end

  # source://datagrid//lib/datagrid/core.rb#223
  def driver; end

  # source://datagrid//lib/datagrid/core.rb#231
  def inspect; end

  # Returns query parameters to link this grid from a page
  #
  #   grid = ProductsGrid.new(category: 'dresses', available: true)
  #   Rails.application.routes.url_helpers.products_path(grid.query_params)
  #     # => "/products?products_grid[category]=dresses&products_grid[available]=true"
  #
  # source://datagrid//lib/datagrid/core.rb#182
  def query_params(attributes = T.unsafe(nil)); end

  # Returns true if the scope was redefined for this instance of grid object
  #
  # @return [Boolean]
  #
  # source://datagrid//lib/datagrid/core.rb#219
  def redefined_scope?; end

  # Resets current instance scope to default scope defined in a class
  #
  # source://datagrid//lib/datagrid/core.rb#214
  def reset_scope; end

  # Redefines scope at instance level
  #
  #   class MyGrid
  #     scope { Article.order('created_at desc') }
  #   end
  #
  #   grid = MyGrid.new
  #   grid.scope do |scope|
  #     scope.where(:author_id => current_user.id)
  #   end
  #   grid.assets
  #       # => SELECT * FROM articles WHERE author_id = ?
  #       #    ORDER BY created_at desc
  #
  # source://datagrid//lib/datagrid/core.rb#200
  def scope(&block); end
end

# source://datagrid//lib/datagrid/drivers/abstract_driver.rb#2
module Datagrid::Drivers; end

# source://datagrid//lib/datagrid/drivers/abstract_driver.rb#3
class Datagrid::Drivers::AbstractDriver
  # source://datagrid//lib/datagrid/drivers/abstract_driver.rb#85
  def append_column_queries(assets, columns); end

  # @raise [NotImplementedError]
  #
  # source://datagrid//lib/datagrid/drivers/abstract_driver.rb#37
  def asc(scope, order); end

  # @raise [NotImplementedError]
  #
  # source://datagrid//lib/datagrid/drivers/abstract_driver.rb#81
  def batch_each(scope, batch_size, &block); end

  # @raise [NotImplementedError]
  # @return [Boolean]
  #
  # source://datagrid//lib/datagrid/drivers/abstract_driver.rb#112
  def can_preload?(scope, association); end

  # @raise [NotImplementedError]
  #
  # source://datagrid//lib/datagrid/drivers/abstract_driver.rb#73
  def column_names(scope); end

  # @raise [NotImplementedError]
  #
  # source://datagrid//lib/datagrid/drivers/abstract_driver.rb#69
  def contains(scope, field, value); end

  # @raise [NotImplementedError]
  #
  # source://datagrid//lib/datagrid/drivers/abstract_driver.rb#93
  def default_cache_key(asset); end

  # @raise [NotImplementedError]
  #
  # source://datagrid//lib/datagrid/drivers/abstract_driver.rb#45
  def default_order(scope, column_name); end

  # @raise [NotImplementedError]
  #
  # source://datagrid//lib/datagrid/drivers/abstract_driver.rb#108
  def default_preload(scope, value); end

  # @raise [NotImplementedError]
  #
  # source://datagrid//lib/datagrid/drivers/abstract_driver.rb#41
  def desc(scope, order); end

  # @raise [NotImplementedError]
  #
  # source://datagrid//lib/datagrid/drivers/abstract_driver.rb#49
  def greater_equal(scope, field, value); end

  # @raise [NotImplementedError]
  # @return [Boolean]
  #
  # source://datagrid//lib/datagrid/drivers/abstract_driver.rb#57
  def has_column?(scope, column_name); end

  # @return [Boolean]
  #
  # source://datagrid//lib/datagrid/drivers/abstract_driver.rb#65
  def is_timestamp?(scope, field); end

  # @raise [NotImplementedError]
  #
  # source://datagrid//lib/datagrid/drivers/abstract_driver.rb#53
  def less_equal(scope, field, value); end

  # @return [Boolean]
  #
  # source://datagrid//lib/datagrid/drivers/abstract_driver.rb#25
  def match?(scope); end

  # @raise [NotImplementedError]
  #
  # source://datagrid//lib/datagrid/drivers/abstract_driver.rb#77
  def normalized_column_type(scope, field); end

  # @raise [NotImplementedError]
  #
  # source://datagrid//lib/datagrid/drivers/abstract_driver.rb#61
  def reverse_order(scope); end

  # source://datagrid//lib/datagrid/drivers/abstract_driver.rb#7
  def subclasses; end

  # source://datagrid//lib/datagrid/drivers/abstract_driver.rb#7
  def subclasses=(_arg0); end

  # source://datagrid//lib/datagrid/drivers/abstract_driver.rb#7
  def subclasses?; end

  # @raise [NotImplementedError]
  #
  # source://datagrid//lib/datagrid/drivers/abstract_driver.rb#29
  def to_scope(scope); end

  # @raise [NotImplementedError]
  #
  # source://datagrid//lib/datagrid/drivers/abstract_driver.rb#33
  def where(scope, attribute, value); end

  # source://datagrid//lib/datagrid/drivers/abstract_driver.rb#97
  def where_by_timestamp_gotcha(scope, name, value); end

  protected

  # @return [Boolean]
  #
  # source://datagrid//lib/datagrid/drivers/abstract_driver.rb#117
  def timestamp_class?(klass); end

  class << self
    # source://datagrid//lib/datagrid/drivers/abstract_driver.rb#15
    def guess_driver(scope); end

    # @private
    #
    # source://datagrid//lib/datagrid/drivers/abstract_driver.rb#9
    def inherited(base); end

    # @raise [NotImplementedError]
    # @return [Boolean]
    #
    # source://datagrid//lib/datagrid/drivers/abstract_driver.rb#21
    def match?(scope); end

    # source://datagrid//lib/datagrid/drivers/abstract_driver.rb#7
    def subclasses; end

    # source://datagrid//lib/datagrid/drivers/abstract_driver.rb#7
    def subclasses=(value); end

    # source://datagrid//lib/datagrid/drivers/abstract_driver.rb#7
    def subclasses?; end
  end
end

# source://datagrid//lib/datagrid/drivers/abstract_driver.rb#5
Datagrid::Drivers::AbstractDriver::TIMESTAMP_CLASSES = T.let(T.unsafe(nil), Array)

# source://datagrid//lib/datagrid/drivers/active_record.rb#3
class Datagrid::Drivers::ActiveRecord < ::Datagrid::Drivers::AbstractDriver
  # source://datagrid//lib/datagrid/drivers/active_record.rb#29
  def append_column_queries(assets, columns); end

  # source://datagrid//lib/datagrid/drivers/active_record.rb#44
  def asc(scope, order); end

  # source://datagrid//lib/datagrid/drivers/active_record.rb#104
  def batch_each(scope, batch_size, &block); end

  # @return [Boolean]
  #
  # source://datagrid//lib/datagrid/drivers/active_record.rb#120
  def can_preload?(scope, association); end

  # source://datagrid//lib/datagrid/drivers/active_record.rb#80
  def column_names(scope); end

  # source://datagrid//lib/datagrid/drivers/active_record.rb#84
  def contains(scope, field, value); end

  # source://datagrid//lib/datagrid/drivers/active_record.rb#112
  def default_cache_key(asset); end

  # source://datagrid//lib/datagrid/drivers/active_record.rb#62
  def default_order(scope, column_name); end

  # source://datagrid//lib/datagrid/drivers/active_record.rb#116
  def default_preload(scope, value); end

  # source://datagrid//lib/datagrid/drivers/active_record.rb#50
  def desc(scope, order); end

  # source://datagrid//lib/datagrid/drivers/active_record.rb#66
  def greater_equal(scope, field, value); end

  # @return [Boolean]
  #
  # source://datagrid//lib/datagrid/drivers/active_record.rb#74
  def has_column?(scope, column_name); end

  # source://datagrid//lib/datagrid/drivers/active_record.rb#70
  def less_equal(scope, field, value); end

  # source://datagrid//lib/datagrid/drivers/active_record.rb#89
  def normalized_column_type(scope, field); end

  # source://datagrid//lib/datagrid/drivers/active_record.rb#58
  def reverse_order(scope); end

  # source://datagrid//lib/datagrid/drivers/active_record.rb#14
  def to_scope(scope); end

  # source://datagrid//lib/datagrid/drivers/active_record.rb#40
  def where(scope, attribute, value); end

  protected

  # source://datagrid//lib/datagrid/drivers/active_record.rb#130
  def contains_predicate; end

  # source://datagrid//lib/datagrid/drivers/active_record.rb#126
  def prefix_table_name(scope, field); end

  class << self
    # @return [Boolean]
    #
    # source://datagrid//lib/datagrid/drivers/active_record.rb#5
    def match?(scope); end
  end
end

# source://datagrid//lib/datagrid/drivers/array.rb#3
class Datagrid::Drivers::Array < ::Datagrid::Drivers::AbstractDriver
  # source://datagrid//lib/datagrid/drivers/array.rb#19
  def asc(scope, order); end

  # source://datagrid//lib/datagrid/drivers/array.rb#72
  def batch_each(scope, batch_size, &block); end

  # @return [Boolean]
  #
  # source://datagrid//lib/datagrid/drivers/array.rb#80
  def can_preload?(scope, association); end

  # source://datagrid//lib/datagrid/drivers/array.rb#68
  def column_names(scope); end

  # source://datagrid//lib/datagrid/drivers/array.rb#62
  def contains(scope, field, value); end

  # source://datagrid//lib/datagrid/drivers/array.rb#76
  def default_cache_key(asset); end

  # source://datagrid//lib/datagrid/drivers/array.rb#31
  def default_order(scope, column_name); end

  # source://datagrid//lib/datagrid/drivers/array.rb#27
  def desc(scope, order); end

  # source://datagrid//lib/datagrid/drivers/array.rb#39
  def greater_equal(scope, field, value); end

  # @return [Boolean]
  #
  # source://datagrid//lib/datagrid/drivers/array.rb#53
  def has_column?(scope, column_name); end

  # @return [Boolean]
  #
  # source://datagrid//lib/datagrid/drivers/array.rb#57
  def is_timestamp?(scope, column_name); end

  # source://datagrid//lib/datagrid/drivers/array.rb#46
  def less_equal(scope, field, value); end

  # source://datagrid//lib/datagrid/drivers/array.rb#35
  def reverse_order(scope); end

  # source://datagrid//lib/datagrid/drivers/array.rb#9
  def to_scope(scope); end

  # source://datagrid//lib/datagrid/drivers/array.rb#13
  def where(scope, attribute, value); end

  class << self
    # @return [Boolean]
    #
    # source://datagrid//lib/datagrid/drivers/array.rb#5
    def match?(scope); end
  end
end

# source://datagrid//lib/datagrid/drivers/mongo_mapper.rb#3
class Datagrid::Drivers::MongoMapper < ::Datagrid::Drivers::AbstractDriver
  # source://datagrid//lib/datagrid/drivers/mongo_mapper.rb#22
  def asc(scope, order); end

  # source://datagrid//lib/datagrid/drivers/mongo_mapper.rb#59
  def batch_each(scope, batch_size, &block); end

  # @return [Boolean]
  #
  # source://datagrid//lib/datagrid/drivers/mongo_mapper.rb#79
  def can_preload?(scope, association); end

  # source://datagrid//lib/datagrid/drivers/mongo_mapper.rb#55
  def column_names(scope); end

  # source://datagrid//lib/datagrid/drivers/mongo_mapper.rb#51
  def contains(scope, field, value); end

  # @raise [NotImplementedError]
  #
  # source://datagrid//lib/datagrid/drivers/mongo_mapper.rb#71
  def default_cache_key(asset); end

  # source://datagrid//lib/datagrid/drivers/mongo_mapper.rb#30
  def default_order(scope, column_name); end

  # @raise [NotImplementedError]
  #
  # source://datagrid//lib/datagrid/drivers/mongo_mapper.rb#75
  def default_preload(scope, value); end

  # source://datagrid//lib/datagrid/drivers/mongo_mapper.rb#26
  def desc(scope, order); end

  # source://datagrid//lib/datagrid/drivers/mongo_mapper.rb#34
  def greater_equal(scope, field, value); end

  # @return [Boolean]
  #
  # source://datagrid//lib/datagrid/drivers/mongo_mapper.rb#42
  def has_column?(scope, column_name); end

  # @return [Boolean]
  #
  # source://datagrid//lib/datagrid/drivers/mongo_mapper.rb#46
  def is_timestamp?(scope, column_name); end

  # source://datagrid//lib/datagrid/drivers/mongo_mapper.rb#38
  def less_equal(scope, field, value); end

  # source://datagrid//lib/datagrid/drivers/mongo_mapper.rb#14
  def to_scope(scope); end

  # source://datagrid//lib/datagrid/drivers/mongo_mapper.rb#18
  def where(scope, attribute, value); end

  class << self
    # @return [Boolean]
    #
    # source://datagrid//lib/datagrid/drivers/mongo_mapper.rb#5
    def match?(scope); end
  end
end

# source://datagrid//lib/datagrid/drivers/mongoid.rb#3
class Datagrid::Drivers::Mongoid < ::Datagrid::Drivers::AbstractDriver
  # source://datagrid//lib/datagrid/drivers/mongoid.rb#29
  def asc(scope, order); end

  # source://datagrid//lib/datagrid/drivers/mongoid.rb#81
  def batch_each(scope, batch_size, &block); end

  # @return [Boolean]
  #
  # source://datagrid//lib/datagrid/drivers/mongoid.rb#101
  def can_preload?(scope, association); end

  # source://datagrid//lib/datagrid/drivers/mongoid.rb#57
  def column_names(scope); end

  # source://datagrid//lib/datagrid/drivers/mongoid.rb#53
  def contains(scope, field, value); end

  # source://datagrid//lib/datagrid/drivers/mongoid.rb#93
  def default_cache_key(asset); end

  # source://datagrid//lib/datagrid/drivers/mongoid.rb#37
  def default_order(scope, column_name); end

  # source://datagrid//lib/datagrid/drivers/mongoid.rb#97
  def default_preload(scope, value); end

  # source://datagrid//lib/datagrid/drivers/mongoid.rb#33
  def desc(scope, order); end

  # source://datagrid//lib/datagrid/drivers/mongoid.rb#41
  def greater_equal(scope, field, value); end

  # @return [Boolean]
  #
  # source://datagrid//lib/datagrid/drivers/mongoid.rb#49
  def has_column?(scope, column_name); end

  # source://datagrid//lib/datagrid/drivers/mongoid.rb#45
  def less_equal(scope, field, value); end

  # source://datagrid//lib/datagrid/drivers/mongoid.rb#61
  def normalized_column_type(scope, field); end

  # source://datagrid//lib/datagrid/drivers/mongoid.rb#14
  def to_scope(scope); end

  # source://datagrid//lib/datagrid/drivers/mongoid.rb#22
  def where(scope, attribute, value); end

  class << self
    # @return [Boolean]
    #
    # source://datagrid//lib/datagrid/drivers/mongoid.rb#5
    def match?(scope); end
  end
end

# source://datagrid//lib/datagrid/drivers/sequel.rb#3
class Datagrid::Drivers::Sequel < ::Datagrid::Drivers::AbstractDriver
  # source://datagrid//lib/datagrid/drivers/sequel.rb#19
  def append_column_queries(assets, columns); end

  # source://datagrid//lib/datagrid/drivers/sequel.rb#27
  def asc(scope, order); end

  # source://datagrid//lib/datagrid/drivers/sequel.rb#83
  def batch_each(scope, batch_size, &block); end

  # @return [Boolean]
  #
  # source://datagrid//lib/datagrid/drivers/sequel.rb#93
  def can_preload?(scope, association); end

  # source://datagrid//lib/datagrid/drivers/sequel.rb#55
  def column_names(scope); end

  # source://datagrid//lib/datagrid/drivers/sequel.rb#59
  def contains(scope, field, value); end

  # source://datagrid//lib/datagrid/drivers/sequel.rb#79
  def default_cache_key(asset); end

  # source://datagrid//lib/datagrid/drivers/sequel.rb#39
  def default_order(scope, column_name); end

  # source://datagrid//lib/datagrid/drivers/sequel.rb#89
  def default_preload(scope, value); end

  # source://datagrid//lib/datagrid/drivers/sequel.rb#31
  def desc(scope, order); end

  # source://datagrid//lib/datagrid/drivers/sequel.rb#43
  def greater_equal(scope, field, value); end

  # @return [Boolean]
  #
  # source://datagrid//lib/datagrid/drivers/sequel.rb#51
  def has_column?(scope, column_name); end

  # source://datagrid//lib/datagrid/drivers/sequel.rb#47
  def less_equal(scope, field, value); end

  # source://datagrid//lib/datagrid/drivers/sequel.rb#64
  def normalized_column_type(scope, field); end

  # source://datagrid//lib/datagrid/drivers/sequel.rb#35
  def reverse_order(scope); end

  # source://datagrid//lib/datagrid/drivers/sequel.rb#14
  def to_scope(scope); end

  # source://datagrid//lib/datagrid/drivers/sequel.rb#23
  def where(scope, attribute, value); end

  protected

  # source://datagrid//lib/datagrid/drivers/sequel.rb#104
  def column_type(scope, field); end

  # source://datagrid//lib/datagrid/drivers/sequel.rb#100
  def prefix_table_name(scope, field); end

  class << self
    # @return [Boolean]
    #
    # source://datagrid//lib/datagrid/drivers/sequel.rb#5
    def match?(scope); end
  end
end

# source://datagrid//lib/datagrid/engine.rb#4
class Datagrid::Engine < ::Rails::Engine
  class << self
    # source://activesupport/7.0.4/lib/active_support/callbacks.rb#68
    def __callbacks; end
  end
end

# source://datagrid//lib/datagrid/filters/base_filter.rb#1
class Datagrid::FilteringError < ::StandardError; end

# source://datagrid//lib/datagrid/filters.rb#4
module Datagrid::Filters
  include GeneratedInstanceMethods
  include ::ActiveModel::AttributeAssignment
  include ::Datagrid::Core::InstanceMethods
  include ::Datagrid::Core
  include ::Datagrid::Filters::CompositeFilters::InstanceMethods
  include ::Datagrid::Filters::CompositeFilters
  include ::Datagrid::Filters::InstanceMethods

  mixes_in_class_methods GeneratedClassMethods
  mixes_in_class_methods ::Datagrid::Filters::ClassMethods
  mixes_in_class_methods ::Datagrid::Core::ClassMethods
  mixes_in_class_methods ::Datagrid::Filters::CompositeFilters::ClassMethods

  class << self
    # source://datagrid//lib/datagrid/filters.rb#37
    def included(base); end
  end

  module GeneratedClassMethods
    def datagrid_attributes; end
    def datagrid_attributes=(value); end
    def datagrid_attributes?; end
    def dynamic_block; end
    def dynamic_block=(value); end
    def dynamic_block?; end
    def filters_array; end
    def filters_array=(value); end
    def filters_array?; end
    def forbidden_attributes_protection; end
    def forbidden_attributes_protection=(value); end
    def forbidden_attributes_protection?; end
    def scope_value; end
    def scope_value=(value); end
    def scope_value?; end
  end

  module GeneratedInstanceMethods
    def datagrid_attributes; end
    def datagrid_attributes?; end
    def dynamic_block; end
    def dynamic_block?; end
    def filters_array; end
    def filters_array=(value); end
    def filters_array?; end
    def forbidden_attributes_protection; end
    def forbidden_attributes_protection?; end
    def scope_value; end
    def scope_value=(value); end
    def scope_value?; end
  end
end

# source://datagrid//lib/datagrid/filters/base_filter.rb#4
class Datagrid::Filters::BaseFilter
  # @return [BaseFilter] a new instance of BaseFilter
  #
  # source://datagrid//lib/datagrid/filters/base_filter.rb#8
  def initialize(grid_class, name, options = T.unsafe(nil), &block); end

  # @return [Boolean]
  #
  # source://datagrid//lib/datagrid/filters/base_filter.rb#83
  def allow_blank?; end

  # @return [Boolean]
  #
  # source://datagrid//lib/datagrid/filters/base_filter.rb#79
  def allow_nil?; end

  # source://datagrid//lib/datagrid/filters/base_filter.rb#23
  def apply(grid_object, scope, value); end

  # Returns the value of attribute block.
  #
  # source://datagrid//lib/datagrid/filters/base_filter.rb#6
  def block; end

  # Sets the attribute block
  #
  # @param value the value to set the attribute block to.
  #
  # source://datagrid//lib/datagrid/filters/base_filter.rb#6
  def block=(_arg0); end

  # source://datagrid//lib/datagrid/filters/base_filter.rb#64
  def default(object); end

  # source://datagrid//lib/datagrid/filters/base_filter.rb#103
  def default_filter_block; end

  # @return [Boolean]
  #
  # source://datagrid//lib/datagrid/filters/base_filter.rb#118
  def dummy?; end

  # @return [Boolean]
  #
  # source://datagrid//lib/datagrid/filters/base_filter.rb#131
  def enabled?(grid); end

  # source://datagrid//lib/datagrid/filters/base_filter.rb#95
  def form_builder_helper_name; end

  # source://datagrid//lib/datagrid/filters/base_filter.rb#114
  def format(value); end

  # Returns the value of attribute grid_class.
  #
  # source://datagrid//lib/datagrid/filters/base_filter.rb#6
  def grid_class; end

  # Sets the attribute grid_class
  #
  # @param value the value to set the attribute grid_class to.
  #
  # source://datagrid//lib/datagrid/filters/base_filter.rb#6
  def grid_class=(_arg0); end

  # source://datagrid//lib/datagrid/filters/base_filter.rb#56
  def header; end

  # source://datagrid//lib/datagrid/filters/base_filter.rb#87
  def input_options; end

  # source://datagrid//lib/datagrid/filters/base_filter.rb#91
  def label_options; end

  # @return [Boolean]
  #
  # source://datagrid//lib/datagrid/filters/base_filter.rb#75
  def multiple?; end

  # Returns the value of attribute name.
  #
  # source://datagrid//lib/datagrid/filters/base_filter.rb#6
  def name; end

  # Sets the attribute name
  #
  # @param value the value to set the attribute name to.
  #
  # source://datagrid//lib/datagrid/filters/base_filter.rb#6
  def name=(_arg0); end

  # Returns the value of attribute options.
  #
  # source://datagrid//lib/datagrid/filters/base_filter.rb#6
  def options; end

  # Sets the attribute options
  #
  # @param value the value to set the attribute options to.
  #
  # source://datagrid//lib/datagrid/filters/base_filter.rb#6
  def options=(_arg0); end

  # @raise [NotImplementedError]
  #
  # source://datagrid//lib/datagrid/filters/base_filter.rb#15
  def parse(value); end

  # source://datagrid//lib/datagrid/filters/base_filter.rb#39
  def parse_values(value); end

  # source://datagrid//lib/datagrid/filters/base_filter.rb#52
  def separator; end

  # @return [Boolean]
  #
  # source://datagrid//lib/datagrid/filters/base_filter.rb#110
  def supports_range?; end

  # source://datagrid//lib/datagrid/filters/base_filter.rb#122
  def type; end

  # @return [Boolean]
  #
  # source://datagrid//lib/datagrid/filters/base_filter.rb#19
  def unapplicable_value?(value); end

  protected

  # source://datagrid//lib/datagrid/filters/base_filter.rb#170
  def default_filter(value, scope, grid); end

  # source://datagrid//lib/datagrid/filters/base_filter.rb#137
  def default_filter_where(scope, value); end

  # source://datagrid//lib/datagrid/filters/base_filter.rb#162
  def default_separator; end

  # source://datagrid//lib/datagrid/filters/base_filter.rb#166
  def driver; end

  # source://datagrid//lib/datagrid/filters/base_filter.rb#141
  def execute(value, scope, grid_object); end

  # source://datagrid//lib/datagrid/filters/base_filter.rb#149
  def normalize_multiple_value(value); end

  class << self
    # source://datagrid//lib/datagrid/filters/base_filter.rb#99
    def form_builder_helper_name; end
  end
end

# source://datagrid//lib/datagrid/filters/boolean_enum_filter.rb#1
class Datagrid::Filters::BooleanEnumFilter < ::Datagrid::Filters::EnumFilter
  # @return [BooleanEnumFilter] a new instance of BooleanEnumFilter
  #
  # source://datagrid//lib/datagrid/filters/boolean_enum_filter.rb#6
  def initialize(report, attribute, options = T.unsafe(nil), &block); end

  # source://datagrid//lib/datagrid/filters/boolean_enum_filter.rb#14
  def checkbox_id(value); end
end

# source://datagrid//lib/datagrid/filters/boolean_enum_filter.rb#4
Datagrid::Filters::BooleanEnumFilter::NO = T.let(T.unsafe(nil), String)

# source://datagrid//lib/datagrid/filters/boolean_enum_filter.rb#3
Datagrid::Filters::BooleanEnumFilter::YES = T.let(T.unsafe(nil), String)

# source://datagrid//lib/datagrid/filters/boolean_filter.rb#2
class Datagrid::Filters::BooleanFilter < ::Datagrid::Filters::BaseFilter
  # source://datagrid//lib/datagrid/filters/boolean_filter.rb#4
  def parse(value); end
end

# self.included
#
# source://datagrid//lib/datagrid/filters.rb#50
module Datagrid::Filters::ClassMethods
  # source://datagrid//lib/datagrid/filters.rb#110
  def default_filter; end

  # Defines new datagrid filter.
  # This method automatically generates <tt>attr_accessor</tt> for filter name
  # and adds it to the list of datagrid attributes.
  #
  # Arguments:
  #
  # * <tt>name</tt> - filter name
  # * <tt>type</tt> - filter type that defines type case and GUI representation of a filter
  # * <tt>options</tt> - hash of options
  # * <tt>block</tt> - proc to apply the filter
  #
  # Available options:
  #
  # * <tt>:header</tt> - determines the header of the filter
  # * <tt>:default</tt> - the default filter value. Able to accept a <tt>Proc</tt> in case default should be recalculated
  # * <tt>:range</tt> - if true, filter can accept two values that are treated as a range that will be used for filtering
  #   Not all of the filter types support this option. Here are the list of types that do:
  #   <tt>:integer</tt>, <tt>:float</tt>, <tt>:date</tt>, <tt>:datetime</tt>, <tt>:string</tt>
  # * <tt>:multiple</tt> -  if true multiple values can be assigned to this filter.
  #   If String is assigned as a filter value, it is parsed from string using a separator symbol (`,` by default).
  #   But you can specify a different separator as option value. Default: false.
  # * <tt>:allow_nil</tt> - determines if the value can be nil
  # * <tt>:allow_blank</tt> - determines if the value can be blank
  # * <tt>:before</tt> - determines the position of this filter,
  #   by adding it before the filter passed here (when using datagrid_form_for helper)
  # * <tt>:after</tt> - determines the position of this filter,
  #   by adding it after the filter passed here (when using datagrid_form_for helper)
  # * <tt>:dummy</tt> - if true, this filter will not be applied automatically
  #   and will be just displayed in form. In case you may want to apply it manually.
  # * <tt>:if</tt> - specify the condition when the filter can be dislayed and used.
  #   Accepts a block or a symbol with an instance method name
  # * <tt>:unless</tt> - specify the reverse condition when the filter can be dislayed and used.
  #   Accepts a block or a symbol with an instance method name
  # * <tt>:input_options</tt> - options passed when rendering html input tag attributes
  # * <tt>:label_options</tt> - options passed when rendering html label tag attributes
  #
  # See: https://github.com/bogdan/datagrid/wiki/Filters for examples
  #
  # @raise [ConfigurationError]
  #
  # source://datagrid//lib/datagrid/filters.rb#97
  def filter(name, type = T.unsafe(nil), **options, &block); end

  # Returns filter definition object by name
  #
  # source://datagrid//lib/datagrid/filters.rb#53
  def filter_by_name(attribute); end

  # source://datagrid//lib/datagrid/filters.rb#118
  def filters; end

  # source://datagrid//lib/datagrid/filters.rb#114
  def inspect; end

  protected

  # source://datagrid//lib/datagrid/filters.rb#129
  def filters_inspection; end

  # source://datagrid//lib/datagrid/filters.rb#124
  def inherited(child_class); end
end

# source://datagrid//lib/datagrid/filters/composite_filters.rb#3
module Datagrid::Filters::CompositeFilters
  include ::Datagrid::Filters::CompositeFilters::InstanceMethods

  mixes_in_class_methods ::Datagrid::Filters::CompositeFilters::ClassMethods

  class << self
    # @private
    #
    # source://datagrid//lib/datagrid/filters/composite_filters.rb#5
    def included(base); end
  end
end

# self.included
#
# source://datagrid//lib/datagrid/filters/composite_filters.rb#13
module Datagrid::Filters::CompositeFilters::ClassMethods
  # source://datagrid//lib/datagrid/filters/composite_filters.rb#15
  def date_range_filters(field, from_options = T.unsafe(nil), to_options = T.unsafe(nil)); end

  # source://datagrid//lib/datagrid/filters/composite_filters.rb#27
  def integer_range_filters(field, from_options = T.unsafe(nil), to_options = T.unsafe(nil)); end

  # source://datagrid//lib/datagrid/filters/composite_filters.rb#38
  def normalize_composite_filter_options(options, field); end
end

# ClassMethods
#
# source://datagrid//lib/datagrid/filters/composite_filters.rb#46
module Datagrid::Filters::CompositeFilters::InstanceMethods; end

# source://datagrid//lib/datagrid/filters/date_filter.rb#3
class Datagrid::Filters::DateFilter < ::Datagrid::Filters::BaseFilter
  include ::Datagrid::Filters::RangedFilter

  # source://datagrid//lib/datagrid/filters/date_filter.rb#7
  def apply(grid_object, scope, value); end

  # source://datagrid//lib/datagrid/filters/date_filter.rb#27
  def default_filter_where(scope, value); end

  # source://datagrid//lib/datagrid/filters/date_filter.rb#19
  def format(value); end

  # source://datagrid//lib/datagrid/filters/date_filter.rb#14
  def parse(value); end

  protected

  # source://datagrid//lib/datagrid/filters/date_filter.rb#36
  def formats; end
end

# source://datagrid//lib/datagrid/filters/date_time_filter.rb#3
class Datagrid::Filters::DateTimeFilter < ::Datagrid::Filters::BaseFilter
  include ::Datagrid::Filters::RangedFilter

  # source://datagrid//lib/datagrid/filters/date_time_filter.rb#11
  def format(value); end

  # source://datagrid//lib/datagrid/filters/date_time_filter.rb#7
  def parse(value); end

  protected

  # source://datagrid//lib/datagrid/filters/date_time_filter.rb#21
  def formats; end
end

# source://datagrid//lib/datagrid/filters/default_filter.rb#1
class Datagrid::Filters::DefaultFilter < ::Datagrid::Filters::BaseFilter
  # source://datagrid//lib/datagrid/filters/default_filter.rb#2
  def parse(value); end
end

# source://datagrid//lib/datagrid/filters.rb#34
class Datagrid::Filters::DefaultFilterScope; end

# source://datagrid//lib/datagrid/filters/dynamic_filter.rb#3
class Datagrid::Filters::DynamicFilter < ::Datagrid::Filters::BaseFilter
  include ::Datagrid::Filters::SelectOptions

  # @return [DynamicFilter] a new instance of DynamicFilter
  #
  # source://datagrid//lib/datagrid/filters/dynamic_filter.rb#19
  def initialize(*_arg0); end

  # source://datagrid//lib/datagrid/filters/dynamic_filter.rb#39
  def default_filter_where(scope, filter); end

  # source://datagrid//lib/datagrid/filters/dynamic_filter.rb#77
  def operations; end

  # source://datagrid//lib/datagrid/filters/dynamic_filter.rb#81
  def operations_select; end

  # source://datagrid//lib/datagrid/filters/dynamic_filter.rb#28
  def parse_values(filter); end

  # @return [Boolean]
  #
  # source://datagrid//lib/datagrid/filters/dynamic_filter.rb#34
  def unapplicable_value?(filter); end

  protected

  # source://datagrid//lib/datagrid/filters/dynamic_filter.rb#122
  def column_type(field); end

  # source://datagrid//lib/datagrid/filters/dynamic_filter.rb#89
  def default_select; end

  # source://datagrid//lib/datagrid/filters/dynamic_filter.rb#99
  def type_cast(field, value); end
end

# source://datagrid//lib/datagrid/filters/dynamic_filter.rb#17
Datagrid::Filters::DynamicFilter::AVAILABLE_OPERATIONS = T.let(T.unsafe(nil), Array)

# source://datagrid//lib/datagrid/filters/dynamic_filter.rb#11
Datagrid::Filters::DynamicFilter::DEFAULT_OPERATIONS = T.let(T.unsafe(nil), Array)

# source://datagrid//lib/datagrid/filters/dynamic_filter.rb#7
Datagrid::Filters::DynamicFilter::EQUAL_OPERATION = T.let(T.unsafe(nil), String)

# source://datagrid//lib/datagrid/filters/dynamic_filter.rb#10
Datagrid::Filters::DynamicFilter::LESS_EQUAL_OPERATION = T.let(T.unsafe(nil), String)

# source://datagrid//lib/datagrid/filters/dynamic_filter.rb#8
Datagrid::Filters::DynamicFilter::LIKE_OPERATION = T.let(T.unsafe(nil), String)

# source://datagrid//lib/datagrid/filters/dynamic_filter.rb#9
Datagrid::Filters::DynamicFilter::MORE_EQUAL_OPERATION = T.let(T.unsafe(nil), String)

# source://datagrid//lib/datagrid/filters/enum_filter.rb#3
class Datagrid::Filters::EnumFilter < ::Datagrid::Filters::BaseFilter
  include ::Datagrid::Filters::SelectOptions

  # @raise [Datagrid::ConfigurationError]
  # @return [EnumFilter] a new instance of EnumFilter
  #
  # source://datagrid//lib/datagrid/filters/enum_filter.rb#7
  def initialize(*args); end

  # @return [Boolean]
  #
  # source://datagrid//lib/datagrid/filters/enum_filter.rb#24
  def checkboxes?; end

  # source://datagrid//lib/datagrid/filters/enum_filter.rb#15
  def parse(value); end

  # source://datagrid//lib/datagrid/filters/enum_filter.rb#20
  def strict; end
end

# source://datagrid//lib/datagrid/filters/extended_boolean_filter.rb#1
class Datagrid::Filters::ExtendedBooleanFilter < ::Datagrid::Filters::EnumFilter
  # @return [ExtendedBooleanFilter] a new instance of ExtendedBooleanFilter
  #
  # source://datagrid//lib/datagrid/filters/extended_boolean_filter.rb#6
  def initialize(report, attribute, options = T.unsafe(nil), &block); end

  # source://datagrid//lib/datagrid/filters/extended_boolean_filter.rb#11
  def execute(value, scope, grid_object); end

  # source://datagrid//lib/datagrid/filters/extended_boolean_filter.rb#16
  def parse(value); end

  protected

  # source://datagrid//lib/datagrid/filters/extended_boolean_filter.rb#31
  def boolean_select; end
end

# source://datagrid//lib/datagrid/filters/extended_boolean_filter.rb#4
Datagrid::Filters::ExtendedBooleanFilter::NO = T.let(T.unsafe(nil), String)

# source://datagrid//lib/datagrid/filters/extended_boolean_filter.rb#3
Datagrid::Filters::ExtendedBooleanFilter::YES = T.let(T.unsafe(nil), String)

# source://datagrid//lib/datagrid/filters.rb#20
Datagrid::Filters::FILTER_TYPES = T.let(T.unsafe(nil), Hash)

# source://datagrid//lib/datagrid/filters/float_filter.rb#1
class Datagrid::Filters::FloatFilter < ::Datagrid::Filters::BaseFilter
  include ::Datagrid::Filters::RangedFilter

  # source://datagrid//lib/datagrid/filters/float_filter.rb#5
  def parse(value); end
end

# ClassMethods
#
# source://datagrid//lib/datagrid/filters.rb#137
module Datagrid::Filters::InstanceMethods
  # source://datagrid//lib/datagrid/filters.rb#139
  def initialize(*args, &block); end

  # source://datagrid//lib/datagrid/filters.rb#147
  def assets; end

  # source://datagrid//lib/datagrid/filters.rb#188
  def default_filter; end

  # Returns assets filtered only by specified filters
  # Allows partial filtering
  #
  # source://datagrid//lib/datagrid/filters.rb#174
  def filter_by(*filters); end

  # Returns filter object with the given name
  #
  # source://datagrid//lib/datagrid/filters.rb#168
  def filter_by_name(name); end

  # Returns filter value for given filter definition
  #
  # source://datagrid//lib/datagrid/filters.rb#152
  def filter_value(filter); end

  # Returns string representation of filter value
  #
  # source://datagrid//lib/datagrid/filters.rb#157
  def filter_value_as_string(name); end

  # Returns all currently enabled filters
  #
  # source://datagrid//lib/datagrid/filters.rb#193
  def filters; end

  # Returns select options for specific filter or filter name
  # If given filter doesn't support select options raises `ArgumentError`
  #
  # source://datagrid//lib/datagrid/filters.rb#180
  def select_options(filter); end

  protected

  # source://datagrid//lib/datagrid/filters.rb#201
  def apply_filters(current_scope, filters); end
end

# source://datagrid//lib/datagrid/filters/integer_filter.rb#3
class Datagrid::Filters::IntegerFilter < ::Datagrid::Filters::BaseFilter
  include ::Datagrid::Filters::RangedFilter

  # source://datagrid//lib/datagrid/filters/integer_filter.rb#7
  def parse(value); end
end

# source://datagrid//lib/datagrid/filters/ranged_filter.rb#1
module Datagrid::Filters::RangedFilter
  # source://datagrid//lib/datagrid/filters/ranged_filter.rb#3
  def initialize(grid, name, options, &block); end

  # source://datagrid//lib/datagrid/filters/ranged_filter.rb#40
  def default_filter_where(scope, value); end

  # source://datagrid//lib/datagrid/filters/ranged_filter.rb#10
  def parse_values(value); end

  # @return [Boolean]
  #
  # source://datagrid//lib/datagrid/filters/ranged_filter.rb#36
  def range?; end
end

# source://datagrid//lib/datagrid/filters/select_options.rb#1
module Datagrid::Filters::SelectOptions
  # source://datagrid//lib/datagrid/filters/select_options.rb#14
  def include_blank; end

  # source://datagrid//lib/datagrid/filters/select_options.rb#21
  def prompt; end

  # source://datagrid//lib/datagrid/filters/select_options.rb#3
  def select(object); end
end

# source://datagrid//lib/datagrid/filters/string_filter.rb#1
class Datagrid::Filters::StringFilter < ::Datagrid::Filters::BaseFilter
  include ::Datagrid::Filters::RangedFilter

  # source://datagrid//lib/datagrid/filters/string_filter.rb#5
  def parse(value); end
end

# source://datagrid//lib/datagrid/form_builder.rb#4
module Datagrid::FormBuilder
  # Returns a form input html for the corresponding filter name
  #
  # source://datagrid//lib/datagrid/form_builder.rb#7
  def datagrid_filter(filter_or_attribute, options = T.unsafe(nil), &block); end

  # Returns a form label html for the corresponding filter name
  #
  # source://datagrid//lib/datagrid/form_builder.rb#19
  def datagrid_label(filter_or_attribute, text = T.unsafe(nil), **options, &block); end

  protected

  # source://datagrid//lib/datagrid/form_builder.rb#199
  def add_html_classes(options, *classes); end

  # source://datagrid//lib/datagrid/form_builder.rb#25
  def datagrid_boolean_enum_filter(attribute_or_filter, options = T.unsafe(nil)); end

  # source://datagrid//lib/datagrid/form_builder.rb#33
  def datagrid_boolean_filter(attribute_or_filter, options = T.unsafe(nil)); end

  # source://datagrid//lib/datagrid/form_builder.rb#37
  def datagrid_date_filter(attribute_or_filter, options = T.unsafe(nil)); end

  # source://datagrid//lib/datagrid/form_builder.rb#41
  def datagrid_date_time_filter(attribute_or_filter, options = T.unsafe(nil)); end

  # source://datagrid//lib/datagrid/form_builder.rb#45
  def datagrid_default_filter(attribute_or_filter, options = T.unsafe(nil)); end

  # source://datagrid//lib/datagrid/form_builder.rb#104
  def datagrid_dynamic_filter(attribute_or_filter, options = T.unsafe(nil)); end

  # source://datagrid//lib/datagrid/form_builder.rb#50
  def datagrid_enum_filter(attribute_or_filter, options = T.unsafe(nil), &block); end

  # source://datagrid//lib/datagrid/form_builder.rb#29
  def datagrid_extended_boolean_filter(attribute_or_filter, options = T.unsafe(nil)); end

  # source://datagrid//lib/datagrid/form_builder.rb#195
  def datagrid_filter_html_class(filter); end

  # source://datagrid//lib/datagrid/form_builder.rb#178
  def datagrid_float_filter(attribute_or_filter, options = T.unsafe(nil)); end

  # source://datagrid//lib/datagrid/form_builder.rb#182
  def datagrid_get_attribute(attribute_or_filter); end

  # source://datagrid//lib/datagrid/form_builder.rb#186
  def datagrid_get_filter(attribute_or_filter); end

  # source://datagrid//lib/datagrid/form_builder.rb#96
  def datagrid_integer_filter(attribute_or_filter, options = T.unsafe(nil)); end

  # source://datagrid//lib/datagrid/form_builder.rb#141
  def datagrid_range_filter(type, attribute_or_filter, options = T.unsafe(nil)); end

  # source://datagrid//lib/datagrid/form_builder.rb#156
  def datagrid_range_filter_options(object, filter, type, options); end

  # source://datagrid//lib/datagrid/form_builder.rb#174
  def datagrid_string_filter(attribute_or_filter, options = T.unsafe(nil)); end

  # source://datagrid//lib/datagrid/form_builder.rb#129
  def dynamic_filter_select(name, variants, select_options, html_options); end

  # @return [Boolean]
  #
  # source://datagrid//lib/datagrid/form_builder.rb#85
  def enum_checkbox_checked?(filter, option_value); end

  # source://datagrid//lib/datagrid/form_builder.rb#203
  def partial_path(name); end
end

# source://datagrid//lib/datagrid/form_builder.rb#214
class Datagrid::FormBuilder::Error < ::StandardError; end

# source://datagrid//lib/datagrid/helper.rb#5
module Datagrid::Helper
  # Renders HTML for for grid with all filters inputs and lables defined in it
  #
  # Supported options:
  #
  # * <tt>:partials</tt> - Path for form partial lookup.
  #   Default: 'datagrid'.
  # * All options supported by Rails <tt>form_for</tt> helper
  #
  # source://datagrid//lib/datagrid/helper.rb#96
  def datagrid_form_for(grid, options = T.unsafe(nil)); end

  # source://datagrid//lib/datagrid/helper.rb#20
  def datagrid_format_value(grid, column_name, model); end

  # Renders HTML table header for given grid instance using columns defined in it
  #
  # Supported options:
  #
  # * <tt>:order</tt> - display ordering controls built-in into header
  #   Default: true
  # * <tt>:partials</tt> - Path for partials lookup.
  #   Default: 'datagrid'.
  #
  # source://datagrid//lib/datagrid/helper.rb#53
  def datagrid_header(grid, options = T.unsafe(nil)); end

  # Renders ordering controls for the given column name
  #
  # Supported options:
  #
  # * <tt>:partials</tt> - Path for partials lookup.
  #   Default: 'datagrid'.
  #
  # source://datagrid//lib/datagrid/helper.rb#85
  def datagrid_order_for(grid, column, options = T.unsafe(nil)); end

  # Generates an ascending or descending order url for the given column
  #
  # source://datagrid//lib/datagrid/helper.rb#120
  def datagrid_order_path(grid, column, descending); end

  # Provides access to datagrid columns data.
  #
  #   # Suppose that <tt>grid</tt> has first_name and last_name columns
  #   <%= datagrid_row(grid, user) do |row| %>
  #     <tr>
  #       <td><%= row.first_name %></td>
  #       <td><%= row.last_name %></td>
  #     </tr>
  #   <% end %>
  #
  # Used in case you want to build html table completelly manually
  #
  # source://datagrid//lib/datagrid/helper.rb#111
  def datagrid_row(grid, asset, &block); end

  # Renders HTML table rows using given grid definition using columns defined in it.
  # Allows to provide a custom layout for each for in place with a block
  #
  # Supported options:
  #
  # * <tt>:columns</tt> - Array of column names to display.
  #   Used in case when same grid class is used in different places
  #   and needs different columns. Default: all defined columns.
  # * <tt>:partials</tt> - Path for partials lookup.
  #   Default: 'datagrid'.
  #
  #   = datagrid_rows(grid) # Generic table rows Layout
  #
  #   = datagrid_rows(grid) do |row| # Custom Layout
  #     %tr
  #       %td= row.project_name
  #       %td.project-status{class: row.status}= row.status
  #
  # source://datagrid//lib/datagrid/helper.rb#75
  def datagrid_rows(grid, assets = T.unsafe(nil), **options, &block); end

  # Renders html table with columns defined in grid class.
  # In the most common used you need to pass paginated collection
  # to datagrid table because datagrid do not have pagination compatibilities:
  #
  #   assets = grid.assets.page(params[:page])
  #   datagrid_table(grid, assets, options)
  #
  # Supported options:
  #
  # * <tt>:html</tt> - hash of attributes for <table> tag
  # * <tt>:order</tt> - If false do not generate ordering controlls.
  #   Default: true.
  # * <tt>:columns</tt> - Array of column names to display.
  #   Used in case when same grid class is used in different places
  #   and needs different columns. Default: all defined columns.
  # * <tt>:partials</tt> - Path for partials lookup.
  #   Default: 'datagrid'.
  #
  # source://datagrid//lib/datagrid/helper.rb#41
  def datagrid_table(grid, assets = T.unsafe(nil), **options); end

  # Returns individual cell value from the given grid, column name and model
  # Allows to render custom HTML layout for grid data
  #
  #   <ul>
  #     <% @grid.columns.each do |column|
  #       <li><%= column.header %>: <%= datagrid_value(@grid, column.name, @resource %></li>
  #     <% end %>
  #   </ul>
  #
  # source://datagrid//lib/datagrid/helper.rb#16
  def datagrid_value(grid, column_name, model); end

  protected

  # source://datagrid//lib/datagrid/helper.rb#170
  def datagrid_column_classes(grid, column); end

  # source://datagrid//lib/datagrid/helper.rb#166
  def datagrid_renderer; end
end

# Represents a datagrid row that provides access to column values for the given asset
#
#   row = datagrid_row(grid, user)
#   row.first_name # => "<strong>Bogdan</strong>"
#   row.grid       # => Grid object
#   row.asset      # => User object
#
# source://datagrid//lib/datagrid/helper.rb#130
class Datagrid::Helper::HtmlRow
  include ::Enumerable

  # @return [HtmlRow] a new instance of HtmlRow
  #
  # source://datagrid//lib/datagrid/helper.rb#136
  def initialize(context, grid, asset); end

  # Returns the value of attribute asset.
  #
  # source://datagrid//lib/datagrid/helper.rb#134
  def asset; end

  # Iterates over all column values that are available in the row
  #
  # source://datagrid//lib/datagrid/helper.rb#148
  def each; end

  # Return a column value for given column name
  #
  # source://datagrid//lib/datagrid/helper.rb#143
  def get(column); end

  # Returns the value of attribute grid.
  #
  # source://datagrid//lib/datagrid/helper.rb#134
  def grid; end

  protected

  # source://datagrid//lib/datagrid/helper.rb#155
  def method_missing(method, *args, &blk); end
end

# source://datagrid//lib/datagrid/ordering.rb#4
class Datagrid::OrderUnsupported < ::StandardError; end

# source://datagrid//lib/datagrid/ordering.rb#6
module Datagrid::Ordering
  include GeneratedInstanceMethods
  include ::ActiveModel::AttributeAssignment
  include ::Datagrid::Core::InstanceMethods
  include ::Datagrid::Core
  include ::Datagrid::Columns::InstanceMethods
  include ::Datagrid::Columns
  include ::Datagrid::Ordering::InstanceMethods

  mixes_in_class_methods GeneratedClassMethods
  mixes_in_class_methods ::Datagrid::Ordering::ClassMethods
  mixes_in_class_methods ::Datagrid::Columns::ClassMethods
  mixes_in_class_methods ::Datagrid::Core::ClassMethods

  class << self
    # @private
    #
    # source://datagrid//lib/datagrid/ordering.rb#8
    def included(base); end
  end

  module GeneratedClassMethods
    def batch_size; end
    def batch_size=(value); end
    def batch_size?; end
    def cached; end
    def cached=(value); end
    def cached?; end
    def columns_array; end
    def columns_array=(value); end
    def columns_array?; end
    def datagrid_attributes; end
    def datagrid_attributes=(value); end
    def datagrid_attributes?; end
    def decorator; end
    def decorator=(value); end
    def decorator?; end
    def default_column_options; end
    def default_column_options=(value); end
    def default_column_options?; end
    def dynamic_block; end
    def dynamic_block=(value); end
    def dynamic_block?; end
    def forbidden_attributes_protection; end
    def forbidden_attributes_protection=(value); end
    def forbidden_attributes_protection?; end
    def scope_value; end
    def scope_value=(value); end
    def scope_value?; end
  end

  module GeneratedInstanceMethods
    def batch_size; end
    def batch_size=(value); end
    def batch_size?; end
    def cached; end
    def cached=(value); end
    def cached?; end
    def columns_array; end
    def columns_array=(value); end
    def columns_array?; end
    def datagrid_attributes; end
    def datagrid_attributes?; end
    def decorator; end
    def decorator?; end
    def default_column_options; end
    def default_column_options?; end
    def dynamic_block; end
    def dynamic_block?; end
    def forbidden_attributes_protection; end
    def forbidden_attributes_protection?; end
    def scope_value; end
    def scope_value=(value); end
    def scope_value?; end
  end
end

# self.included
#
# source://datagrid//lib/datagrid/ordering.rb#31
module Datagrid::Ordering::ClassMethods
  # @raise [Datagrid::OrderUnsupported]
  #
  # source://datagrid//lib/datagrid/ordering.rb#33
  def order_unsupported(name, reason); end
end

# ClassMethods
#
# source://datagrid//lib/datagrid/ordering.rb#39
module Datagrid::Ordering::InstanceMethods
  # source://datagrid//lib/datagrid/ordering.rb#41
  def assets; end

  # Returns a column definition that is currently used to order assets
  #
  #   class MyGrid
  #     scope { Model }
  #     column(:id)
  #     column(:name)
  #   end
  #   MyGrid.new(:order => "name").order_column # => #<Column name: "name", ...>
  #
  # source://datagrid//lib/datagrid/ordering.rb#55
  def order_column; end

  # Returns true if given grid is ordered by given column.
  # <tt>column</tt> can be given as name or as column object
  #
  # @return [Boolean]
  #
  # source://datagrid//lib/datagrid/ordering.rb#61
  def ordered_by?(column); end

  private

  # source://datagrid//lib/datagrid/ordering.rb#98
  def apply_asc_order(assets, order); end

  # source://datagrid//lib/datagrid/ordering.rb#120
  def apply_block_order(assets, order); end

  # source://datagrid//lib/datagrid/ordering.rb#106
  def apply_desc_order(assets, order); end

  # source://datagrid//lib/datagrid/ordering.rb#67
  def apply_order(assets); end

  # source://datagrid//lib/datagrid/ordering.rb#87
  def check_order_valid!; end

  # source://datagrid//lib/datagrid/ordering.rb#114
  def reverse_order(assets); end
end

# source://datagrid//lib/datagrid/renderer.rb#4
class Datagrid::Renderer
  # @return [Renderer] a new instance of Renderer
  #
  # source://datagrid//lib/datagrid/renderer.rb#10
  def initialize(template); end

  # source://datagrid//lib/datagrid/renderer.rb#29
  def form_for(grid, options = T.unsafe(nil)); end

  # source://datagrid//lib/datagrid/renderer.rb#14
  def format_value(grid, column, asset); end

  # source://datagrid//lib/datagrid/renderer.rb#49
  def header(grid, options = T.unsafe(nil)); end

  # source://datagrid//lib/datagrid/renderer.rb#74
  def order_for(grid, column, options = T.unsafe(nil)); end

  # source://datagrid//lib/datagrid/renderer.rb#79
  def order_path(grid, column, descending, request); end

  # source://datagrid//lib/datagrid/renderer.rb#56
  def rows(grid, assets = T.unsafe(nil), **options, &block); end

  # source://datagrid//lib/datagrid/renderer.rb#37
  def table(grid, assets, **options); end

  private

  # source://datagrid//lib/datagrid/renderer.rb#94
  def _render_partial(partial_name, partials_path, locals = T.unsafe(nil)); end

  # source://datagrid//lib/datagrid/renderer.rb#90
  def _safe(string); end

  class << self
    # source://datagrid//lib/datagrid/renderer.rb#6
    def for(template); end
  end
end

# source://datagrid//lib/datagrid/scaffold.rb#3
class Datagrid::Scaffold < ::Rails::Generators::NamedBase
  include ::Rails::Generators::ResourceHelpers
  include ::Rails::Generators::ModelHelpers

  # source://datagrid//lib/datagrid/scaffold.rb#76
  def base_grid_file; end

  # source://railties/7.0.4/lib/rails/generators/named_base.rb#215
  def check_class_collision; end

  # source://datagrid//lib/datagrid/scaffold.rb#10
  def create_scaffold; end

  # source://datagrid//lib/datagrid/scaffold.rb#43
  def grid_class_name; end

  # source://datagrid//lib/datagrid/scaffold.rb#47
  def grid_controller_class_name; end

  # source://datagrid//lib/datagrid/scaffold.rb#51
  def grid_controller_file; end

  # source://datagrid//lib/datagrid/scaffold.rb#55
  def grid_controller_short_name; end

  # source://datagrid//lib/datagrid/scaffold.rb#59
  def grid_model_name; end

  # source://datagrid//lib/datagrid/scaffold.rb#63
  def grid_param_name; end

  # source://datagrid//lib/datagrid/scaffold.rb#80
  def grid_route_name; end

  # source://datagrid//lib/datagrid/scaffold.rb#84
  def index_action; end

  # source://datagrid//lib/datagrid/scaffold.rb#67
  def pagination_helper_code; end

  # source://datagrid//lib/datagrid/scaffold.rb#39
  def view_file; end

  protected

  # @return [Boolean]
  #
  # source://datagrid//lib/datagrid/scaffold.rb#125
  def file_exists?(name); end

  # source://datagrid//lib/datagrid/scaffold.rb#101
  def generate_routing_namespace(code); end
end

# source://datagrid//lib/datagrid/utils.rb#2
module Datagrid::Utils
  class << self
    # source://datagrid//lib/datagrid/utils.rb#39
    def add_html_classes(options, *classes); end

    # source://datagrid//lib/datagrid/utils.rb#74
    def apply_args(*args, &block); end

    # source://datagrid//lib/datagrid/utils.rb#8
    def booleanize(value); end

    # source://datagrid//lib/datagrid/utils.rb#132
    def callable(value); end

    # source://datagrid//lib/datagrid/utils.rb#56
    def extract_position_from_options(array, options); end

    # source://datagrid//lib/datagrid/utils.rb#115
    def format_date_as_timestamp(value); end

    # source://datagrid//lib/datagrid/utils.rb#79
    def parse_date(value); end

    # source://datagrid//lib/datagrid/utils.rb#97
    def parse_datetime(value); end

    # source://datagrid//lib/datagrid/utils.rb#127
    def process_availability(grid, if_option, unless_option); end

    # @return [Boolean]
    #
    # source://datagrid//lib/datagrid/utils.rb#52
    def string_like?(value); end

    # source://datagrid//lib/datagrid/utils.rb#15
    def translate_from_namespace(namespace, grid_class, key); end

    # source://datagrid//lib/datagrid/utils.rb#30
    def warn_once(message, delay = T.unsafe(nil)); end

    protected

    # source://datagrid//lib/datagrid/utils.rb#137
    def property_availability(grid, option, default); end
  end
end
