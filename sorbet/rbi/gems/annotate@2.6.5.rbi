# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `annotate` gem.
# Please instead update this file by running `bin/tapioca gem annotate`.


# source://annotate//lib/annotate/version.rb#1
module Annotate
  class << self
    # source://annotate//lib/annotate.rb#118
    def bootstrap_rake; end

    # source://annotate//lib/annotate.rb#95
    def eager_load(options); end

    # source://annotate//lib/annotate.rb#141
    def fallback(*args); end

    # source://annotate//lib/annotate.rb#91
    def load_requires(options); end

    # source://annotate//lib/annotate.rb#84
    def load_tasks; end

    # source://annotate//lib/annotate.rb#82
    def loaded_tasks; end

    # source://annotate//lib/annotate.rb#81
    def loaded_tasks=(val); end

    # Set default values that can be overridden via environment variables.
    #
    # source://annotate//lib/annotate.rb#38
    def set_defaults(options = T.unsafe(nil)); end

    # source://annotate//lib/annotate.rb#56
    def setup_options(options = T.unsafe(nil)); end

    # @return [Boolean]
    #
    # source://annotate//lib/annotate.rb#77
    def skip_on_migration?; end

    # @return [Boolean]
    #
    # source://annotate//lib/annotate.rb#145
    def true?(val); end

    # source://annotate//lib/annotate/version.rb#2
    def version; end
  end
end

# source://annotate//lib/annotate.rb#22
Annotate::FLAG_OPTIONS = T.let(T.unsafe(nil), Array)

# source://annotate//lib/annotate.rb#27
Annotate::OTHER_OPTIONS = T.let(T.unsafe(nil), Array)

# source://annotate//lib/annotate.rb#30
Annotate::PATH_OPTIONS = T.let(T.unsafe(nil), Array)

# The set of available options to customize the behavior of Annotate.
#
# source://annotate//lib/annotate.rb#18
Annotate::POSITION_OPTIONS = T.let(T.unsafe(nil), Array)

# source://annotate//lib/annotate.rb#55
Annotate::TRUE_RE = T.let(T.unsafe(nil), Regexp)

# source://annotate//lib/annotate/annotate_models.rb#1
module AnnotateModels
  class << self
    # Given the name of an ActiveRecord class, create a schema
    # info block (basically a comment containing information
    # on the columns and their types) and put it at the front
    # of the model and fixture source files.
    # Returns true or false depending on whether the source
    # files were modified.
    #
    # === Options (opts)
    #  :position_in_class<Symbol>:: where to place the annotated section in model file
    #  :position_in_test<Symbol>:: where to place the annotated section in test/spec file(s)
    #  :position_in_fixture<Symbol>:: where to place the annotated section in fixture file
    #  :position_in_factory<Symbol>:: where to place the annotated section in factory file
    #  :exclude_tests<Symbol>:: whether to skip modification of test/spec files
    #  :exclude_fixtures<Symbol>:: whether to skip modification of fixture files
    #  :exclude_factories<Symbol>:: whether to skip modification of factory files
    #
    # source://annotate//lib/annotate/annotate_models.rb#293
    def annotate(klass, file, header, options = T.unsafe(nil)); end

    # source://annotate//lib/annotate/annotate_models.rb#433
    def annotate_model_file(annotated, file, header, options); end

    # Add a schema block to a file. If the file already contains
    # a schema info block (a comment starting with "== Schema Information"), check if it
    # matches the block that is already there. If so, leave it be. If not, remove the old
    # info block and write a new one.
    # Returns true or false depending on whether the file was modified.
    #
    # === Options (opts)
    #  :force<Symbol>:: whether to update the file even if it doesn't seem to need it.
    #  :position_in_*<Symbol>:: where to place the annotated section in fixture or model file,
    #                           :before or :after. Default is :before.
    #
    # source://annotate//lib/annotate/annotate_models.rb#217
    def annotate_one_file(file_name, info_block, position, options = T.unsafe(nil)); end

    # We're passed a name of things that might be
    # ActiveRecord models. If we can find the class, and
    # if its a subclass of ActiveRecord::Base,
    # then pass it to the associated block
    #
    # source://annotate//lib/annotate/annotate_models.rb#410
    def do_annotations(options = T.unsafe(nil)); end

    # source://annotate//lib/annotate/annotate_models.rb#185
    def get_index_info(klass, options = T.unsafe(nil)); end

    # Retrieve loaded model class by path to the file where it's supposed to be defined.
    #
    # source://annotate//lib/annotate/annotate_models.rb#391
    def get_loaded_model(model_path); end

    # Retrieve the classes belonging to the model names we're asked to process
    # Check for namespaced models in subdirectories as well as models
    # in subdirectories without namespacing.
    #
    # source://annotate//lib/annotate/annotate_models.rb#373
    def get_model_class(file); end

    # Return a list of the model files to annotate. If we have
    # command line arguments, they're assumed to be either
    # the underscore or CamelCase versions of model names.
    # Otherwise we take all the model files in the
    # model_dir directory.
    #
    # source://annotate//lib/annotate/annotate_models.rb#343
    def get_model_files(options); end

    # Use the column information in an ActiveRecord class
    # to create a comment block containing a line for
    # each column. The line contains the column name,
    # the type (and length), and any optional attributes
    #
    # source://annotate//lib/annotate/annotate_models.rb#89
    def get_schema_info(klass, header, options = T.unsafe(nil)); end

    # source://annotate//lib/annotate/annotate_models.rb#63
    def model_dir; end

    # source://annotate//lib/annotate/annotate_models.rb#67
    def model_dir=(dir); end

    # position = :position_in_fixture or :position_in_class
    #
    # source://annotate//lib/annotate/annotate_models.rb#334
    def options_with_position(options, position_in); end

    # Simple quoting for the default column value
    #
    # source://annotate//lib/annotate/annotate_models.rb#72
    def quote(value); end

    # source://annotate//lib/annotate/annotate_models.rb#263
    def remove_annotation_of_file(file_name); end

    # source://annotate//lib/annotate/annotate_models.rb#447
    def remove_annotations(options = T.unsafe(nil)); end

    # source://annotate//lib/annotate/annotate_models.rb#478
    def resolve_filename(filename_template, model_name, table_name); end
  end
end

# source://annotate//lib/annotate/annotate_models.rb#24
AnnotateModels::BLUEPRINTS_SPEC_DIR = T.let(T.unsafe(nil), String)

# Machinist http://github.com/notahat/machinist
#
# source://annotate//lib/annotate/annotate_models.rb#23
AnnotateModels::BLUEPRINTS_TEST_DIR = T.let(T.unsafe(nil), String)

# Annotate Models plugin use this header
#
# source://annotate//lib/annotate/annotate_models.rb#3
AnnotateModels::COMPAT_PREFIX = T.let(T.unsafe(nil), String)

# source://annotate//lib/annotate/annotate_models.rb#4
AnnotateModels::COMPAT_PREFIX_MD = T.let(T.unsafe(nil), String)

# source://annotate//lib/annotate/annotate_models.rb#7
AnnotateModels::END_MARK = T.let(T.unsafe(nil), String)

# source://annotate//lib/annotate/annotate_models.rb#20
AnnotateModels::EXEMPLARS_SPEC_DIR = T.let(T.unsafe(nil), String)

# Object Daddy http://github.com/flogic/object_daddy/tree/master
#
# source://annotate//lib/annotate/annotate_models.rb#19
AnnotateModels::EXEMPLARS_TEST_DIR = T.let(T.unsafe(nil), String)

# source://annotate//lib/annotate/annotate_models.rb#32
AnnotateModels::FABRICATORS_SPEC_DIR = T.let(T.unsafe(nil), String)

# Fabrication https://github.com/paulelliott/fabrication.git
#
# source://annotate//lib/annotate/annotate_models.rb#31
AnnotateModels::FABRICATORS_TEST_DIR = T.let(T.unsafe(nil), String)

# source://annotate//lib/annotate/annotate_models.rb#28
AnnotateModels::FACTORY_GIRL_SPEC_DIR = T.let(T.unsafe(nil), String)

# Factory Girl http://github.com/thoughtbot/factory_girl
#
# source://annotate//lib/annotate/annotate_models.rb#27
AnnotateModels::FACTORY_GIRL_TEST_DIR = T.let(T.unsafe(nil), String)

# source://annotate//lib/annotate/annotate_models.rb#45
AnnotateModels::FACTORY_PATTERNS = T.let(T.unsafe(nil), Array)

# source://annotate//lib/annotate/annotate_models.rb#40
AnnotateModels::FIXTURE_PATTERNS = T.let(T.unsafe(nil), Array)

# source://annotate//lib/annotate/annotate_models.rb#16
AnnotateModels::FIXTURE_SPEC_DIR = T.let(T.unsafe(nil), String)

# source://annotate//lib/annotate/annotate_models.rb#15
AnnotateModels::FIXTURE_TEST_DIR = T.let(T.unsafe(nil), String)

# since rails 4.0
#
# source://annotate//lib/annotate/annotate_models.rb#13
AnnotateModels::MODEL_TEST_DIR = T.let(T.unsafe(nil), String)

# Don't show limit (#) on these column types
# Example: show "integer" instead of "integer(4)"
#
# source://annotate//lib/annotate/annotate_models.rb#60
AnnotateModels::NO_LIMIT_COL_TYPES = T.let(T.unsafe(nil), Array)

# source://annotate//lib/annotate/annotate_models.rb#8
AnnotateModels::PATTERN = T.let(T.unsafe(nil), Regexp)

# source://annotate//lib/annotate/annotate_models.rb#5
AnnotateModels::PREFIX = T.let(T.unsafe(nil), String)

# source://annotate//lib/annotate/annotate_models.rb#6
AnnotateModels::PREFIX_MD = T.let(T.unsafe(nil), String)

# source://annotate//lib/annotate/annotate_models.rb#14
AnnotateModels::SPEC_MODEL_DIR = T.let(T.unsafe(nil), String)

# source://annotate//lib/annotate/annotate_models.rb#34
AnnotateModels::TEST_PATTERNS = T.let(T.unsafe(nil), Array)

# File.join for windows reverse bar compat?
# I dont use windows, can`t test
#
# source://annotate//lib/annotate/annotate_models.rb#12
AnnotateModels::UNIT_TEST_DIR = T.let(T.unsafe(nil), String)

# source://annotate//lib/annotate/annotate_routes.rb#20
module AnnotateRoutes
  class << self
    # source://annotate//lib/annotate/annotate_routes.rb#23
    def do_annotations(options = T.unsafe(nil)); end

    # source://annotate//lib/annotate/annotate_routes.rb#68
    def remove_annotations(options = T.unsafe(nil)); end

    # @return [Boolean]
    #
    # source://annotate//lib/annotate/annotate_routes.rb#86
    def routes_exists?; end

    # source://annotate//lib/annotate/annotate_routes.rb#82
    def routes_file; end

    # source://annotate//lib/annotate/annotate_routes.rb#99
    def strip_annotations(content); end

    # source://annotate//lib/annotate/annotate_routes.rb#136
    def strip_on_removal(content, where_header_found); end

    # source://annotate//lib/annotate/annotate_routes.rb#92
    def write_contents(content); end
  end
end

# source://annotate//lib/annotate/annotate_routes.rb#21
AnnotateRoutes::PREFIX = T.let(T.unsafe(nil), String)
