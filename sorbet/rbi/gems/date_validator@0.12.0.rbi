# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `date_validator` gem.
# Please instead update this file by running `bin/tapioca gem date_validator`.

# ActiveModel Rails module.
#
# source://date_validator//lib/active_model/validations/date_validator.rb#6
module ActiveModel
  class << self
    # source://activemodel/7.0.4/lib/active_model.rb#71
    def eager_load!; end

    # source://activemodel/7.0.4/lib/active_model/gem_version.rb#5
    def gem_version; end

    # source://activemodel/7.0.4/lib/active_model/version.rb#7
    def version; end
  end
end

# ActiveModel::Validations Rails module. Contains all the default validators.
#
# source://date_validator//lib/active_model/validations/date_validator.rb#9
module ActiveModel::Validations
  include GeneratedInstanceMethods
  include ::ActiveSupport::Callbacks
  include ::ActiveModel::Validations::HelperMethods

  mixes_in_class_methods GeneratedClassMethods
  mixes_in_class_methods ::ActiveModel::Validations::ClassMethods
  mixes_in_class_methods ::ActiveModel::Callbacks
  mixes_in_class_methods ::ActiveSupport::Callbacks::ClassMethods
  mixes_in_class_methods ::ActiveSupport::DescendantsTracker
  mixes_in_class_methods ::ActiveModel::Translation
  mixes_in_class_methods ::ActiveModel::Validations::HelperMethods

  # source://activemodel/7.0.4/lib/active_model/validations.rb#301
  def errors; end

  # source://activemodel/7.0.4/lib/active_model/validations.rb#373
  def invalid?(context = T.unsafe(nil)); end

  def read_attribute_for_validation(*_arg0); end

  # source://activemodel/7.0.4/lib/active_model/validations.rb#334
  def valid?(context = T.unsafe(nil)); end

  # source://activemodel/7.0.4/lib/active_model/validations.rb#334
  def validate(context = T.unsafe(nil)); end

  # source://activemodel/7.0.4/lib/active_model/validations.rb#382
  def validate!(context = T.unsafe(nil)); end

  # source://activemodel/7.0.4/lib/active_model/validations/with.rb#137
  def validates_with(*args, &block); end

  private

  # source://activemodel/7.0.4/lib/active_model/validations.rb#283
  def initialize_dup(other); end

  # source://activemodel/7.0.4/lib/active_model/validations.rb#410
  def raise_validation_error; end

  # source://activemodel/7.0.4/lib/active_model/validations.rb#405
  def run_validations!; end

  module GeneratedClassMethods
    def __callbacks; end
    def __callbacks=(value); end
    def __callbacks?; end
    def _validators; end
    def _validators=(value); end
    def _validators?; end
  end

  module GeneratedInstanceMethods
    def __callbacks; end
    def __callbacks?; end
    def _validators; end
    def _validators?; end
  end
end

# Date Validator. Inherits from ActiveModel::EachValidator.
#
# Responds to the regular validator API methods `#check_validity` and
# `#validate_each`.
#
# source://date_validator//lib/active_model/validations/date_validator.rb#15
class ActiveModel::Validations::DateValidator < ::ActiveModel::EachValidator
  # Call `#initialize` on the superclass, adding a default
  # `allow_nil: false` option.
  #
  # @return [DateValidator] a new instance of DateValidator
  #
  # source://date_validator//lib/active_model/validations/date_validator.rb#25
  def initialize(options); end

  # Validates the arguments passed to the validator.
  #
  # They must be either any kind of Time, a Proc, or a Symbol.
  #
  # source://date_validator//lib/active_model/validations/date_validator.rb#32
  def check_validity!; end

  # Overridden because standard allow_nil and allow_blank checks don't work with
  # string expressions that cannot be type cast to dates. We have to validate
  # the pre-type cast values.
  #
  # source://date_validator//lib/active_model/validations/date_validator.rb#43
  def validate(record); end

  # The actual validator method. It is called when ActiveRecord iterates
  # over all the validators.
  #
  # source://date_validator//lib/active_model/validations/date_validator.rb#52
  def validate_each(record, attr_name, value); end

  private

  # @return [Boolean]
  #
  # source://date_validator//lib/active_model/validations/date_validator.rb#107
  def is_time?(object); end
end

# Implemented checks and their associated operators.
#
# source://date_validator//lib/active_model/validations/date_validator.rb#18
ActiveModel::Validations::DateValidator::CHECKS = T.let(T.unsafe(nil), Hash)

ActiveModel::Validations::EmailValidator = EmailValidator

# source://date_validator//lib/active_model/validations/date_validator.rb#112
module ActiveModel::Validations::HelperMethods
  # source://activemodel/7.0.4/lib/active_model/validations/absence.rb#28
  def validates_absence_of(*attr_names); end

  # source://activemodel/7.0.4/lib/active_model/validations/acceptance.rb#108
  def validates_acceptance_of(*attr_names); end

  # source://activemodel/7.0.4/lib/active_model/validations/comparison.rb#77
  def validates_comparison_of(*attr_names); end

  # source://activemodel/7.0.4/lib/active_model/validations/confirmation.rb#75
  def validates_confirmation_of(*attr_names); end

  # Validates whether the value of the specified attribute is a validate Date
  #
  #   class Person < ActiveRecord::Base
  #     validates_date_of :payment_date, after: :packaging_date
  #     validates_date_of :expiration_date, before: Proc.new { Time.now }
  #   end
  #
  # Configuration options:
  # * <tt>:after</tt> - check that a Date is after the specified one.
  # * <tt>:before</tt> - check that a Date is before the specified one.
  # * <tt>:after_or_equal_to</tt> - check that a Date is after or equal to the specified one.
  # * <tt>:before_or_equal_to</tt> - check that a Date is before or equal to the specified one.
  # * <tt>:equal_to</tt> - check that a Date is equal to the specified one.
  #
  # source://date_validator//lib/active_model/validations/date_validator.rb#126
  def validates_date_of(*attr_names); end

  # source://activemodel/7.0.4/lib/active_model/validations/exclusion.rb#44
  def validates_exclusion_of(*attr_names); end

  # source://activemodel/7.0.4/lib/active_model/validations/format.rb#108
  def validates_format_of(*attr_names); end

  # source://activemodel/7.0.4/lib/active_model/validations/inclusion.rb#42
  def validates_inclusion_of(*attr_names); end

  # source://activemodel/7.0.4/lib/active_model/validations/length.rb#122
  def validates_length_of(*attr_names); end

  # source://activemodel/7.0.4/lib/active_model/validations/numericality.rb#205
  def validates_numericality_of(*attr_names); end

  # source://strong_password/0.0.10/lib/active_model/validations/password_strength_validator.rb#38
  def validates_password_strength(*attr_names); end

  # source://activemodel/7.0.4/lib/active_model/validations/presence.rb#34
  def validates_presence_of(*attr_names); end

  # source://activemodel/7.0.4/lib/active_model/validations/length.rb#122
  def validates_size_of(*attr_names); end

  private

  # source://activemodel/7.0.4/lib/active_model/validations/helper_methods.rb#7
  def _merge_attributes(attr_names); end
end

# A simple date validator for Rails 3+.
#
# @example
#   validates :expiration_date,
#   date: { after: Proc.new { Time.now },
#   before: Proc.new { Time.now + 1.year } }
#   # Using Proc.new prevents production cache issues
#
# source://date_validator//lib/date_validator/engine.rb#1
module DateValidator; end

# source://date_validator//lib/date_validator/engine.rb#2
class DateValidator::Engine < ::Rails::Engine
  class << self
    # source://activesupport/7.0.4/lib/active_support/callbacks.rb#68
    def __callbacks; end
  end
end
