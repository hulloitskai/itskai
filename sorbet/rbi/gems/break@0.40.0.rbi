# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `break` gem.
# Please instead update this file by running `bin/tapioca gem break`.

# source://break//lib/break/binding_ext.rb#3
class Binding
  include ::Break::IRB::Overrides
end

# source://break//lib/break/version.rb#3
module Break; end

# source://break//lib/break/command.rb#6
class Break::Command
  extend ::Forwardable

  # @return [Command] a new instance of Command
  #
  # source://break//lib/break/command.rb#9
  def initialize(session); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def context(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def context!(*args, **_arg1, &block); end

  # @raise [NotImplementedError]
  #
  # source://break//lib/break/command.rb#13
  def execute; end

  # source://forwardable/1.3.3/forwardable.rb#231
  def frontend(*args, **_arg1, &block); end

  private

  # Returns the value of attribute session.
  #
  # source://break//lib/break/command.rb#19
  def session; end
end

# source://break//lib/break/context.rb#4
class Break::Context
  # @return [Context] a new instance of Context
  #
  # source://break//lib/break/context.rb#8
  def initialize(*bindings, depth: T.unsafe(nil)); end

  # source://break//lib/break/context.rb#13
  def binding; end

  # Returns the value of attribute bindings.
  #
  # source://break//lib/break/context.rb#5
  def bindings; end

  # Sets the attribute bindings
  #
  # @param value the value to set the attribute bindings to.
  #
  # source://break//lib/break/context.rb#5
  def bindings=(_arg0); end

  # Returns the value of attribute depth.
  #
  # source://break//lib/break/context.rb#6
  def depth; end

  # Sets the attribute depth
  #
  # @param value the value to set the attribute depth to.
  #
  # source://break//lib/break/context.rb#6
  def depth=(_arg0); end

  # source://break//lib/break/context.rb#17
  def inspect; end
end

# source://break//lib/break/commands/down_command.rb#4
class Break::DownCommand < ::Break::TracePointCommand
  # source://break//lib/break/commands/down_command.rb#5
  def execute(*_arg0); end

  # source://break//lib/break/commands/down_command.rb#13
  def execute_trace(trace, *_arg1); end
end

# source://break//lib/break/filter.rb#4
module Break::Filter
  extend ::Break::Filter

  # Returns the value of attribute internal.
  #
  # source://break//lib/break/filter.rb#7
  def internal; end

  # @return [Boolean]
  #
  # source://break//lib/break/filter.rb#13
  def internal?(path); end

  # source://break//lib/break/filter.rb#9
  def register_internal(*paths); end
end

# source://break//lib/break/irb/frontend.rb#5
module Break::IRB; end

# source://break//lib/break/irb/commands.rb#6
class Break::IRB::Commands < ::Module
  # @return [Commands] a new instance of Commands
  #
  # source://break//lib/break/irb/commands.rb#7
  def initialize(session); end

  private

  # source://break//lib/break/irb/commands.rb#17
  def define_command(session, name, cls); end
end

# source://break//lib/break/irb/frontend.rb#6
class Break::IRB::Frontend
  # @return [Frontend] a new instance of Frontend
  #
  # source://break//lib/break/irb/frontend.rb#7
  def initialize; end

  # source://break//lib/break/irb/frontend.rb#11
  def attach(session); end

  # source://break//lib/break/irb/frontend.rb#22
  def detach; end

  # source://break//lib/break/irb/frontend.rb#30
  def notify(message); end

  # source://break//lib/break/irb/frontend.rb#26
  def where; end

  private

  # Trying to instantiate an `IRB:Irb` object with a workspace having a
  # binding coming from `BasicObject`.
  #
  # source://break//lib/break/irb/frontend.rb#50
  def safely_build_irb_instance(session, workspace); end

  # Evaling `next` is a `SyntaxError` in Ruby. Since IRB does not have
  # commands support in the lexer level, we need to call the `next` command
  # in syntactically correct way.
  #
  # source://break//lib/break/irb/frontend.rb#39
  def special_case_next_eval(irb_context); end
end

# source://break//lib/break/irb/overrides.rb#4
module Break::IRB::Overrides
  # source://break//lib/break/irb/overrides.rb#5
  def irb; end
end

# source://break//lib/break/commands/next_command.rb#4
class Break::NextCommand < ::Break::TracePointCommand
  # source://break//lib/break/commands/next_command.rb#7
  def execute_trace(trace, *_arg1); end
end

# source://break//lib/break/pry/frontend.rb#3
module Break::Pry; end

# source://break//lib/break/pry/commands.rb#4
Break::Pry::Commands = T.let(T.unsafe(nil), Pry::CommandSet)

# source://break//lib/break/pry/frontend.rb#4
class Break::Pry::Frontend
  # source://break//lib/break/pry/frontend.rb#5
  def attach(session); end

  # source://break//lib/break/pry/frontend.rb#14
  def detach; end

  # source://break//lib/break/pry/frontend.rb#24
  def notify(message); end

  # source://break//lib/break/pry/frontend.rb#18
  def where; end
end

# source://break//lib/break/pry/extensions.rb#4
module Break::Pry::PryExtensions
  # source://break//lib/break/pry/extensions.rb#7
  def initialize(options = T.unsafe(nil)); end

  # Returns the value of attribute __break_session__.
  #
  # source://break//lib/break/pry/extensions.rb#5
  def __break_session__; end

  # Sets the attribute __break_session__
  #
  # @param value the value to set the attribute __break_session__ to.
  #
  # source://break//lib/break/pry/extensions.rb#5
  def __break_session__=(_arg0); end
end

# source://break//lib/break/session.rb#4
class Break::Session
  # @return [Session] a new instance of Session
  #
  # source://break//lib/break/session.rb#8
  def initialize(binding, frontend:); end

  # source://break//lib/break/session.rb#31
  def [](key); end

  # source://break//lib/break/session.rb#35
  def []=(key, value); end

  # source://break//lib/break/session.rb#22
  def context; end

  # source://break//lib/break/session.rb#26
  def context!(*bindings, depth: T.unsafe(nil)); end

  # Returns the value of attribute contexts.
  #
  # source://break//lib/break/session.rb#5
  def contexts; end

  # source://break//lib/break/session.rb#14
  def enter; end

  # Returns the value of attribute frontend.
  #
  # source://break//lib/break/session.rb#6
  def frontend; end

  # source://break//lib/break/session.rb#18
  def leave; end
end

# source://break//lib/break/commands/step_command.rb#4
class Break::StepCommand < ::Break::TracePointCommand
  # source://break//lib/break/commands/step_command.rb#7
  def execute_trace(trace, *_arg1); end
end

# source://break//lib/break/commands/tracepoint_command.rb#4
class Break::TracePointCommand < ::Break::Command
  # @return [TracePointCommand] a new instance of TracePointCommand
  #
  # source://break//lib/break/commands/tracepoint_command.rb#13
  def initialize(*_arg0); end

  # source://break//lib/break/commands/tracepoint_command.rb#25
  def execute(*args); end

  # @raise [NotImplementedError]
  #
  # source://break//lib/break/commands/tracepoint_command.rb#35
  def execute_trace; end

  private

  # source://break//lib/break/commands/tracepoint_command.rb#41
  def context!(*args); end

  # source://break//lib/break/commands/tracepoint_command.rb#47
  def trace_events; end

  class << self
    # source://break//lib/break/commands/tracepoint_command.rb#8
    def trace(*events); end

    # Returns the value of attribute trace_events.
    #
    # source://break//lib/break/commands/tracepoint_command.rb#6
    def trace_events; end
  end
end

# source://break//lib/break/commands/up_command.rb#4
class Break::UpCommand < ::Break::TracePointCommand
  # source://break//lib/break/commands/up_command.rb#5
  def execute(*_arg0); end

  # source://break//lib/break/commands/up_command.rb#13
  def execute_trace(trace, *_arg1); end
end

# source://break//lib/break/version.rb#4
Break::VERSION = T.let(T.unsafe(nil), String)

# source://break//lib/break/commands/where_command.rb#4
class Break::WhereCommand < ::Break::Command
  # source://break//lib/break/commands/where_command.rb#5
  def execute(*_arg0); end
end

class Pry
  include ::Break::Pry::PryExtensions
  extend ::Forwardable
end
