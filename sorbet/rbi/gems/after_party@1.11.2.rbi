# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `after_party` gem.
# Please instead update this file by running `bin/tapioca gem after_party`.

# AfterParty is a moduke defined by gem after_party
#
# source://after_party//lib/after_party.rb#2
module AfterParty
  class << self
    # @yield [_self]
    # @yieldparam _self [AfterParty] the object that the method was called on
    #
    # source://after_party//lib/after_party.rb#5
    def setup; end
  end
end

# railtie is loaded from lib/after_party.rb.  So all load paths need to be relative to /lib
#
# source://after_party//lib/after_party/railtie.rb#5
class AfterParty::Railtie < ::Rails::Railtie; end

# Task Record is a persisted object recorded when a taks is run.
#
# source://after_party//lib/after_party/models/active_record/task_record.rb#3
class AfterParty::TaskRecord < ::ActiveRecord::Base
  include ::AfterParty::TaskRecord::GeneratedAttributeMethods
  include ::AfterParty::TaskRecord::GeneratedAssociationMethods

  class << self
    # source://activemodel/7.1.2/lib/active_model/validations.rb#71
    def _validators; end

    # @return [Boolean]
    #
    # source://after_party//lib/after_party/models/active_record/task_record.rb#6
    def completed_task?(version); end

    # source://activerecord/7.1.2/lib/active_record/enum.rb#167
    def defined_enums; end
  end
end

# source://after_party//lib/after_party/models/active_record/task_record.rb#0
module AfterParty::TaskRecord::GeneratedAssociationMethods; end

# source://after_party//lib/after_party/models/active_record/task_record.rb#0
module AfterParty::TaskRecord::GeneratedAttributeMethods; end

# Task Recorder is responsible for collecting pending tasks and recording their execution
#
# source://after_party//lib/after_party/models/task_recorder.rb#3
class AfterParty::TaskRecorder
  include ::ActiveModel::Naming

  # @return [TaskRecorder] a new instance of TaskRecorder
  #
  # source://after_party//lib/after_party/models/task_recorder.rb#15
  def initialize(filename = T.unsafe(nil)); end

  # Returns the value of attribute filename.
  #
  # source://after_party//lib/after_party/models/task_recorder.rb#5
  def filename; end

  # source://after_party//lib/after_party/models/task_recorder.rb#24
  def parse_filename; end

  # @return [Boolean]
  #
  # source://after_party//lib/after_party/models/task_recorder.rb#20
  def pending?; end

  # Returns the value of attribute task_name.
  #
  # source://after_party//lib/after_party/models/task_recorder.rb#5
  def task_name; end

  # Returns the value of attribute timestamp.
  #
  # source://after_party//lib/after_party/models/task_recorder.rb#5
  def timestamp; end

  class << self
    # source://after_party//lib/after_party/models/task_recorder.rb#9
    def pending_files; end
  end
end

# source://after_party//lib/after_party/models/task_recorder.rb#7
AfterParty::TaskRecorder::FILE_MASK = T.let(T.unsafe(nil), String)
