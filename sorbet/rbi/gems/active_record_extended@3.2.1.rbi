# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `active_record_extended` gem.
# Please instead update this file by running `bin/tapioca gem active_record_extended`.

# source://active_record_extended//lib/active_record_extended/query_methods/where_chain.rb#124
module ActiveRecord
  class << self
    # source://activerecord/7.0.4/lib/active_record.rb#277
    def action_on_strict_loading_violation; end

    # source://activerecord/7.0.4/lib/active_record.rb#277
    def action_on_strict_loading_violation=(_arg0); end

    # source://activerecord/7.0.4/lib/active_record.rb#270
    def application_record_class; end

    # source://activerecord/7.0.4/lib/active_record.rb#270
    def application_record_class=(_arg0); end

    # source://activerecord/7.0.4/lib/active_record.rb#213
    def async_query_executor; end

    # source://activerecord/7.0.4/lib/active_record.rb#213
    def async_query_executor=(_arg0); end

    # source://activerecord/7.0.4/lib/active_record.rb#183
    def default_timezone; end

    # source://activerecord/7.0.4/lib/active_record.rb#187
    def default_timezone=(default_timezone); end

    # source://activerecord/7.0.4/lib/active_record.rb#311
    def dump_schema_after_migration; end

    # source://activerecord/7.0.4/lib/active_record.rb#311
    def dump_schema_after_migration=(_arg0); end

    # source://activerecord/7.0.4/lib/active_record.rb#321
    def dump_schemas; end

    # source://activerecord/7.0.4/lib/active_record.rb#321
    def dump_schemas=(_arg0); end

    # source://activerecord/7.0.4/lib/active_record.rb#357
    def eager_load!; end

    # source://activerecord/7.0.4/lib/active_record.rb#296
    def error_on_ignored_order; end

    # source://activerecord/7.0.4/lib/active_record.rb#296
    def error_on_ignored_order=(_arg0); end

    # source://activerecord/7.0.4/lib/active_record/gem_version.rb#5
    def gem_version; end

    # source://activerecord/7.0.4/lib/active_record.rb#236
    def global_executor_concurrency; end

    # source://activerecord/7.0.4/lib/active_record.rb#228
    def global_executor_concurrency=(global_executor_concurrency); end

    # source://activerecord/7.0.4/lib/active_record.rb#216
    def global_thread_pool_async_query_executor; end

    # source://activerecord/7.0.4/lib/active_record.rb#240
    def index_nested_attribute_errors; end

    # source://activerecord/7.0.4/lib/active_record.rb#240
    def index_nested_attribute_errors=(_arg0); end

    # source://activerecord/7.0.4/lib/active_record.rb#171
    def lazily_load_schema_cache; end

    # source://activerecord/7.0.4/lib/active_record.rb#171
    def lazily_load_schema_cache=(_arg0); end

    # source://activerecord/7.0.4/lib/active_record.rb#180
    def legacy_connection_handling; end

    # source://activerecord/7.0.4/lib/active_record.rb#180
    def legacy_connection_handling=(_arg0); end

    # source://activerecord/7.0.4/lib/active_record.rb#258
    def maintain_test_schema; end

    # source://activerecord/7.0.4/lib/active_record.rb#258
    def maintain_test_schema=(_arg0); end

    # source://activerecord/7.0.4/lib/active_record.rb#340
    def query_transformers; end

    # source://activerecord/7.0.4/lib/active_record.rb#340
    def query_transformers=(_arg0); end

    # source://activerecord/7.0.4/lib/active_record.rb#255
    def queues; end

    # source://activerecord/7.0.4/lib/active_record.rb#255
    def queues=(_arg0); end

    # source://activerecord/7.0.4/lib/active_record.rb#200
    def reading_role; end

    # source://activerecord/7.0.4/lib/active_record.rb#200
    def reading_role=(_arg0); end

    # source://activerecord/7.0.4/lib/active_record.rb#177
    def schema_cache_ignored_tables; end

    # source://activerecord/7.0.4/lib/active_record.rb#177
    def schema_cache_ignored_tables=(_arg0); end

    # source://activerecord/7.0.4/lib/active_record.rb#288
    def schema_format; end

    # source://activerecord/7.0.4/lib/active_record.rb#288
    def schema_format=(_arg0); end

    # source://activerecord/7.0.4/lib/active_record.rb#328
    def suppress_multiple_database_warning; end

    # source://activerecord/7.0.4/lib/active_record.rb#328
    def suppress_multiple_database_warning=(_arg0); end

    # source://activerecord/7.0.4/lib/active_record.rb#302
    def timestamped_migrations; end

    # source://activerecord/7.0.4/lib/active_record.rb#302
    def timestamped_migrations=(_arg0); end

    # source://activerecord/7.0.4/lib/active_record.rb#347
    def use_yaml_unsafe_load; end

    # source://activerecord/7.0.4/lib/active_record.rb#347
    def use_yaml_unsafe_load=(_arg0); end

    # source://activerecord/7.0.4/lib/active_record.rb#248
    def verbose_query_logs; end

    # source://activerecord/7.0.4/lib/active_record.rb#248
    def verbose_query_logs=(_arg0); end

    # source://activerecord/7.0.4/lib/active_record.rb#337
    def verify_foreign_keys_for_fixtures; end

    # source://activerecord/7.0.4/lib/active_record.rb#337
    def verify_foreign_keys_for_fixtures=(_arg0); end

    # source://activerecord/7.0.4/lib/active_record/version.rb#7
    def version; end

    # source://activerecord/7.0.4/lib/active_record.rb#267
    def warn_on_records_fetched_greater_than; end

    # source://activerecord/7.0.4/lib/active_record.rb#267
    def warn_on_records_fetched_greater_than=(_arg0); end

    # source://activerecord/7.0.4/lib/active_record.rb#197
    def writing_role; end

    # source://activerecord/7.0.4/lib/active_record.rb#197
    def writing_role=(_arg0); end

    # source://activerecord/7.0.4/lib/active_record.rb#354
    def yaml_column_permitted_classes; end

    # source://activerecord/7.0.4/lib/active_record.rb#354
    def yaml_column_permitted_classes=(_arg0); end
  end
end

class ActiveRecord::Base
  include ::ActiveModel::ForbiddenAttributesProtection
  include ::ActiveModel::AttributeAssignment
  include ::ActiveModel::Serialization
  extend ::ActiveRecordExtended::Patch::RelationPatch::QueryDelegation
end

class ActiveRecord::PredicateBuilder::ArrayHandler
  include ::ActiveRecordExtended::Patch::ArrayHandlerPatch
end

# source://active_record_extended//lib/active_record_extended/query_methods/where_chain.rb#125
module ActiveRecord::QueryMethods
  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#317
  def _select!(*fields); end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#845
  def and(other); end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#853
  def and!(other); end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#1219
  def annotate(*args); end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#1225
  def annotate!(*args); end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#139
  def annotate_values; end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#143
  def annotate_values=(value); end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#1280
  def arel(aliases = T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#1284
  def construct_join_dependency(associations, join_type); end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#1038
  def create_with(value); end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#1042
  def create_with!(value); end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#139
  def create_with_value; end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#143
  def create_with_value=(value); end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#1102
  def distinct(value = T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#1107
  def distinct!(value = T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#139
  def distinct_value; end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#143
  def distinct_value=(value); end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#207
  def eager_load(*args); end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#212
  def eager_load!(*args); end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#139
  def eager_load_values; end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#143
  def eager_load_values=(value); end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#1261
  def excluding(*records); end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#1273
  def excluding!(records); end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#1148
  def extending(*modules, &block); end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#1156
  def extending!(*modules, &block); end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#139
  def extending_values; end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#143
  def extending_values=(value); end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#139
  def extensions; end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#240
  def extract_associated(association); end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#1083
  def from(value, subquery_name = T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#1087
  def from!(value, subquery_name = T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#139
  def from_clause; end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#143
  def from_clause=(value); end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#363
  def group(*args); end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#368
  def group!(*args); end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#139
  def group_values; end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#143
  def group_values=(value); end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#903
  def having(opts, *rest); end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#907
  def having!(opts, *rest); end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#139
  def having_clause; end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#143
  def having_clause=(value); end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#447
  def in_order_of(column, values); end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#191
  def includes(*args); end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#196
  def includes!(*args); end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#139
  def includes_values; end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#143
  def includes_values=(value); end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#811
  def invert_where; end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#815
  def invert_where!; end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#586
  def joins(*args); end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#591
  def joins!(*args); end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#139
  def joins_values; end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#143
  def joins_values=(value); end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#601
  def left_joins(*args); end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#601
  def left_outer_joins(*args); end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#607
  def left_outer_joins!(*args); end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#139
  def left_outer_joins_values; end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#143
  def left_outer_joins_values=(value); end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#917
  def limit(value); end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#921
  def limit!(value); end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#139
  def limit_value; end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#143
  def limit_value=(value); end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#944
  def lock(locks = T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#948
  def lock!(locks = T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#139
  def lock_value; end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#143
  def lock_value=(value); end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#987
  def none; end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#991
  def none!; end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#933
  def offset(value); end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#937
  def offset!(value); end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#139
  def offset_value; end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#143
  def offset_value=(value); end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#1177
  def optimizer_hints(*args); end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#1182
  def optimizer_hints!(*args); end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#139
  def optimizer_hints_values; end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#143
  def optimizer_hints_values=(value); end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#877
  def or(other); end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#885
  def or!(other); end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#425
  def order(*args); end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#433
  def order!(*args); end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#139
  def order_values; end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#143
  def order_values=(value); end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#221
  def preload(*args); end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#226
  def preload!(*args); end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#139
  def preload_values; end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#143
  def preload_values=(value); end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#1001
  def readonly(value = T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#1005
  def readonly!(value = T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#139
  def readonly_value; end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#143
  def readonly_value=(value); end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#254
  def references(*table_names); end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#259
  def references!(*table_names); end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#139
  def references_values; end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#143
  def references_values=(value); end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#471
  def reorder(*args); end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#479
  def reorder!(*args); end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#139
  def reordering_value; end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#143
  def reordering_value=(value); end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#332
  def reselect(*args); end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#338
  def reselect!(*args); end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#1190
  def reverse_order; end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#1194
  def reverse_order!; end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#139
  def reverse_order_value; end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#143
  def reverse_order_value=(value); end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#773
  def rewhere(conditions); end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#304
  def select(*fields); end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#139
  def select_values; end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#143
  def select_values=(value); end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#1205
  def skip_preloading!; end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#1200
  def skip_query_cache!(value = T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#139
  def skip_query_cache_value; end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#143
  def skip_query_cache_value=(value); end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#1016
  def strict_loading(value = T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#1020
  def strict_loading!(value = T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#139
  def strict_loading_value; end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#143
  def strict_loading_value=(value); end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#831
  def structurally_compatible?(other); end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#1231
  def uniq!(name); end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#524
  def unscope(*args); end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#529
  def unscope!(*args); end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#139
  def unscope_values; end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#143
  def unscope_values=(value); end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#745
  def where(*args); end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#755
  def where!(opts, *rest); end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#139
  def where_clause; end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#143
  def where_clause=(value); end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#1261
  def without(*records); end

  protected

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#1299
  def build_having_clause(opts, rest = T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#1291
  def build_subquery(subquery_alias, select_value); end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#1299
  def build_where_clause(opts, rest = T.unsafe(nil)); end

  private

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#1520
  def arel_column(field); end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#1503
  def arel_columns(columns); end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#1351
  def assert_mutability!; end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#1356
  def build_arel(aliases = T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#1384
  def build_cast_value(name, value); end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#1388
  def build_from; end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#1421
  def build_join_buckets; end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#1340
  def build_join_dependencies; end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#1471
  def build_joins(join_sources, aliases = T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#1582
  def build_order(arel); end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#1493
  def build_select(arel); end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#1702
  def check_if_method_has_arguments!(method_name, args, message = T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#1639
  def column_references(order_args); end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#1571
  def does_not_support_reverse?(order); end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#1334
  def each_join_dependencies(join_dependencies = T.unsafe(nil), &block); end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#1327
  def lookup_table_klass_from_join_dependencies(table_name); end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#1652
  def order_column(field); end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#1602
  def preprocess_order_args(order_args); end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#1662
  def resolve_arel_attributes(attrs); end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#1542
  def reverse_sql_order(order_query); end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#1633
  def sanitize_order_arguments(order_args); end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#1403
  def select_association_list(associations, stashed_joins = T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#1718
  def structurally_incompatible_values_for(other); end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#1536
  def table_name_matches?(from); end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#1590
  def validate_order_args(args); end
end

# source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#124
ActiveRecord::QueryMethods::FROZEN_EMPTY_ARRAY = T.let(T.unsafe(nil), Array)

# source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#125
ActiveRecord::QueryMethods::FROZEN_EMPTY_HASH = T.let(T.unsafe(nil), Hash)

# source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#1713
ActiveRecord::QueryMethods::STRUCTURAL_VALUE_METHODS = T.let(T.unsafe(nil), Array)

# source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#1587
ActiveRecord::QueryMethods::VALID_DIRECTIONS = T.let(T.unsafe(nil), Set)

# source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#487
ActiveRecord::QueryMethods::VALID_UNSCOPING_VALUES = T.let(T.unsafe(nil), Set)

# source://active_record_extended//lib/active_record_extended/query_methods/where_chain.rb#126
class ActiveRecord::QueryMethods::WhereChain
  include ::ActiveRecordExtended::QueryMethods::AnyOf
  include ::ActiveRecordExtended::QueryMethods::Inet
  include ::ActiveRecordExtended::QueryMethods::WhereChain

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#16
  def initialize(scope); end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#76
  def associated(*associations); end

  # source://active_record_extended//lib/active_record_extended/query_methods/where_chain.rb#129
  def build_where_chain(opts, rest, &block); end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#104
  def missing(*associations); end

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#50
  def not(opts, *rest); end

  private

  # source://activerecord/7.0.4/lib/active_record/relation/query_methods.rb#115
  def scope_association_reflection(association); end
end

class ActiveRecord::Relation
  include ::ActiveRecordExtended::QueryMethods::Unionize
  include ::ActiveRecordExtended::QueryMethods::Json
  include ::ActiveRecordExtended::Patch::RelationPatch::ArelBuildPatch
  include ::ActiveRecordExtended::QueryMethods::Either
  include ::ActiveRecordExtended::QueryMethods::FosterSelect
  include ::ActiveRecordExtended::QueryMethods::Window
  include ::ActiveRecordExtended::QueryMethods::WithCTE
  include ::ActiveModel::ForbiddenAttributesProtection
end

class ActiveRecord::Relation::Merger
  include ::ActiveRecordExtended::Patch::RelationPatch::Merger
end

class ActiveRecord::Relation::WhereClause
  include ::ActiveRecordExtended::Patch::WhereClausePatch
end

# source://activerecord/7.0.4/lib/active_record/errors.rb#347
ActiveRecord::UnknownAttributeError = ActiveModel::UnknownAttributeError

# source://active_record_extended//lib/active_record_extended/version.rb#3
module ActiveRecordExtended
  extend ::ActiveSupport::Autoload

  class << self
    # source://active_record_extended//lib/active_record_extended.rb#50
    def eager_load!; end
  end
end

# source://active_record_extended//lib/active_record_extended.rb#13
ActiveRecordExtended::AR_VERSION_GTE_6_1 = T.let(T.unsafe(nil), TrueClass)

# source://active_record_extended//lib/active_record_extended.rb#24
module ActiveRecordExtended::Patch
  extend ::ActiveSupport::Autoload
end

# source://active_record_extended//lib/active_record_extended/patch/array_handler_patch.rb#8
module ActiveRecordExtended::Patch::ArrayHandlerPatch
  # source://active_record_extended//lib/active_record_extended/patch/array_handler_patch.rb#9
  def call(attribute, value); end
end

# source://active_record_extended//lib/active_record_extended/patch/relation_patch.rb#5
module ActiveRecordExtended::Patch::RelationPatch; end

# source://active_record_extended//lib/active_record_extended/patch/relation_patch.rb#67
module ActiveRecordExtended::Patch::RelationPatch::ArelBuildPatch
  # source://active_record_extended//lib/active_record_extended/patch/relation_patch.rb#68
  def build_arel(*aliases); end
end

# source://active_record_extended//lib/active_record_extended/patch/relation_patch.rb#19
module ActiveRecordExtended::Patch::RelationPatch::Merger
  # source://active_record_extended//lib/active_record_extended/patch/relation_patch.rb#20
  def merge; end

  # source://active_record_extended//lib/active_record_extended/patch/relation_patch.rb#41
  def merge_ctes!; end

  # source://active_record_extended//lib/active_record_extended/patch/relation_patch.rb#27
  def merge_union!; end

  # source://active_record_extended//lib/active_record_extended/patch/relation_patch.rb#35
  def merge_windows!; end

  private

  # Merge other's with_values one at a time to ensure materialized keys are set properly
  #
  # source://active_record_extended//lib/active_record_extended/patch/relation_patch.rb#52
  def merge_by_values(relation, other); end
end

# source://active_record_extended//lib/active_record_extended/patch/relation_patch.rb#6
module ActiveRecordExtended::Patch::RelationPatch::QueryDelegation
  # source://active_record_extended//lib/active_record_extended/patch/relation_patch.rb#16
  def define_window(*_arg0, **_arg1, &_arg2); end

  # source://active_record_extended//lib/active_record_extended/patch/relation_patch.rb#16
  def either_join(*_arg0, **_arg1, &_arg2); end

  # source://active_record_extended//lib/active_record_extended/patch/relation_patch.rb#16
  def either_joins(*_arg0, **_arg1, &_arg2); end

  # source://active_record_extended//lib/active_record_extended/patch/relation_patch.rb#16
  def either_order(*_arg0, **_arg1, &_arg2); end

  # source://active_record_extended//lib/active_record_extended/patch/relation_patch.rb#16
  def either_orders(*_arg0, **_arg1, &_arg2); end

  # source://active_record_extended//lib/active_record_extended/patch/relation_patch.rb#16
  def foster_select(*_arg0, **_arg1, &_arg2); end

  # source://active_record_extended//lib/active_record_extended/patch/relation_patch.rb#16
  def json_build_literal(*_arg0, **_arg1, &_arg2); end

  # source://active_record_extended//lib/active_record_extended/patch/relation_patch.rb#16
  def json_build_object(*_arg0, **_arg1, &_arg2); end

  # source://active_record_extended//lib/active_record_extended/patch/relation_patch.rb#16
  def jsonb_build_literal(*_arg0, **_arg1, &_arg2); end

  # source://active_record_extended//lib/active_record_extended/patch/relation_patch.rb#16
  def jsonb_build_object(*_arg0, **_arg1, &_arg2); end

  # source://active_record_extended//lib/active_record_extended/patch/relation_patch.rb#16
  def select_row_to_json(*_arg0, **_arg1, &_arg2); end

  # source://active_record_extended//lib/active_record_extended/patch/relation_patch.rb#16
  def select_window(*_arg0, **_arg1, &_arg2); end

  # source://active_record_extended//lib/active_record_extended/patch/relation_patch.rb#16
  def union(*_arg0, **_arg1, &_arg2); end

  # source://active_record_extended//lib/active_record_extended/patch/relation_patch.rb#16
  def union_all(*_arg0, **_arg1, &_arg2); end

  # source://active_record_extended//lib/active_record_extended/patch/relation_patch.rb#16
  def union_except(*_arg0, **_arg1, &_arg2); end

  # source://active_record_extended//lib/active_record_extended/patch/relation_patch.rb#16
  def union_intersect(*_arg0, **_arg1, &_arg2); end

  # source://active_record_extended//lib/active_record_extended/patch/relation_patch.rb#16
  def with(*_arg0, **_arg1, &_arg2); end
end

# source://active_record_extended//lib/active_record_extended/patch/relation_patch.rb#7
ActiveRecordExtended::Patch::RelationPatch::QueryDelegation::AR_EX_QUERY_METHODS = T.let(T.unsafe(nil), Array)

# source://active_record_extended//lib/active_record_extended/patch/where_clause_patch.rb#5
module ActiveRecordExtended::Patch::WhereClausePatch
  # source://active_record_extended//lib/active_record_extended/patch/where_clause_patch.rb#6
  def modified_predicates(&block); end
end

# source://active_record_extended//lib/active_record_extended.rb#34
module ActiveRecordExtended::QueryMethods
  extend ::ActiveSupport::Autoload
end

# source://active_record_extended//lib/active_record_extended/query_methods/any_of.rb#5
module ActiveRecordExtended::QueryMethods::AnyOf
  # source://active_record_extended//lib/active_record_extended/query_methods/any_of.rb#6
  def any_of(*queries); end

  # source://active_record_extended//lib/active_record_extended/query_methods/any_of.rb#13
  def none_of(*queries); end

  private

  # source://active_record_extended//lib/active_record_extended/query_methods/any_of.rb#30
  def build_query(queries); end

  # source://active_record_extended//lib/active_record_extended/query_methods/any_of.rb#39
  def construct_query_mappings(queries); end

  # source://active_record_extended//lib/active_record_extended/query_methods/any_of.rb#55
  def generate_where_clause(query); end

  # source://active_record_extended//lib/active_record_extended/query_methods/any_of.rb#22
  def hash_map_queries(queries); end

  # source://active_record_extended//lib/active_record_extended/query_methods/any_of.rb#51
  def translate_reference(reference); end
end

# source://active_record_extended//lib/active_record_extended/query_methods/either.rb#5
module ActiveRecordExtended::QueryMethods::Either
  # source://active_record_extended//lib/active_record_extended/query_methods/either.rb#9
  def either_join(initial_association, fallback_association); end

  # source://active_record_extended//lib/active_record_extended/query_methods/either.rb#9
  def either_joins(initial_association, fallback_association); end

  # source://active_record_extended//lib/active_record_extended/query_methods/either.rb#17
  def either_order(direction, **associations_and_columns); end

  # source://active_record_extended//lib/active_record_extended/query_methods/either.rb#17
  def either_orders(direction, **associations_and_columns); end

  private

  # source://active_record_extended//lib/active_record_extended/query_methods/either.rb#39
  def map_columns_to_tables(associations_and_columns); end

  # source://active_record_extended//lib/active_record_extended/query_methods/either.rb#30
  def sort_order_sql(dir); end

  # source://active_record_extended//lib/active_record_extended/query_methods/either.rb#34
  def xor_field_options(options); end

  # source://active_record_extended//lib/active_record_extended/query_methods/either.rb#50
  def xor_field_options_for_associations(associations); end

  # source://active_record_extended//lib/active_record_extended/query_methods/either.rb#26
  def xor_field_sql(options); end
end

# source://active_record_extended//lib/active_record_extended/query_methods/either.rb#7
ActiveRecordExtended::QueryMethods::Either::XOR_FIELD_KEYS = T.let(T.unsafe(nil), Array)

# source://active_record_extended//lib/active_record_extended/query_methods/either.rb#6
ActiveRecordExtended::QueryMethods::Either::XOR_FIELD_SQL = T.let(T.unsafe(nil), String)

# source://active_record_extended//lib/active_record_extended/query_methods/foster_select.rb#5
module ActiveRecordExtended::QueryMethods::FosterSelect
  # source://active_record_extended//lib/active_record_extended/query_methods/foster_select.rb#110
  def _foster_select!(*args); end

  # @raise [ArgumentError]
  #
  # source://active_record_extended//lib/active_record_extended/query_methods/foster_select.rb#104
  def foster_select(*args); end
end

# source://active_record_extended//lib/active_record_extended/query_methods/foster_select.rb#6
class ActiveRecordExtended::QueryMethods::FosterSelect::SelectHelper
  include ::ActiveRecordExtended::Utilities::Support
  include ::ActiveRecordExtended::Utilities::OrderBy

  # @return [SelectHelper] a new instance of SelectHelper
  #
  # source://active_record_extended//lib/active_record_extended/query_methods/foster_select.rb#12
  def initialize(scope); end

  # source://active_record_extended//lib/active_record_extended/query_methods/foster_select.rb#16
  def build_foster_select(*args); end

  private

  # Turn a hash chain into a query statement:
  # Example: hash_to_dot_notation(table_name: :col_name) #=> "table_name.col_name"
  #
  # source://active_record_extended//lib/active_record_extended/query_methods/foster_select.rb#65
  def hash_to_dot_notation(column); end

  # Assumes that the first element in the array is the source/target column.
  # Example
  # process_array_options!([:col_name], :my_alias_name)
  #    #=> SELECT ([:col_name:]) AS "my_alias_name", ...
  #
  # source://active_record_extended//lib/active_record_extended/query_methods/foster_select.rb#42
  def process_array!(array_of_options, alias_name); end

  # Processes options that come in as Hash elements
  # Examples:
  # process_hash_options!({ memberships: :price, cast_with: :agg_array_distinct }, :past_purchases)
  #  #=> SELECT (ARRAY_AGG(DISTINCT members.price)) AS past_purchases, ...
  #
  # source://active_record_extended//lib/active_record_extended/query_methods/foster_select.rb#53
  def process_hash!(hash_of_options, alias_name); end

  # Add's select statement values to the current relation, select statement lists
  #
  # source://active_record_extended//lib/active_record_extended/query_methods/foster_select.rb#77
  def select!(query, alias_name = T.unsafe(nil), **options); end

  # Wraps the query with the requested query method
  # Example:
  #   to_casted_query("memberships.cost", :total_revenue, :sum)
  #    #=> SELECT (SUM(memberships.cost)) AS total_revenue
  #
  # source://active_record_extended//lib/active_record_extended/query_methods/foster_select.rb#86
  def to_casted_query(query, alias_name, **options); end
end

# source://active_record_extended//lib/active_record_extended/query_methods/foster_select.rb#10
ActiveRecordExtended::QueryMethods::FosterSelect::SelectHelper::AGGREGATE_ONE_LINERS = T.let(T.unsafe(nil), Regexp)

# source://active_record_extended//lib/active_record_extended/query_methods/inet.rb#5
module ActiveRecordExtended::QueryMethods::Inet
  # Finds matching inet column records that fall within a given submasked IP range
  #
  # Column(inet) << "127.0.0.1/24"
  #
  # User.where.inet_contained_within(ip: "127.0.0.1/16")
  #  #=> "SELECT \"users\".* FROM \"users\" WHERE \"users\".\"ip\" << '127.0.0.1/16'"
  #
  # User.where.inet_contained_within(ip: IPAddr.new("192.168.2.0/24"))
  #  #=> "SELECT \"users\".* FROM \"users\" WHERE \"users\".\"ip\" << '192.168.2.0/24'"
  #
  # source://active_record_extended//lib/active_record_extended/query_methods/inet.rb#16
  def inet_contained_within(opts, *rest); end

  # Finds matching inet column records that fall within a given submasked IP range and also finds records that also
  # contain a submasking field that fall within range too.
  #
  # Column(inet) <<= "127.0.0.1/24"
  #
  # User.where.inet_contained_within_or_equals(ip: "127.0.0.1/16")
  #  #=> "SELECT \"users\".* FROM \"users\" WHERE \"users\".\"ip\" <<= '127.0.0.44/32'"
  #
  # User.where.inet_contained_within_or_equals(ip: IPAddr.new("192.168.2.0/24"))
  #  #=> "SELECT \"users\".* FROM \"users\" WHERE \"users\".\"ip\" <<= '192.168.2.0/24'"
  #
  # source://active_record_extended//lib/active_record_extended/query_methods/inet.rb#31
  def inet_contained_within_or_equals(opts, *rest); end

  # Strictly finds records that contain a submask and the supplied IP address falls within its range.
  #
  # Column(inet) >>= "127.0.0.1"
  #
  # User.where.inet_contained_within_or_equals(ip: "127.0.255.255")
  #  #=> "SELECT \"users\".* FROM \"users\" WHERE \"users\".\"ip\" >> '127.0.255.255'"
  #
  # User.where.inet_contained_within_or_equals(ip: IPAddr.new("127.0.0.255"))
  #  #=> "SELECT \"users\".* FROM \"users\" WHERE \"users\".\"ip\" >> '127.0.0.255/32'"
  #
  # source://active_record_extended//lib/active_record_extended/query_methods/inet.rb#59
  def inet_contains(opts, *rest); end

  # Finds records that contain a submask and the supplied IP address falls within its range.
  #
  # Column(inet) >>= "127.0.0.1/24"
  #
  # User.where.inet_contained_within_or_equals(ip: "127.0.255.255")
  #  #=> "SELECT \"users\".* FROM \"users\" WHERE \"users\".\"ip\" >>= '127.0.255.255'"
  #
  # User.where.inet_contained_within_or_equals(ip: IPAddr.new("127.0.0.255"))
  #  #=> "SELECT \"users\".* FROM \"users\" WHERE \"users\".\"ip\" >>= '127.0.0.255/32'"
  #
  # source://active_record_extended//lib/active_record_extended/query_methods/inet.rb#45
  def inet_contains_or_equals(opts, *rest); end

  # This method is a combination of `inet_contains` and `inet_contained_within`
  #
  # Finds records that are contained within a given submask. And will also find records where their submask is also
  # contains a given IP or IP submask.
  #
  # Column(inet) && "127.0.0.1/28"
  #
  # User.where.inet_contains_or_is_contained_by(ip: "127.0.255.255/28")
  #  #=> "SELECT \"users\".* FROM \"users\" WHERE \"users\".\"ip\" && '127.0.255.255/28'"
  #
  # User.where.inet_contains_or_is_contained_by(ip: IPAddr.new("127.0.0.255"))
  #  #=> "SELECT \"users\".* FROM \"users\" WHERE \"users\".\"ip\" && '127.0.0.255/32'"
  #
  # source://active_record_extended//lib/active_record_extended/query_methods/inet.rb#76
  def inet_contains_or_is_contained_within(opts, *rest); end
end

# source://active_record_extended//lib/active_record_extended/query_methods/json.rb#5
module ActiveRecordExtended::QueryMethods::Json
  # Appends a hash literal to the calling relations response
  #
  # Arguments: Requires an Array or Hash set of values
  #
  # Options:
  #
  #  - as: [Symbol or String] (default="results"): What the column will be aliased to
  #
  # Example:
  #  - Supplying inputs as a Hash
  #      query = User.json_build_literal(number: 1, last_name: "json", pi: 3.14)
  #      query.take.results #=> { "number" => 1, "last_name" => "json", "pi" => 3.14 }
  #
  #  - Supplying inputs as an Array
  #
  #      query = User.json_build_literal(:number, 1, :last_name, "json", :pi, 3.14)
  #      query.take.results #=> { "number" => 1, "last_name" => "json", "pi" => 3.14 }
  #
  # source://active_record_extended//lib/active_record_extended/query_methods/json.rb#318
  def json_build_literal(*args); end

  # Creates a json response object that will convert all subquery results into a json compatible response
  #
  # Arguments:
  #   key: [Symbol or String]: What should this response return as
  #   from: [String, Arel, or ActiveRecord::Relation] : A subquery that can be nested into the top-level from clause
  #
  # Options:
  #   - as: [Symbol or String] (default="results"): What the column will be aliased to
  #
  #
  #   - value: [Symbol or String] (defaults=[key]): How the response should handel the json value return
  #
  # Example:
  #
  #   - Generic example:
  #
  #   subquery = Group.select(:name, :category_id).where("user_id = users.id")
  #   User.select(:name, email).select_row_to_json(subquery, as: :users_groups, cast_with: :array)
  #     #=> [<#User name:.., email:.., users_groups: [{ name: .., category_id: .. }, ..]]
  #
  #  - Setting a custom value:
  #
  #   Before:
  #       subquery = User.select(:name).where(id: 100..110).group(:name)
  #       User.build_json_object(:gang_members, subquery).take.results["gang_members"] #=> nil
  #
  #   After:
  #    User.build_json_object(:gang_members, subquery, value: "COALESCE(array_agg(\"gang_members\"), 'BANG!')")
  #        .take
  #        .results["gang_members"] #=> "BANG!"
  #
  # source://active_record_extended//lib/active_record_extended/query_methods/json.rb#287
  def json_build_object(key, from, **options); end

  # source://active_record_extended//lib/active_record_extended/query_methods/json.rb#322
  def jsonb_build_literal(*args); end

  # source://active_record_extended//lib/active_record_extended/query_methods/json.rb#293
  def jsonb_build_object(key, from, **options); end

  # Appends a select statement that contains a subquery that is converted to a json response
  #
  # Arguments:
  #   - from: [String, Arel, or ActiveRecord::Relation] A subquery that can be nested into a ROW_TO_JSON clause
  #
  # Options:
  #   - as: [Symbol or String] (default="results"): What the column will be aliased to
  #
  #   - key: [Symbol or String] (default=[random letter]) What the row clause will be set as.
  #         - This is useful if you would like to add additional mid-level clauses (see mid-level scope example)
  #
  #   - cast_with [Symbol or Array of symbols]: Actions to transform your query
  #     * :to_jsonb
  #     * :array
  #     * :array_agg (including just :array with this option will favor :array_agg)
  #     * :distinct  (auto applies :array_agg & :to_jsonb)
  #
  #   - order_by [Symbol or hash]: Applies an ordering operation (similar to ActiveRecord #order)
  #     - NOTE: this option will be ignored if you need to order a DISTINCT Aggregated Array,
  #             since postgres will thrown an error.
  #
  #
  #
  # Examples:
  #   subquery = Group.select(:name, :category_id).where("user_id = users.id")
  #   User.select(:name, email).select_row_to_json(subquery, as: :users_groups, cast_with: :array)
  #     #=> [<#User name:.., email:.., users_groups: [{ name: .., category_id: .. }, ..]]
  #
  #  - Adding mid-level scopes:
  #
  #   subquery = Group.select(:name, :category_id)
  #   User.select_row_to_json(subquery, key: :group, cast_with: :array) do |scope|
  #     scope.where(group: { name: "Nerd Core" })
  #   end
  #    #=>  ```sql
  #       SELECT ARRAY(
  #             SELECT ROW_TO_JSON("group")
  #             FROM(SELECT name, category_id FROM groups) AS group
  #             WHERE group.name = 'Nerd Core'
  #       )
  #    ```
  #
  #
  # - Array of JSONB objects
  #
  #   subquery = Group.select(:name, :category_id)
  #   User.select_row_to_json(subquery, key: :group, cast_with: [:array, :to_jsonb]) do |scope|
  #     scope.where(group: { name: "Nerd Core" })
  #   end
  #   #=>  ```sql
  #       SELECT ARRAY(
  #             SELECT TO_JSONB(ROW_TO_JSON("group"))
  #             FROM(SELECT name, category_id FROM groups) AS group
  #             WHERE group.name = 'Nerd Core'
  #       )
  #   ```
  #
  # - Distinct Aggregated Array
  #
  #   subquery = Group.select(:name, :category_id)
  #   User.select_row_to_json(subquery, key: :group, cast_with: [:array_agg, :distinct]) do |scope|
  #     scope.where(group: { name: "Nerd Core" })
  #   end
  #   #=>  ```sql
  #      SELECT ARRAY_AGG(DISTINCT (
  #            SELECT TO_JSONB(ROW_TO_JSON("group"))
  #            FROM(SELECT name, category_id FROM groups) AS group
  #            WHERE group.name = 'Nerd Core'
  #      ))
  #   ```
  #
  # - Ordering a Non-aggregated Array
  #
  #  subquery = Group.select(:name, :category_id)
  #  User.select_row_to_json(subquery, key: :group, cast_with: :array, order_by: { group: { name: :desc } })
  #  #=>  ```sql
  #     SELECT ARRAY(
  #           SELECT ROW_TO_JSON("group")
  #           FROM(SELECT name, category_id FROM groups) AS group
  #           ORDER BY group.name DESC
  #     )
  #  ```
  #
  # - Ordering an Aggregated Array
  #
  #  Subquery = Group.select(:name, :category_id)
  #  User
  #   .joins(:people_groups)
  #  .select_row_to_json(
  #     subquery,
  #     key: :group,
  #     cast_with: :array_agg,
  #     order_by: { people_groups: :category_id }
  #   )
  #   #=>  ```sql
  #     SELECT ARRAY_AGG((
  #           SELECT ROW_TO_JSON("group")
  #           FROM(SELECT name, category_id FROM groups) AS group
  #           ORDER BY group.name DESC
  #     ) ORDER BY people_groups.category_id ASC)
  #   ```
  #
  # @raise [ArgumentError]
  #
  # source://active_record_extended//lib/active_record_extended/query_methods/json.rb#248
  def select_row_to_json(from = T.unsafe(nil), **options, &block); end
end

# source://active_record_extended//lib/active_record_extended/query_methods/json.rb#6
ActiveRecordExtended::QueryMethods::Json::JSON_QUERY_METHODS = T.let(T.unsafe(nil), Array)

# source://active_record_extended//lib/active_record_extended/query_methods/json.rb#14
class ActiveRecordExtended::QueryMethods::Json::JsonChain
  include ::ActiveRecordExtended::Utilities::Support
  include ::ActiveRecordExtended::Utilities::OrderBy

  # @return [JsonChain] a new instance of JsonChain
  #
  # source://active_record_extended//lib/active_record_extended/query_methods/json.rb#22
  def initialize(scope); end

  # source://active_record_extended//lib/active_record_extended/query_methods/json.rb#41
  def json_build_literal!(*args); end

  # source://active_record_extended//lib/active_record_extended/query_methods/json.rb#31
  def json_build_object!(*args); end

  # source://active_record_extended//lib/active_record_extended/query_methods/json.rb#46
  def jsonb_build_literal!(*args); end

  # source://active_record_extended//lib/active_record_extended/query_methods/json.rb#36
  def jsonb_build_object!(*args); end

  # source://active_record_extended//lib/active_record_extended/query_methods/json.rb#26
  def row_to_json!(**args, &block); end

  private

  # source://active_record_extended//lib/active_record_extended/query_methods/json.rb#53
  def build_json_literal(arel_klass, values:, col_alias: T.unsafe(nil)); end

  # source://active_record_extended//lib/active_record_extended/query_methods/json.rb#60
  def build_json_object(arel_klass, from:, key: T.unsafe(nil), value: T.unsafe(nil), col_alias: T.unsafe(nil)); end

  # source://active_record_extended//lib/active_record_extended/query_methods/json.rb#74
  def build_row_to_json(from:, **options, &block); end

  # source://active_record_extended//lib/active_record_extended/query_methods/json.rb#132
  def casting_options(cast_with); end

  # source://active_record_extended//lib/active_record_extended/query_methods/json.rb#101
  def json_object_options(args, except: T.unsafe(nil), only: T.unsafe(nil)); end

  # source://active_record_extended//lib/active_record_extended/query_methods/json.rb#87
  def wrap_row_to_json(dummy_table, options); end
end

# source://active_record_extended//lib/active_record_extended/query_methods/json.rb#20
ActiveRecordExtended::QueryMethods::Json::JsonChain::ARRAY_OPTIONS = T.let(T.unsafe(nil), Array)

# source://active_record_extended//lib/active_record_extended/query_methods/json.rb#18
ActiveRecordExtended::QueryMethods::Json::JsonChain::DEFAULT_ALIAS = T.let(T.unsafe(nil), String)

# source://active_record_extended//lib/active_record_extended/query_methods/json.rb#19
ActiveRecordExtended::QueryMethods::Json::JsonChain::TO_JSONB_OPTIONS = T.let(T.unsafe(nil), Set)

# source://active_record_extended//lib/active_record_extended/query_methods/unionize.rb#5
module ActiveRecordExtended::QueryMethods::Unionize
  # source://active_record_extended//lib/active_record_extended/query_methods/unionize.rb#109
  def order_union(opts = T.unsafe(nil), *args); end

  # source://active_record_extended//lib/active_record_extended/query_methods/unionize.rb#109
  def reorder_union(opts = T.unsafe(nil), *args); end

  # source://active_record_extended//lib/active_record_extended/query_methods/unionize.rb#136
  def to_nice_union_sql(color = T.unsafe(nil)); end

  # Will construct *Just* the union SQL statement that was been built thus far
  #
  # source://active_record_extended//lib/active_record_extended/query_methods/unionize.rb#130
  def to_union_sql; end

  # source://active_record_extended//lib/active_record_extended/query_methods/unionize.rb#109
  def union(opts = T.unsafe(nil), *args); end

  # source://active_record_extended//lib/active_record_extended/query_methods/unionize.rb#121
  def union!(opts = T.unsafe(nil), *args, chain_method: T.unsafe(nil)); end

  # source://active_record_extended//lib/active_record_extended/query_methods/unionize.rb#109
  def union_all(opts = T.unsafe(nil), *args); end

  # source://active_record_extended//lib/active_record_extended/query_methods/unionize.rb#109
  def union_as(opts = T.unsafe(nil), *args); end

  # source://active_record_extended//lib/active_record_extended/query_methods/unionize.rb#109
  def union_except(opts = T.unsafe(nil), *args); end

  # source://active_record_extended//lib/active_record_extended/query_methods/unionize.rb#109
  def union_intersect(opts = T.unsafe(nil), *args); end

  # source://active_record_extended//lib/active_record_extended/query_methods/unionize.rb#94
  def union_operations; end

  # source://active_record_extended//lib/active_record_extended/query_methods/unionize.rb#104
  def union_operations=(value); end

  # source://active_record_extended//lib/active_record_extended/query_methods/unionize.rb#100
  def union_operations?; end

  # source://active_record_extended//lib/active_record_extended/query_methods/unionize.rb#94
  def union_ordering_values; end

  # source://active_record_extended//lib/active_record_extended/query_methods/unionize.rb#104
  def union_ordering_values=(value); end

  # source://active_record_extended//lib/active_record_extended/query_methods/unionize.rb#100
  def union_ordering_values?; end

  # source://active_record_extended//lib/active_record_extended/query_methods/unionize.rb#94
  def union_values; end

  # source://active_record_extended//lib/active_record_extended/query_methods/unionize.rb#104
  def union_values=(value); end

  # source://active_record_extended//lib/active_record_extended/query_methods/unionize.rb#100
  def union_values?; end

  # source://active_record_extended//lib/active_record_extended/query_methods/unionize.rb#75
  def unionize_storage; end

  # source://active_record_extended//lib/active_record_extended/query_methods/unionize.rb#79
  def unionize_storage!; end

  # source://active_record_extended//lib/active_record_extended/query_methods/unionize.rb#94
  def unionized_name; end

  # source://active_record_extended//lib/active_record_extended/query_methods/unionize.rb#104
  def unionized_name=(value); end

  # source://active_record_extended//lib/active_record_extended/query_methods/unionize.rb#100
  def unionized_name?; end

  protected

  # Apply's the allowed ORDER BY to the end of the final union statement
  #
  # Note: This will only apply at the very end of the union statements. Not nested ones.
  #       (I guess you could double nest a union and apply it, but that would be dumb)
  #
  # Example:
  #   User.union(User.select(:id).where(id: 8))
  #       .union(User.select(:id).where(id: 50))
  #       .union.order(id: :desc)
  #  #=> [<#User id: 50>, <#User id: 8>]
  #
  #   ```sql
  #   SELECT users.*
  #   FROM(
  #       (SELECT users.id FROM users WHERE id = 8)
  #       UNION
  #       (SELECT users.id FROM users WHERE id = 50)
  #       ORDER BY id DESC
  #    ) users;
  #   ```
  #
  # source://active_record_extended//lib/active_record_extended/query_methods/unionize.rb#221
  def apply_union_ordering(union_nodes); end

  # Builds a set of nested nodes that union each other's results
  #
  # Note: Order of chained unions *DOES* matter
  #
  # Example:
  #
  #   User.union(User.select(:id).where(id: 8))
  #       .union(User.select(:id).where(id: 50))
  #       .union.except(User.select(:id).where(id: 8))
  #
  #   #=> [<#User id: 50]]
  #
  #   ```sql
  #   SELECT users.*
  #   FROM(
  #       (
  #         (SELECT users.id FROM users WHERE id = 8)
  #         UNION
  #         (SELECT users.id FROM users WHERE id = 50)
  #       )
  #       EXCEPT
  #       (SELECT users.id FROM users WHERE id = 8)
  #    ) users;
  #   ```
  #
  # source://active_record_extended//lib/active_record_extended/query_methods/unionize.rb#178
  def build_union_nodes!(raise_error = T.unsafe(nil)); end

  # source://active_record_extended//lib/active_record_extended/query_methods/unionize.rb#144
  def build_unions(arel = T.unsafe(nil)); end

  private

  # source://active_record_extended//lib/active_record_extended/query_methods/unionize.rb#237
  def resolve_relation_node(relation_node); end

  # source://active_record_extended//lib/active_record_extended/query_methods/unionize.rb#229
  def unionize_error_or_warn!(raise_error = T.unsafe(nil)); end
end

# source://active_record_extended//lib/active_record_extended/query_methods/unionize.rb#7
ActiveRecordExtended::QueryMethods::Unionize::UNIONIZE_METHODS = T.let(T.unsafe(nil), Array)

# source://active_record_extended//lib/active_record_extended/query_methods/unionize.rb#6
ActiveRecordExtended::QueryMethods::Unionize::UNION_RELATION_METHODS = T.let(T.unsafe(nil), Array)

# source://active_record_extended//lib/active_record_extended/query_methods/unionize.rb#9
class ActiveRecordExtended::QueryMethods::Unionize::UnionChain
  include ::ActiveRecordExtended::Utilities::Support
  include ::ActiveRecordExtended::Utilities::OrderBy

  # @return [UnionChain] a new instance of UnionChain
  #
  # source://active_record_extended//lib/active_record_extended/query_methods/unionize.rb#13
  def initialize(scope); end

  # source://active_record_extended//lib/active_record_extended/query_methods/unionize.rb#41
  def all(*args); end

  # source://active_record_extended//lib/active_record_extended/query_methods/unionize.rb#17
  def as(from_clause_name); end

  # source://active_record_extended//lib/active_record_extended/query_methods/unionize.rb#47
  def except(*args); end

  # source://active_record_extended//lib/active_record_extended/query_methods/unionize.rb#53
  def intersect(*args); end

  # source://active_record_extended//lib/active_record_extended/query_methods/unionize.rb#23
  def order(*ordering_args); end

  # source://active_record_extended//lib/active_record_extended/query_methods/unionize.rb#23
  def order_union(*ordering_args); end

  # source://active_record_extended//lib/active_record_extended/query_methods/unionize.rb#30
  def reorder(*ordering_args); end

  # source://active_record_extended//lib/active_record_extended/query_methods/unionize.rb#30
  def reorder_union(*ordering_args); end

  # source://active_record_extended//lib/active_record_extended/query_methods/unionize.rb#36
  def union(*args); end

  # source://active_record_extended//lib/active_record_extended/query_methods/unionize.rb#41
  def union_all(*args); end

  # source://active_record_extended//lib/active_record_extended/query_methods/unionize.rb#17
  def union_as(from_clause_name); end

  # source://active_record_extended//lib/active_record_extended/query_methods/unionize.rb#47
  def union_except(*args); end

  # source://active_record_extended//lib/active_record_extended/query_methods/unionize.rb#53
  def union_intersect(*args); end

  protected

  # source://active_record_extended//lib/active_record_extended/query_methods/unionize.rb#61
  def append_union_order!(union_type, args); end

  # source://active_record_extended//lib/active_record_extended/query_methods/unionize.rb#68
  def calculate_union_operation!(union_type, scope_count); end
end

# source://active_record_extended//lib/active_record_extended/query_methods/where_chain.rb#5
module ActiveRecordExtended::QueryMethods::WhereChain
  # Finds Records that contain a single matchable array element
  # User.where.all(tags: 3)
  #   # SELECT user.* FROM user WHERE 3 = ALL(user.tags)
  #
  # source://active_record_extended//lib/active_record_extended/query_methods/where_chain.rb#24
  def all(opts, *rest); end

  # Finds Records that contain an element in an array column
  # User.where.any(tags: 3)
  #   # SELECT user.* FROM user WHERE 3 = ANY(user.tags)
  #
  # source://active_record_extended//lib/active_record_extended/query_methods/where_chain.rb#17
  def any(opts, *rest); end

  # Finds Records that contains a nested set elements
  #
  # Array Column Type:
  #   User.where.contains(tags: [1, 3])
  #   # SELECT user.* FROM user WHERE user.tags @> {1,3}
  #
  # HStore Column Type:
  #   User.where.contains(data: { nickname: 'chainer' })
  #   # SELECT user.* FROM user WHERE user.data @> 'nickname' => 'chainer'
  #
  # JSONB Column Type:
  #   User.where.contains(data: { nickname: 'chainer' })
  #   # SELECT user.* FROM user WHERE user.data @> {'nickname': 'chainer'}
  #
  # This can also be used along side joined tables
  #
  # JSONB Column Type Example:
  #   Tag.joins(:user).where.contains(user: { data: { nickname: 'chainer' } })
  #   # SELECT tags.* FROM tags INNER JOIN user on user.id = tags.user_id WHERE user.data @> { nickname: 'chainer' }
  #
  # source://active_record_extended//lib/active_record_extended/query_methods/where_chain.rb#48
  def contains(opts, *rest); end

  # Finds Records that have an array column that contain any a set of values
  # User.where.overlap(tags: [1,2])
  #   # SELECT * FROM users WHERE tags && {1,2}
  #
  # source://active_record_extended//lib/active_record_extended/query_methods/where_chain.rb#9
  def overlap(opts, *rest); end

  # Finds Records that have an array column that contain any a set of values
  # User.where.overlap(tags: [1,2])
  #   # SELECT * FROM users WHERE tags && {1,2}
  #
  # source://active_record_extended//lib/active_record_extended/query_methods/where_chain.rb#9
  def overlaps(opts, *rest); end

  private

  # source://active_record_extended//lib/active_record_extended/query_methods/where_chain.rb#82
  def assoc_from_related_table(arel); end

  # source://active_record_extended//lib/active_record_extended/query_methods/where_chain.rb#113
  def build_where_clause_for(scope, opts, rest); end

  # source://active_record_extended//lib/active_record_extended/query_methods/where_chain.rb#77
  def column_from_association(arel); end

  # source://active_record_extended//lib/active_record_extended/query_methods/where_chain.rb#91
  def equality_to_function(function_name, opts, rest); end

  # source://active_record_extended//lib/active_record_extended/query_methods/where_chain.rb#87
  def left_column(arel); end

  # @return [Boolean]
  #
  # source://active_record_extended//lib/active_record_extended/query_methods/where_chain.rb#73
  def matchable_column?(col, arel); end

  # source://active_record_extended//lib/active_record_extended/query_methods/where_chain.rb#102
  def substitute_comparisons(opts, rest, arel_node_class, method); end
end

# source://active_record_extended//lib/active_record_extended/query_methods/window.rb#5
module ActiveRecordExtended::QueryMethods::Window
  # source://active_record_extended//lib/active_record_extended/query_methods/window.rb#82
  def build_windows(arel); end

  # source://active_record_extended//lib/active_record_extended/query_methods/window.rb#62
  def define_window(name); end

  # source://active_record_extended//lib/active_record_extended/query_methods/window.rb#66
  def define_window!(name); end

  # source://active_record_extended//lib/active_record_extended/query_methods/window.rb#70
  def select_window(window_function, *args, over:, as: T.unsafe(nil)); end

  # source://active_record_extended//lib/active_record_extended/query_methods/window.rb#74
  def select_window!(window_function, *args, over:, as: T.unsafe(nil)); end

  # source://active_record_extended//lib/active_record_extended/query_methods/window.rb#46
  def window_values; end

  # source://active_record_extended//lib/active_record_extended/query_methods/window.rb#50
  def window_values!; end

  # source://active_record_extended//lib/active_record_extended/query_methods/window.rb#58
  def window_values=(*values); end

  # @return [Boolean]
  #
  # source://active_record_extended//lib/active_record_extended/query_methods/window.rb#54
  def window_values?; end
end

# source://active_record_extended//lib/active_record_extended/query_methods/window.rb#6
class ActiveRecordExtended::QueryMethods::Window::DefineWindowChain
  include ::ActiveRecordExtended::Utilities::Support
  include ::ActiveRecordExtended::Utilities::OrderBy

  # @return [DefineWindowChain] a new instance of DefineWindowChain
  #
  # source://active_record_extended//lib/active_record_extended/query_methods/window.rb#10
  def initialize(scope, window_name); end

  # source://active_record_extended//lib/active_record_extended/query_methods/window.rb#15
  def partition_by(*partitions, order_by: T.unsafe(nil)); end
end

# source://active_record_extended//lib/active_record_extended/query_methods/window.rb#26
class ActiveRecordExtended::QueryMethods::Window::WindowSelectBuilder
  include ::ActiveRecordExtended::Utilities::Support

  # @return [WindowSelectBuilder] a new instance of WindowSelectBuilder
  #
  # source://active_record_extended//lib/active_record_extended/query_methods/window.rb#29
  def initialize(window_function, args, window_name); end

  # source://active_record_extended//lib/active_record_extended/query_methods/window.rb#35
  def build_select(alias_name = T.unsafe(nil)); end
end

# source://active_record_extended//lib/active_record_extended/query_methods/with_cte.rb#5
module ActiveRecordExtended::QueryMethods::WithCTE
  # source://active_record_extended//lib/active_record_extended/query_methods/with_cte.rb#178
  def build_with(arel); end

  # @return [WithCTE]
  #
  # source://active_record_extended//lib/active_record_extended/query_methods/with_cte.rb#123
  def cte; end

  # @param cte [WithCTE]
  # @raise [TypeError]
  #
  # source://active_record_extended//lib/active_record_extended/query_methods/with_cte.rb#128
  def cte=(cte); end

  # @param value [Boolean]
  # @raise [ImmutableRelation]
  #
  # source://active_record_extended//lib/active_record_extended/query_methods/with_cte.rb#145
  def recursive_value=(value); end

  # @return [Boolean]
  #
  # source://active_record_extended//lib/active_record_extended/query_methods/with_cte.rb#152
  def recursive_value?; end

  # @param opts [Hash, WithCTE]
  #
  # source://active_record_extended//lib/active_record_extended/query_methods/with_cte.rb#157
  def with(opts = T.unsafe(nil), *rest); end

  # @param opts [Hash, WithCTE]
  #
  # source://active_record_extended//lib/active_record_extended/query_methods/with_cte.rb#164
  def with!(opts = T.unsafe(nil), *rest); end

  # @param values [Hash, WithCTE]
  #
  # source://active_record_extended//lib/active_record_extended/query_methods/with_cte.rb#140
  def with_values=(values); end

  # @return [Boolean]
  #
  # source://active_record_extended//lib/active_record_extended/query_methods/with_cte.rb#135
  def with_values?; end

  private

  # source://active_record_extended//lib/active_record_extended/query_methods/with_cte.rb#198
  def add_materialized_modifier(expression, cte, name); end
end

# source://active_record_extended//lib/active_record_extended/query_methods/with_cte.rb#6
class ActiveRecordExtended::QueryMethods::WithCTE::WithCTE
  include ::ActiveRecordExtended::Utilities::Support
  include ::Enumerable
  extend ::Forwardable

  # @param scope [ActiveRecord::Relation]
  # @return [WithCTE] a new instance of WithCTE
  #
  # source://active_record_extended//lib/active_record_extended/query_methods/with_cte.rb#15
  def initialize(scope); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def blank?(*args, **_arg1, &block); end

  # @return [Enumerable] Returns the order for which CTE's were imported as.
  #
  # source://active_record_extended//lib/active_record_extended/query_methods/with_cte.rb#21
  def each; end

  # @return [Enumerable] Returns the order for which CTE's were imported as.
  #
  # source://active_record_extended//lib/active_record_extended/query_methods/with_cte.rb#21
  def each_pair; end

  # source://forwardable/1.3.3/forwardable.rb#231
  def empty?(*args, **_arg1, &block); end

  # @return [Boolean]
  #
  # source://active_record_extended//lib/active_record_extended/query_methods/with_cte.rb#37
  def materialized_key?(key); end

  # Returns the value of attribute materialized_keys.
  #
  # source://active_record_extended//lib/active_record_extended/query_methods/with_cte.rb#12
  def materialized_keys; end

  # @return [Boolean]
  #
  # source://active_record_extended//lib/active_record_extended/query_methods/with_cte.rb#42
  def not_materialized_key?(key); end

  # Returns the value of attribute not_materialized_keys.
  #
  # source://active_record_extended//lib/active_record_extended/query_methods/with_cte.rb#12
  def not_materialized_keys; end

  # @param value [Hash, WithCTE]
  #
  # source://active_record_extended//lib/active_record_extended/query_methods/with_cte.rb#47
  def pipe_cte_with!(value); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def present?(*args, **_arg1, &block); end

  # source://active_record_extended//lib/active_record_extended/query_methods/with_cte.rb#72
  def reset!; end

  # Returns the value of attribute with_keys.
  #
  # source://active_record_extended//lib/active_record_extended/query_methods/with_cte.rb#12
  def with_keys; end

  # Returns the value of attribute with_values.
  #
  # source://active_record_extended//lib/active_record_extended/query_methods/with_cte.rb#12
  def with_values; end

  # @param value [Hash, WithCTE]
  #
  # source://active_record_extended//lib/active_record_extended/query_methods/with_cte.rb#31
  def with_values=(value); end
end

# source://active_record_extended//lib/active_record_extended/query_methods/with_cte.rb#80
class ActiveRecordExtended::QueryMethods::WithCTE::WithChain
  # @param scope [ActiveRecord::Relation]
  # @return [WithChain] a new instance of WithChain
  #
  # source://active_record_extended//lib/active_record_extended/query_methods/with_cte.rb#82
  def initialize(scope); end

  # @param args [Hash, WithCTE]
  #
  # source://active_record_extended//lib/active_record_extended/query_methods/with_cte.rb#96
  def materialized(args); end

  # @param args [Hash, WithCTE]
  #
  # source://active_record_extended//lib/active_record_extended/query_methods/with_cte.rb#109
  def not_materialized(args); end

  # @param args [Hash, WithCTE]
  #
  # source://active_record_extended//lib/active_record_extended/query_methods/with_cte.rb#88
  def recursive(args); end
end

# source://active_record_extended//lib/active_record_extended.rb#15
module ActiveRecordExtended::Utilities
  extend ::ActiveSupport::Autoload
end

# source://active_record_extended//lib/active_record_extended/utilities/order_by.rb#7
module ActiveRecordExtended::Utilities::OrderBy
  # source://active_record_extended//lib/active_record_extended/utilities/order_by.rb#8
  def inline_order_by(arel_node, ordering_args); end

  # Processes "ORDER BY" expressions for supported aggregate functions
  #
  # source://active_record_extended//lib/active_record_extended/utilities/order_by.rb#23
  def order_by_expression(order_by); end

  # source://active_record_extended//lib/active_record_extended/utilities/order_by.rb#63
  def process_ordering_arguments!(ordering_args); end

  # source://active_record_extended//lib/active_record_extended/utilities/order_by.rb#14
  def scope_preprocess_order_args(ordering_args); end

  # Turns a hash into a dot notation path.
  #
  # Example:
  # - Using pre-set directions:
  #   [{ products: { position: :asc, id: :desc } }]
  #     #=> [{ "products.position" => :asc, "products.id" => :desc }]
  #
  # - Using fallback directions:
  #   [{products: :position}]
  #     #=> [{"products.position" => :asc}]
  #
  # source://active_record_extended//lib/active_record_extended/utilities/order_by.rb#43
  def to_ordered_table_path(args); end
end

# source://active_record_extended//lib/active_record_extended/utilities/support.rb#5
module ActiveRecordExtended::Utilities::Support
  # Ensures the given value is properly double quoted.
  # This also ensures we don't have conflicts with reversed keywords.
  #
  # IE: `user` is a reserved keyword in PG. But `"user"` is allowed and works the same
  #     when used as an column/tbl alias.
  #
  # source://active_record_extended//lib/active_record_extended/utilities/support.rb#110
  def double_quote(value); end

  # source://active_record_extended//lib/active_record_extended/utilities/support.rb#21
  def flatten_safely(values, &block); end

  # We need to ensure we can flatten nested ActiveRecord::Relations
  # that might have been nested due to the (splat)*args parameters
  #
  # Note: calling `Array.flatten[!]/1` will actually remove all AR relations from the array.
  #
  # source://active_record_extended//lib/active_record_extended/utilities/support.rb#13
  def flatten_to_sql(*values); end

  # Will attempt to digest and resolve the from clause
  #
  # If the from clause is a String, it will check to see if a table reference key has been assigned.
  #   - If one cannot be detected, one will be appended.
  #   - Rails does not allow assigning table references using the `.from/2` method, when its a string / sym type.
  #
  # If the from clause is an AR relation; it will duplicate the object.
  #   - Ensures any memorizers are reset (ex: `.to_sql` sets a memorizer on the instance)
  #   - Key's can be assigned using the `.from/2` method.
  #
  # source://active_record_extended//lib/active_record_extended/utilities/support.rb#75
  def from_clause_constructor(from, reference_key); end

  # source://active_record_extended//lib/active_record_extended/utilities/support.rb#163
  def generate_grouping(expr); end

  # source://active_record_extended//lib/active_record_extended/utilities/support.rb#167
  def generate_named_function(function_name, *args); end

  # source://active_record_extended//lib/active_record_extended/utilities/support.rb#153
  def group_when_needed(arel_or_rel_query); end

  # source://active_record_extended//lib/active_record_extended/utilities/support.rb#173
  def key_generator; end

  # Ensures the key is properly single quoted and treated as a actual PG key reference.
  #
  # source://active_record_extended//lib/active_record_extended/utilities/support.rb#124
  def literal_key(key); end

  # @return [Boolean]
  #
  # source://active_record_extended//lib/active_record_extended/utilities/support.rb#159
  def needs_to_be_grouped?(query); end

  # Applies aliases to the given query
  # Ex: `SELECT * FROM users` => `(SELECT * FROM users) AS "members"`
  #
  # source://active_record_extended//lib/active_record_extended/utilities/support.rb#32
  def nested_alias_escape(query, alias_name); end

  # Will carry defined CTE tables from the nested sub-query and gradually pushes it up to the parents query stack
  # I.E: It pushes `WITH [:cte_name:] AS(...), ..` to the top of the query structure tree
  #
  # SPECIAL GOTCHA NOTE: (if duplicate keys are found) This will favor the parents query `with's` over nested ones!
  #
  # source://active_record_extended//lib/active_record_extended/utilities/support.rb#91
  def pipe_cte_with!(subquery); end

  # Converts a potential subquery into a compatible Arel SQL node.
  #
  # Note:
  # We convert relations to SQL to maintain compatibility with Rails 5.1.
  # Only Rails 5.2+ maintains bound attributes in Arel, so its better to be safe then sorry.
  # When we drop support for Rails 5.1, we then can then drop the '.to_sql' conversation
  #
  # source://active_record_extended//lib/active_record_extended/utilities/support.rb#142
  def to_arel_sql(value); end

  # We need to ensure we can flatten nested ActiveRecord::Relations
  # that might have been nested due to the (splat)*args parameters
  #
  # Note: calling `Array.flatten[!]/1` will actually remove all AR relations from the array.
  #
  # source://active_record_extended//lib/active_record_extended/utilities/support.rb#13
  def to_sql_array(*values); end

  # Wraps query into an aggregated array
  # EX: `(ARRAY_AGG((SELECT * FROM users)) AS "members"`
  #     `(ARRAY_AGG(DISTINCT (SELECT * FROM users)) AS "members"`
  #     `SELECT ARRAY_AGG((id)) AS "ids" FROM users`
  #     `SELECT ARRAY_AGG(DISTINCT (id)) AS "ids" FROM users`
  #
  # source://active_record_extended//lib/active_record_extended/utilities/support.rb#53
  def wrap_with_agg_array(arel_or_rel_query, alias_name, order_by: T.unsafe(nil), distinct: T.unsafe(nil)); end

  # Wraps subquery into an Aliased ARRAY
  # Ex: `SELECT * FROM users` => (ARRAY(SELECT * FROM users)) AS "members"
  #
  # source://active_record_extended//lib/active_record_extended/utilities/support.rb#39
  def wrap_with_array(arel_or_rel_query, alias_name, order_by: T.unsafe(nil)); end
end

# source://active_record_extended//lib/active_record_extended/utilities/support.rb#6
ActiveRecordExtended::Utilities::Support::A_TO_Z_KEYS = T.let(T.unsafe(nil), Array)

# source://active_record_extended//lib/active_record_extended/version.rb#4
ActiveRecordExtended::VERSION = T.let(T.unsafe(nil), String)

# source://active_record_extended//lib/active_record_extended/arel/visitors/postgresql_decorator.rb#6
module ActiveRecordExtended::Visitors; end

# source://active_record_extended//lib/active_record_extended/arel/visitors/postgresql_decorator.rb#7
module ActiveRecordExtended::Visitors::PostgreSQLDecorator
  private

  # @return [Boolean]
  #
  # source://active_record_extended//lib/active_record_extended/arel/visitors/postgresql_decorator.rb#117
  def matchable_column?(col, object); end

  # source://active_record_extended//lib/active_record_extended/arel/visitors/postgresql_decorator.rb#82
  def visit_Arel_Nodes_AggregateFunctionName(object, collector); end

  # source://active_record_extended//lib/active_record_extended/arel/visitors/postgresql_decorator.rb#74
  def visit_Arel_Nodes_Array(object, collector); end

  # source://active_record_extended//lib/active_record_extended/arel/visitors/postgresql_decorator.rb#78
  def visit_Arel_Nodes_ArrayAgg(object, collector); end

  # source://active_record_extended//lib/active_record_extended/arel/visitors/postgresql_decorator.rb#46
  def visit_Arel_Nodes_ContainedInArray(object, collector); end

  # source://active_record_extended//lib/active_record_extended/arel/visitors/postgresql_decorator.rb#42
  def visit_Arel_Nodes_ContainedInHStore(object, collector); end

  # source://active_record_extended//lib/active_record_extended/arel/visitors/postgresql_decorator.rb#34
  def visit_Arel_Nodes_ContainsArray(object, collector); end

  # source://active_record_extended//lib/active_record_extended/arel/visitors/postgresql_decorator.rb#38
  def visit_Arel_Nodes_ContainsHStore(object, collector); end

  # source://active_record_extended//lib/active_record_extended/arel/visitors/postgresql_decorator.rb#50
  def visit_Arel_Nodes_Inet_ContainedWithin(object, collector); end

  # source://active_record_extended//lib/active_record_extended/arel/visitors/postgresql_decorator.rb#105
  def visit_Arel_Nodes_Inet_ContainedWithinEquals(object, collector); end

  # source://active_record_extended//lib/active_record_extended/arel/visitors/postgresql_decorator.rb#101
  def visit_Arel_Nodes_Inet_Contains(object, collector); end

  # source://active_record_extended//lib/active_record_extended/arel/visitors/postgresql_decorator.rb#109
  def visit_Arel_Nodes_Inet_ContainsEquals(object, collector); end

  # source://active_record_extended//lib/active_record_extended/arel/visitors/postgresql_decorator.rb#113
  def visit_Arel_Nodes_Inet_ContainsOrContainedWithin(object, collector); end

  # source://active_record_extended//lib/active_record_extended/arel/visitors/postgresql_decorator.rb#58
  def visit_Arel_Nodes_JsonBuildObject(object, collector); end

  # source://active_record_extended//lib/active_record_extended/arel/visitors/postgresql_decorator.rb#62
  def visit_Arel_Nodes_JsonbBuildObject(object, collector); end

  # source://active_record_extended//lib/active_record_extended/arel/visitors/postgresql_decorator.rb#54
  def visit_Arel_Nodes_RowToJson(object, collector); end

  # source://active_record_extended//lib/active_record_extended/arel/visitors/postgresql_decorator.rb#66
  def visit_Arel_Nodes_ToJson(object, collector); end

  # source://active_record_extended//lib/active_record_extended/arel/visitors/postgresql_decorator.rb#70
  def visit_Arel_Nodes_ToJsonb(object, collector); end
end

# CTE alias fix for Rails 6.1
#
# source://active_record_extended//lib/active_record_extended/arel/nodes.rb#6
module Arel
  class << self
    # source://activerecord/7.0.4/lib/arel.rb#46
    def arel_node?(value); end

    # source://activerecord/7.0.4/lib/arel.rb#50
    def fetch_attribute(value, &block); end

    # source://rgeo-activerecord/7.0.1/lib/rgeo/active_record/spatial_expressions.rb#253
    def spatial(arg); end

    # source://activerecord/7.0.4/lib/arel.rb#38
    def sql(raw_sql); end

    # source://activerecord/7.0.4/lib/arel.rb#42
    def star; end
  end
end

# source://activerecord/7.0.4/lib/arel/attributes/attribute.rb#32
Arel::Attribute = Arel::Attributes::Attribute

# source://active_record_extended//lib/active_record_extended/arel/nodes.rb#7
module Arel::Nodes
  class << self
    # source://activerecord/7.0.4/lib/arel/nodes/casted.rb#48
    def build_quoted(other, attribute = T.unsafe(nil)); end
  end
end

# source://active_record_extended//lib/active_record_extended/arel/aggregate_function_name.rb#5
class Arel::Nodes::AggregateFunctionName < ::Arel::Nodes::Node
  include ::Arel::Predications
  include ::Arel::WindowPredications

  # @return [AggregateFunctionName] a new instance of AggregateFunctionName
  #
  # source://active_record_extended//lib/active_record_extended/arel/aggregate_function_name.rb#10
  def initialize(name, expr, distinct = T.unsafe(nil)); end

  # @return [Boolean]
  #
  # source://active_record_extended//lib/active_record_extended/arel/aggregate_function_name.rb#31
  def ==(other); end

  # Returns the value of attribute alias.
  #
  # source://active_record_extended//lib/active_record_extended/arel/aggregate_function_name.rb#8
  def alias; end

  # Sets the attribute alias
  #
  # @param value the value to set the attribute alias to.
  #
  # source://active_record_extended//lib/active_record_extended/arel/aggregate_function_name.rb#8
  def alias=(_arg0); end

  # source://active_record_extended//lib/active_record_extended/arel/aggregate_function_name.rb#22
  def as(aliaz); end

  # Returns the value of attribute distinct.
  #
  # source://active_record_extended//lib/active_record_extended/arel/aggregate_function_name.rb#8
  def distinct; end

  # Sets the attribute distinct
  #
  # @param value the value to set the attribute distinct to.
  #
  # source://active_record_extended//lib/active_record_extended/arel/aggregate_function_name.rb#8
  def distinct=(_arg0); end

  # @return [Boolean]
  #
  # source://active_record_extended//lib/active_record_extended/arel/aggregate_function_name.rb#31
  def eql?(other); end

  # Returns the value of attribute expressions.
  #
  # source://active_record_extended//lib/active_record_extended/arel/aggregate_function_name.rb#8
  def expressions; end

  # Sets the attribute expressions
  #
  # @param value the value to set the attribute expressions to.
  #
  # source://active_record_extended//lib/active_record_extended/arel/aggregate_function_name.rb#8
  def expressions=(_arg0); end

  # source://active_record_extended//lib/active_record_extended/arel/aggregate_function_name.rb#27
  def hash; end

  # Returns the value of attribute name.
  #
  # source://active_record_extended//lib/active_record_extended/arel/aggregate_function_name.rb#8
  def name; end

  # Sets the attribute name
  #
  # @param value the value to set the attribute name to.
  #
  # source://active_record_extended//lib/active_record_extended/arel/aggregate_function_name.rb#8
  def name=(_arg0); end

  # source://active_record_extended//lib/active_record_extended/arel/aggregate_function_name.rb#17
  def order_by(expr); end

  # Returns the value of attribute orderings.
  #
  # source://active_record_extended//lib/active_record_extended/arel/aggregate_function_name.rb#8
  def orderings; end

  # Sets the attribute orderings
  #
  # @param value the value to set the attribute orderings to.
  #
  # source://active_record_extended//lib/active_record_extended/arel/aggregate_function_name.rb#8
  def orderings=(_arg0); end
end

# source://active_record_extended//lib/active_record_extended/arel/nodes.rb#27
class Arel::Nodes::Array < ::Arel::Nodes::Function
  # source://active_record_extended//lib/active_record_extended/arel/nodes.rb#28
  def initialize(*args); end
end

# source://active_record_extended//lib/active_record_extended/arel/nodes.rb#27
class Arel::Nodes::ArrayAgg < ::Arel::Nodes::Function
  # source://active_record_extended//lib/active_record_extended/arel/nodes.rb#28
  def initialize(*args); end
end

# source://active_record_extended//lib/active_record_extended/arel/nodes.rb#16
class Arel::Nodes::ContainedInArray < ::Arel::Nodes::Binary; end

# source://active_record_extended//lib/active_record_extended/arel/nodes.rb#16
class Arel::Nodes::ContainsArray < ::Arel::Nodes::Binary; end

# source://active_record_extended//lib/active_record_extended/arel/nodes.rb#16
class Arel::Nodes::ContainsHStore < ::Arel::Nodes::Binary; end

# source://active_record_extended//lib/active_record_extended/arel/nodes.rb#39
module Arel::Nodes::Inet; end

# source://active_record_extended//lib/active_record_extended/arel/nodes.rb#46
class Arel::Nodes::Inet::ContainedWithin < ::Arel::Nodes::Binary; end

# source://active_record_extended//lib/active_record_extended/arel/nodes.rb#46
class Arel::Nodes::Inet::ContainedWithinEquals < ::Arel::Nodes::Binary; end

# source://active_record_extended//lib/active_record_extended/arel/nodes.rb#46
class Arel::Nodes::Inet::Contains < ::Arel::Nodes::Binary; end

# source://active_record_extended//lib/active_record_extended/arel/nodes.rb#46
class Arel::Nodes::Inet::ContainsEquals < ::Arel::Nodes::Binary; end

# source://active_record_extended//lib/active_record_extended/arel/nodes.rb#46
class Arel::Nodes::Inet::ContainsOrContainedWithin < ::Arel::Nodes::Binary; end

# source://active_record_extended//lib/active_record_extended/arel/nodes.rb#27
class Arel::Nodes::JsonBuildObject < ::Arel::Nodes::Function
  # source://active_record_extended//lib/active_record_extended/arel/nodes.rb#28
  def initialize(*args); end
end

# source://active_record_extended//lib/active_record_extended/arel/nodes.rb#27
class Arel::Nodes::JsonbBuildObject < ::Arel::Nodes::Function
  # source://active_record_extended//lib/active_record_extended/arel/nodes.rb#28
  def initialize(*args); end
end

# source://active_record_extended//lib/active_record_extended/arel/nodes.rb#27
class Arel::Nodes::RowToJson < ::Arel::Nodes::Function
  # source://active_record_extended//lib/active_record_extended/arel/nodes.rb#28
  def initialize(*args); end
end

class Arel::Nodes::SqlLiteral < ::String
  include ::Arel::Nodes::SqlLiteralPatch
end

# source://active_record_extended//lib/active_record_extended/arel/sql_literal_patch.rb#8
module Arel::Nodes::SqlLiteralPatch
  # source://active_record_extended//lib/active_record_extended/arel/sql_literal_patch.rb#9
  def name; end
end

# source://active_record_extended//lib/active_record_extended/arel/nodes.rb#27
class Arel::Nodes::ToJson < ::Arel::Nodes::Function
  # source://active_record_extended//lib/active_record_extended/arel/nodes.rb#28
  def initialize(*args); end
end

# source://active_record_extended//lib/active_record_extended/arel/nodes.rb#27
class Arel::Nodes::ToJsonb < ::Arel::Nodes::Function
  # source://active_record_extended//lib/active_record_extended/arel/nodes.rb#28
  def initialize(*args); end
end

# source://active_record_extended//lib/active_record_extended/arel/predications.rb#6
module Arel::Predications
  # source://active_record_extended//lib/active_record_extended/arel/predications.rb#12
  def all(other); end

  # source://active_record_extended//lib/active_record_extended/arel/predications.rb#7
  def any(other); end

  # source://activerecord/7.0.4/lib/arel/predications.rb#37
  def between(other); end

  # source://activerecord/7.0.4/lib/arel/predications.rb#213
  def concat(other); end

  # source://active_record_extended//lib/active_record_extended/arel/predications.rb#26
  def contained_in_array(other); end

  # source://active_record_extended//lib/active_record_extended/arel/predications.rb#22
  def contains(other); end

  # source://activerecord/7.0.4/lib/arel/predications.rb#145
  def does_not_match(other, escape = T.unsafe(nil), case_sensitive = T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/arel/predications.rb#157
  def does_not_match_all(others, escape = T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/arel/predications.rb#153
  def does_not_match_any(others, escape = T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/arel/predications.rb#149
  def does_not_match_regexp(other, case_sensitive = T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/arel/predications.rb#17
  def eq(other); end

  # source://activerecord/7.0.4/lib/arel/predications.rb#33
  def eq_all(others); end

  # source://activerecord/7.0.4/lib/arel/predications.rb#29
  def eq_any(others); end

  # source://activerecord/7.0.4/lib/arel/predications.rb#173
  def gt(right); end

  # source://activerecord/7.0.4/lib/arel/predications.rb#181
  def gt_all(others); end

  # source://activerecord/7.0.4/lib/arel/predications.rb#177
  def gt_any(others); end

  # source://activerecord/7.0.4/lib/arel/predications.rb#161
  def gteq(right); end

  # source://activerecord/7.0.4/lib/arel/predications.rb#169
  def gteq_all(others); end

  # source://activerecord/7.0.4/lib/arel/predications.rb#165
  def gteq_any(others); end

  # source://activerecord/7.0.4/lib/arel/predications.rb#63
  def in(other); end

  # source://activerecord/7.0.4/lib/arel/predications.rb#78
  def in_all(others); end

  # source://activerecord/7.0.4/lib/arel/predications.rb#74
  def in_any(others); end

  # source://active_record_extended//lib/active_record_extended/arel/predications.rb#38
  def inet_contained_within(other); end

  # source://active_record_extended//lib/active_record_extended/arel/predications.rb#42
  def inet_contained_within_or_equals(other); end

  # source://active_record_extended//lib/active_record_extended/arel/predications.rb#30
  def inet_contains(other); end

  # source://active_record_extended//lib/active_record_extended/arel/predications.rb#46
  def inet_contains_or_equals(other); end

  # source://active_record_extended//lib/active_record_extended/arel/predications.rb#34
  def inet_contains_or_is_contained_within(other); end

  # source://activerecord/7.0.4/lib/arel/predications.rb#25
  def is_distinct_from(other); end

  # source://activerecord/7.0.4/lib/arel/predications.rb#21
  def is_not_distinct_from(other); end

  # source://activerecord/7.0.4/lib/arel/predications.rb#185
  def lt(right); end

  # source://activerecord/7.0.4/lib/arel/predications.rb#193
  def lt_all(others); end

  # source://activerecord/7.0.4/lib/arel/predications.rb#189
  def lt_any(others); end

  # source://activerecord/7.0.4/lib/arel/predications.rb#197
  def lteq(right); end

  # source://activerecord/7.0.4/lib/arel/predications.rb#205
  def lteq_all(others); end

  # source://activerecord/7.0.4/lib/arel/predications.rb#201
  def lteq_any(others); end

  # source://activerecord/7.0.4/lib/arel/predications.rb#129
  def matches(other, escape = T.unsafe(nil), case_sensitive = T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/arel/predications.rb#141
  def matches_all(others, escape = T.unsafe(nil), case_sensitive = T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/arel/predications.rb#137
  def matches_any(others, escape = T.unsafe(nil), case_sensitive = T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/arel/predications.rb#133
  def matches_regexp(other, case_sensitive = T.unsafe(nil)); end

  # source://activerecord/7.0.4/lib/arel/predications.rb#82
  def not_between(other); end

  # source://activerecord/7.0.4/lib/arel/predications.rb#5
  def not_eq(other); end

  # source://activerecord/7.0.4/lib/arel/predications.rb#13
  def not_eq_all(others); end

  # source://activerecord/7.0.4/lib/arel/predications.rb#9
  def not_eq_any(others); end

  # source://activerecord/7.0.4/lib/arel/predications.rb#110
  def not_in(other); end

  # source://activerecord/7.0.4/lib/arel/predications.rb#125
  def not_in_all(others); end

  # source://activerecord/7.0.4/lib/arel/predications.rb#121
  def not_in_any(others); end

  # source://active_record_extended//lib/active_record_extended/arel/predications.rb#17
  def overlap(other); end

  # source://active_record_extended//lib/active_record_extended/arel/predications.rb#17
  def overlaps(other); end

  # source://activerecord/7.0.4/lib/arel/predications.rb#225
  def quoted_array(others); end

  # source://activerecord/7.0.4/lib/arel/predications.rb#209
  def when(right); end

  private

  # source://activerecord/7.0.4/lib/arel/predications.rb#237
  def grouping_all(method_id, others, *extras); end

  # source://activerecord/7.0.4/lib/arel/predications.rb#230
  def grouping_any(method_id, others, *extras); end

  # source://activerecord/7.0.4/lib/arel/predications.rb#246
  def infinity?(value); end

  # source://activerecord/7.0.4/lib/arel/predications.rb#254
  def open_ended?(value); end

  # source://activerecord/7.0.4/lib/arel/predications.rb#242
  def quoted_node(other); end

  # source://activerecord/7.0.4/lib/arel/predications.rb#250
  def unboundable?(value); end
end

# source://activerecord/7.0.4/lib/arel.rb#29
Arel::VERSION = T.let(T.unsafe(nil), String)

class Arel::Visitors::PostgreSQL < ::Arel::Visitors::ToSql
  include ::ActiveRecordExtended::Visitors::PostgreSQLDecorator
end
