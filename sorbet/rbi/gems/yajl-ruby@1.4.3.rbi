# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `yajl-ruby` gem.
# Please instead update this file by running `bin/tapioca gem yajl-ruby`.


# = Yajl
#
# Ruby bindings to the excellent Yajl (Yet Another JSON Parser) ANSI C library.
#
# source://yajl-ruby//lib/yajl.rb#14
module Yajl
  class << self
    # For compatibility, has the same signature of Yajl::Encoder.encode
    #
    # source://yajl-ruby//lib/yajl.rb#22
    def dump(obj, *args, &block); end

    # For compatibility, has the same signature of Yajl::Parser.parse
    #
    # source://yajl-ruby//lib/yajl.rb#17
    def load(str_or_io, options = T.unsafe(nil), read_bufsize = T.unsafe(nil), &block); end
  end
end

class Yajl::EncodeError < ::StandardError; end

# source://yajl-ruby//lib/yajl.rb#48
class Yajl::Encoder
  def initialize(*_arg0); end

  def encode(*_arg0); end
  def on_progress=(_arg0); end

  class << self
    def enable_json_gem_compatability; end

    # A helper method for encode-and-forget use-cases
    #
    # Examples:
    #   Yajl::Encoder.encode(obj[, io, :pretty => true, :indent => "\t", &block])
    #
    #   output = Yajl::Encoder.encode(obj[, :pretty => true, :indent => "\t", &block])
    #
    # +obj+ is a ruby object to encode to JSON format
    #
    # +io+ is the optional IO stream to encode the ruby object to.
    # If +io+ isn't passed, the resulting JSON string is returned. If +io+ is passed, nil is returned.
    #
    # The +options+ hash allows you to set two encoding options - :pretty and :indent
    #
    # :pretty accepts a boolean and will enable/disable "pretty printing" the resulting output
    #
    # :indent accepts a string and will be used as the indent character(s) during the pretty print process
    #
    # If a block is passed, it will be used as (and work the same as) the +on_progress+ callback
    #
    # source://yajl-ruby//lib/yajl.rb#68
    def encode(obj, *args, &block); end

    def new(*_arg0); end
  end
end

Yajl::MAX_DEPTH = T.let(T.unsafe(nil), Integer)
class Yajl::ParseError < ::StandardError; end

# source://yajl-ruby//lib/yajl.rb#33
class Yajl::Parser
  def initialize(*_arg0); end

  def <<(_arg0); end
  def on_parse_complete=(_arg0); end
  def parse(*_arg0); end
  def parse_chunk(_arg0); end

  class << self
    def new(*_arg0); end

    # A helper method for parse-and-forget use-cases
    #
    # +io+ is the stream to parse JSON from
    #
    # The +options+ hash allows you to set two parsing options - :allow_comments and :check_utf8
    #
    # :allow_comments accepts a boolean will enable/disable checks for in-line comments in the JSON stream
    #
    # :check_utf8 accepts a boolean will enable/disable UTF8 validation for the JSON stream
    #
    # source://yajl-ruby//lib/yajl.rb#43
    def parse(str_or_io, options = T.unsafe(nil), read_bufsize = T.unsafe(nil), &block); end
  end
end

# source://yajl-ruby//lib/yajl.rb#26
class Yajl::Projector
  # @return [Projector] a new instance of Projector
  #
  # source://yajl-ruby//lib/yajl.rb#27
  def initialize(stream, read_bufsize = T.unsafe(nil)); end

  def project(_arg0); end
end
