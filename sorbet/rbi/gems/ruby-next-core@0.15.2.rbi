# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `ruby-next-core` gem.
# Please instead update this file by running `bin/tapioca gem ruby-next-core`.

class NoMatchingPatternError < ::StandardError; end
RuboCop::ProcessedSource = RuboCop::AST::ProcessedSource

# Add binding argument to all self-less eval's
module RubyNext
  class << self
    def current_ruby_version; end

    # Returns the value of attribute debug_enabled.
    def debug_enabled; end

    def debug_enabled=(val); end
    def debug_source(source, filepath = T.unsafe(nil)); end
    def next_ruby_version(version = T.unsafe(nil)); end

    # Returns the value of attribute silence_warnings.
    def silence_warnings; end

    # Sets the attribute silence_warnings
    #
    # @param value the value to set the attribute silence_warnings to.
    def silence_warnings=(_arg0); end

    def warn(msg); end

    private

    # Returns the value of attribute debug_filter.
    def debug_filter; end
  end
end

module RubyNext::Core
  class << self
    # @return [Boolean]
    def backports?; end

    # @return [Boolean]
    def core_ext?; end

    def import_methods(other, bind); end

    # Inject `using RubyNext` at the top of the source code
    def inject!(contents); end

    def patch(*_arg0, **_arg1, &_arg2); end
    def patches; end

    # @return [Boolean]
    def refine?; end

    # Returns the value of attribute strategy.
    def strategy; end

    # @raise [ArgumentError]
    def strategy=(val); end
  end
end

# Patch contains the extension implementation
# and meta information (e.g., Ruby version).
class RubyNext::Core::Patch
  # Create a new patch for module/class (mod)
  # with the specified uniq name
  #
  # `core_ext` defines the strategy for core extensions:
  #    - :patch — extend class directly
  #    - :prepend — extend class by prepending a module (e.g., when needs `super`)
  #
  # @return [Patch] a new instance of Patch
  def initialize(mod = T.unsafe(nil), method:, version:, name: T.unsafe(nil), supported: T.unsafe(nil), native: T.unsafe(nil), location: T.unsafe(nil), refineable: T.unsafe(nil), core_ext: T.unsafe(nil), singleton: T.unsafe(nil)); end

  # Returns the value of attribute body.
  def body; end

  # Returns the value of attribute core_ext.
  def core_ext; end

  # @return [Boolean]
  def core_ext?; end

  # Returns the value of attribute location.
  def location; end

  # Returns the value of attribute method_name.
  def method_name; end

  # Returns the value of attribute mod.
  def mod; end

  # Returns the value of attribute name.
  def name; end

  # Returns the value of attribute native.
  def native; end

  # Returns the value of attribute native.
  def native?; end

  # @return [Boolean]
  def prepend?; end

  # Returns the value of attribute refineables.
  def refineables; end

  # Returns the value of attribute singleton.
  def singleton; end

  # Returns the value of attribute singleton.
  def singleton?; end

  # Returns the value of attribute supported.
  def supported; end

  # Returns the value of attribute supported.
  def supported?; end

  def to_module; end

  # Returns the value of attribute version.
  def version; end

  private

  def build_location(trace_locations); end
  def build_module_name; end

  # @return [Boolean]
  def native_location?(location); end
end

# Registry for patches
class RubyNext::Core::Patches
  # @return [Patches] a new instance of Patches
  def initialize; end

  # Register new patch
  #
  # @raise [ArgumentError]
  def <<(patch); end

  # Returns the value of attribute extensions.
  def extensions; end

  # Returns the value of attribute refined.
  def refined; end
end

# Defines last minor version for every major version
RubyNext::LAST_MINOR_VERSIONS = T.let(T.unsafe(nil), Hash)

RubyNext::LATEST_VERSION = T.let(T.unsafe(nil), Array)

# Language module contains tools to transpile newer Ruby syntax
# into an older one.
#
# It works the following way:
#   - Takes a Ruby source code as input
#   - Generates the AST using the edge parser (via the `parser` gem)
#   - Pass this AST through the list of processors (one feature = one processor)
#   - Each processor may modify the AST
#   - Generates a transpiled source code from the transformed AST (via the `unparser` gem)
module RubyNext::Language
  class << self
    # @return [Boolean]
    def runtime?; end

    def setup_gem_load_path(lib_dir = T.unsafe(nil), rbnext_dir: T.unsafe(nil), transpile: T.unsafe(nil)); end
  end
end

# Module responsible for transpiling a library at load time
module RubyNext::Language::GemTranspiler
  class << self
    def maybe_transpile(root_dir, lib_dir, target_dir); end
  end
end

# Mininum Ruby version supported by RubyNext
RubyNext::MIN_SUPPORTED_VERSION = T.let(T.unsafe(nil), Gem::Version)

# A virtual version number used for proposed features
RubyNext::NEXT_VERSION = T.let(T.unsafe(nil), String)

# Where to store transpiled files (relative from the project LOAD_PATH, usually `lib/`)
RubyNext::RUBY_NEXT_DIR = T.let(T.unsafe(nil), String)

module RubyNext::Utils
  private

  # Returns true if modules refinement is supported in current version
  def refine_modules?; end

  def resolve_feature_path(feature); end
  def source_with_lines(source, path); end

  class << self
    # Returns true if modules refinement is supported in current version
    #
    # @return [Boolean]
    def refine_modules?; end

    def resolve_feature_path(feature); end
    def source_with_lines(source, path); end
  end
end

RubyNext::VERSION = T.let(T.unsafe(nil), String)
