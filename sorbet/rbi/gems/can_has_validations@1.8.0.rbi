# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `can_has_validations` gem.
# Please instead update this file by running `bin/tapioca gem can_has_validations`.

# validates each value of a hash attribute
#
# by default only allows the first error per validator, regardless of how many
# values fail validation. this improves performance and avoids a bunch of
# repeating error messages.
# use `multiple_errors: true` on :hash_values or a single sub-validator to
# enable the full set of errors. this is potentially useful if each error
# message will vary based upon each hash value.
#
# the :if, :unless, and :on conditionals are not supported on sub-validators,
# but do work as normal on the :hash_values validator itself.
#
# usage:
#   validates :subjects,
#     hash_values: {
#       length: 3..100,
#       # multiple_errors: true
#     }
#
# source://can_has_validations//lib/can_has_validations/validators/array_validator.rb#35
module ActiveModel
  class << self
    # source://activemodel/7.0.4/lib/active_model.rb#71
    def eager_load!; end

    # source://activemodel/7.0.4/lib/active_model/gem_version.rb#5
    def gem_version; end

    # source://activemodel/7.0.4/lib/active_model/version.rb#7
    def version; end
  end
end

# write-once, read-many
#   Allows a value to be set to a non-nil value once, and then makes it immutable.
#   Combine with existence: true to accomplish the same thing as attr_readonly,
#   except with error messages (instead of silently refusing to save the change).
# eg: validates :user_id, write_once: true
#   Optionally refuses changing from nil => non-nil, always making field immutable.
# eg: validates :source, write_once: {immutable_nil: true}
#
# source://can_has_validations//lib/can_has_validations/validators/array_validator.rb#36
module ActiveModel::Validations
  include GeneratedInstanceMethods
  include ::ActiveSupport::Callbacks
  include ::ActiveModel::Validations::HelperMethods

  mixes_in_class_methods GeneratedClassMethods
  mixes_in_class_methods ::ActiveModel::Validations::ClassMethods
  mixes_in_class_methods ::ActiveModel::Callbacks
  mixes_in_class_methods ::ActiveSupport::Callbacks::ClassMethods
  mixes_in_class_methods ::ActiveSupport::DescendantsTracker
  mixes_in_class_methods ::ActiveModel::Translation
  mixes_in_class_methods ::ActiveModel::Validations::HelperMethods

  # source://activemodel/7.0.4/lib/active_model/validations.rb#301
  def errors; end

  # source://activemodel/7.0.4/lib/active_model/validations.rb#373
  def invalid?(context = T.unsafe(nil)); end

  def read_attribute_for_validation(*_arg0); end

  # source://activemodel/7.0.4/lib/active_model/validations.rb#334
  def valid?(context = T.unsafe(nil)); end

  # source://activemodel/7.0.4/lib/active_model/validations.rb#334
  def validate(context = T.unsafe(nil)); end

  # source://activemodel/7.0.4/lib/active_model/validations.rb#382
  def validate!(context = T.unsafe(nil)); end

  # source://activemodel/7.0.4/lib/active_model/validations/with.rb#137
  def validates_with(*args, &block); end

  private

  # source://activemodel/7.0.4/lib/active_model/validations.rb#283
  def initialize_dup(other); end

  # source://activemodel/7.0.4/lib/active_model/validations.rb#410
  def raise_validation_error; end

  # source://activemodel/7.0.4/lib/active_model/validations.rb#405
  def run_validations!; end

  module GeneratedClassMethods
    def __callbacks; end
    def __callbacks=(value); end
    def __callbacks?; end
    def _validators; end
    def _validators=(value); end
    def _validators?; end
  end

  module GeneratedInstanceMethods
    def __callbacks; end
    def __callbacks?; end
    def _validators; end
    def _validators?; end
  end
end

# source://can_has_validations//lib/can_has_validations/validators/ordering_validator.rb#26
class ActiveModel::Validations::AfterValidator < ::ActiveModel::EachValidator
  # source://can_has_validations//lib/can_has_validations/validators/ordering_validator.rb#27
  def validate_each(record, attribute, value); end
end

# source://can_has_validations//lib/can_has_validations/validators/array_validator.rb#37
class ActiveModel::Validations::ArrayValidator < ::ActiveModel::EachValidator
  # @raise [ArgumentError]
  # @return [ArrayValidator] a new instance of ArrayValidator
  #
  # source://can_has_validations//lib/can_has_validations/validators/array_validator.rb#40
  def initialize(options); end

  # source://can_has_validations//lib/can_has_validations/validators/array_validator.rb#71
  def validate_each(record, attribute, array_values); end

  # source://can_has_validations//lib/can_has_validations/validators/array_validator.rb#86
  def validate_one(validator, record, attribute, value); end

  # Returns the value of attribute validators.
  #
  # source://can_has_validations//lib/can_has_validations/validators/array_validator.rb#38
  def validators; end

  private

  # copied from active_model/validations/validates.rb
  #
  # source://can_has_validations//lib/can_has_validations/validators/array_validator.rb#101
  def _parse_validates_options(options); end

  # source://can_has_validations//lib/can_has_validations/validators/array_validator.rb#96
  def count_errors(record); end
end

# source://can_has_validations//lib/can_has_validations/validators/array_validator.rb#115
module ActiveModel::Validations::ArrayValidator::DefaultKeys
  private

  # When creating custom validators, it might be useful to be able to specify
  # additional default keys. This can be done by overwriting this method.
  #
  # source://can_has_validations//lib/can_has_validations/validators/array_validator.rb#120
  def _validates_default_keys; end
end

# source://can_has_validations//lib/can_has_validations/validators/ordering_validator.rb#11
class ActiveModel::Validations::BeforeValidator < ::ActiveModel::EachValidator
  # source://can_has_validations//lib/can_has_validations/validators/ordering_validator.rb#12
  def validate_each(record, attribute, value); end
end

ActiveModel::Validations::EmailValidator = EmailValidator

# source://can_has_validations//lib/can_has_validations/validators/existence_validator.rb#6
class ActiveModel::Validations::ExistenceValidator < ::ActiveModel::Validations::PresenceValidator
  # source://can_has_validations//lib/can_has_validations/validators/existence_validator.rb#7
  def validate(record); end
end

# source://can_has_validations//lib/can_has_validations/validators/grandparent_validator.rb#8
class ActiveModel::Validations::GrandparentValidator < ::ActiveModel::EachValidator
  # source://can_has_validations//lib/can_has_validations/validators/grandparent_validator.rb#9
  def validate_each(record, attribute, association); end
end

# source://can_has_validations//lib/can_has_validations/validators/hash_keys_validator.rb#22
class ActiveModel::Validations::HashKeysValidator < ::ActiveModel::Validations::ArrayValidator
  # source://can_has_validations//lib/can_has_validations/validators/hash_keys_validator.rb#24
  def validate_each(record, attribute, hash); end
end

# source://can_has_validations//lib/can_has_validations/validators/hash_values_validator.rb#22
class ActiveModel::Validations::HashValuesValidator < ::ActiveModel::Validations::ArrayValidator
  # @return [HashValuesValidator] a new instance of HashValuesValidator
  #
  # source://can_has_validations//lib/can_has_validations/validators/hash_values_validator.rb#24
  def initialize(options); end

  # source://can_has_validations//lib/can_has_validations/validators/hash_values_validator.rb#30
  def validate_each(record, attribute, hash); end

  # source://can_has_validations//lib/can_has_validations/validators/hash_values_validator.rb#34
  def validate_one(validator, record, attribute, key_and_value); end
end

# source://can_has_validations//lib/can_has_validations/validators/hash_values_validator.rb#43
module ActiveModel::Validations::HashValuesValidator::HashValidatorKey
  # source://can_has_validations//lib/can_has_validations/validators/hash_values_validator.rb#44
  def hash_validator_key; end

  # source://can_has_validations//lib/can_has_validations/validators/hash_values_validator.rb#48
  def hash_validator_key=(v); end
end

# source://can_has_validations//lib/can_has_validations/validators/hostname_validator.rb#33
class ActiveModel::Validations::HostnameValidator < ::ActiveModel::EachValidator
  # source://can_has_validations//lib/can_has_validations/validators/hostname_validator.rb#39
  def validate_each(record, attribute, value); end
end

# source://can_has_validations//lib/can_has_validations/validators/hostname_validator.rb#36
ActiveModel::Validations::HostnameValidator::FINAL_LABEL_REGEXP = T.let(T.unsafe(nil), Regexp)

# source://can_has_validations//lib/can_has_validations/validators/hostname_validator.rb#35
ActiveModel::Validations::HostnameValidator::LABEL_REGEXP = T.let(T.unsafe(nil), Regexp)

# source://can_has_validations//lib/can_has_validations/validators/hostname_validator.rb#37
ActiveModel::Validations::HostnameValidator::RESERVED_OPTIONS = T.let(T.unsafe(nil), Array)

# source://can_has_validations//lib/can_has_validations/validators/ipaddr_validator.rb#14
class ActiveModel::Validations::IpaddrValidator < ::ActiveModel::EachValidator
  # @return [IpaddrValidator] a new instance of IpaddrValidator
  #
  # source://can_has_validations//lib/can_has_validations/validators/ipaddr_validator.rb#16
  def initialize(options); end

  # source://can_has_validations//lib/can_has_validations/validators/ipaddr_validator.rb#22
  def validate_each(record, attribute, value); end

  private

  # @return [Boolean]
  #
  # source://can_has_validations//lib/can_has_validations/validators/ipaddr_validator.rb#50
  def ip_within_block?(ip, blk); end

  # source://can_has_validations//lib/can_has_validations/validators/ipaddr_validator.rb#57
  def normalize_within(val, key); end

  # source://can_has_validations//lib/can_has_validations/validators/ipaddr_validator.rb#74
  def resolve_array(record, val); end
end

# source://can_has_validations//lib/can_has_validations/validators/url_validator.rb#15
class ActiveModel::Validations::UrlValidator < ::ActiveModel::EachValidator
  # source://validate_url/1.0.15/lib/validate_url.rb#11
  def initialize(options); end

  # source://validate_url/1.0.15/lib/validate_url.rb#21
  def validate_each(record, attribute, value); end

  protected

  # source://validate_url/1.0.15/lib/validate_url.rb#46
  def filtered_options(value); end

  # source://validate_url/1.0.15/lib/validate_url.rb#52
  def validate_url(record, attribute, value, schemes); end
end

# source://validate_url/1.0.15/lib/validate_url.rb#9
ActiveModel::Validations::UrlValidator::RESERVED_OPTIONS = T.let(T.unsafe(nil), Array)

# source://can_has_validations//lib/can_has_validations/validators/write_once_validator.rb#10
class ActiveModel::Validations::WriteOnceValidator < ::ActiveModel::EachValidator
  # as of ActiveModel 4, allow_nil: true causes a change from a value back to
  #   nil to be allowed. prevent this.
  #
  # source://can_has_validations//lib/can_has_validations/validators/write_once_validator.rb#13
  def validate(record); end

  # source://can_has_validations//lib/can_has_validations/validators/write_once_validator.rb#19
  def validate_each(record, attribute, _); end
end
