# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `faraday-mashify` gem.
# Please instead update this file by running `bin/tapioca gem faraday-mashify`.

# source://faraday-mashify//lib/faraday/mashify/middleware.rb#3
module Faraday
  class << self
    # source://faraday/2.7.3/lib/faraday.rb#55
    def default_adapter; end

    # source://faraday/2.7.3/lib/faraday.rb#102
    def default_adapter=(adapter); end

    # source://faraday/2.7.3/lib/faraday.rb#59
    def default_adapter_options; end

    # source://faraday/2.7.3/lib/faraday.rb#59
    def default_adapter_options=(_arg0); end

    # source://faraday/2.7.3/lib/faraday.rb#120
    def default_connection; end

    # source://faraday/2.7.3/lib/faraday.rb#62
    def default_connection=(_arg0); end

    # source://faraday/2.7.3/lib/faraday.rb#127
    def default_connection_options; end

    # source://faraday/2.7.3/lib/faraday.rb#134
    def default_connection_options=(options); end

    # source://faraday/2.7.3/lib/faraday.rb#67
    def ignore_env_proxy; end

    # source://faraday/2.7.3/lib/faraday.rb#67
    def ignore_env_proxy=(_arg0); end

    # source://faraday/2.7.3/lib/faraday.rb#46
    def lib_path; end

    # source://faraday/2.7.3/lib/faraday.rb#46
    def lib_path=(_arg0); end

    # source://faraday/2.7.3/lib/faraday.rb#96
    def new(url = T.unsafe(nil), options = T.unsafe(nil), &block); end

    # source://faraday/2.7.3/lib/faraday.rb#107
    def respond_to_missing?(symbol, include_private = T.unsafe(nil)); end

    # source://faraday/2.7.3/lib/faraday.rb#42
    def root_path; end

    # source://faraday/2.7.3/lib/faraday.rb#42
    def root_path=(_arg0); end

    private

    # source://faraday/2.7.3/lib/faraday.rb#143
    def method_missing(name, *args, &block); end
  end
end

# source://faraday/2.7.3/lib/faraday.rb#34
Faraday::CONTENT_TYPE = T.let(T.unsafe(nil), String)

# source://faraday-multipart/1.0.4/lib/faraday/multipart.rb#18
Faraday::CompositeReadIO = Faraday::Multipart::CompositeReadIO

# source://faraday-multipart/1.0.4/lib/faraday/multipart.rb#15
Faraday::FilePart = Multipart::Post::UploadIO

# source://faraday/2.7.3/lib/faraday/methods.rb#5
Faraday::METHODS_WITH_BODY = T.let(T.unsafe(nil), Array)

# source://faraday/2.7.3/lib/faraday/methods.rb#4
Faraday::METHODS_WITH_QUERY = T.let(T.unsafe(nil), Array)

# This will be your middleware main module, though the actual middleware implementation will go
# into Faraday::Mashify::Middleware for the correct namespacing.
#
# source://faraday-mashify//lib/faraday/mashify/middleware.rb#4
module Faraday::Mashify; end

# Public: Converts parsed response bodies to a Hashie::Mash if they were of Hash or Array type.
#
# source://faraday-mashify//lib/faraday/mashify/middleware.rb#6
class Faraday::Mashify::Middleware < ::Faraday::Middleware
  # @option options
  # @param app [Proc]
  # @param options [Hash]
  # @return [Middleware] a new instance of Middleware
  #
  # source://faraday-mashify//lib/faraday/mashify/middleware.rb#20
  def initialize(app = T.unsafe(nil), options = T.unsafe(nil)); end

  # @return [Class]
  #
  # source://faraday-mashify//lib/faraday/mashify/middleware.rb#9
  def mash_class; end

  # Sets the attribute mash_class
  #
  # @param value the value to set the attribute mash_class to.
  #
  # source://faraday-mashify//lib/faraday/mashify/middleware.rb#9
  def mash_class=(_arg0); end

  # This method will be called when the response is being processed.
  # You can alter it as you like, accessing things like response_body, response_headers, and more.
  # Refer to Faraday::Env for a list of accessible fields:
  # https://github.com/lostisland/faraday/blob/main/lib/faraday/options/env.rb
  #
  # @param env [Faraday::Env] the environment of the response being processed.
  #
  # source://faraday-mashify//lib/faraday/mashify/middleware.rb#31
  def on_complete(env); end

  private

  # source://faraday-mashify//lib/faraday/mashify/middleware.rb#37
  def parse(body); end

  class << self
    # @return [Class]
    #
    # source://faraday-mashify//lib/faraday/mashify/middleware.rb#14
    def mash_class; end

    # Sets the attribute mash_class
    #
    # @param value the value to set the attribute mash_class to.
    #
    # source://faraday-mashify//lib/faraday/mashify/middleware.rb#14
    def mash_class=(_arg0); end
  end
end

# source://faraday-mashify//lib/faraday/mashify/version.rb#5
Faraday::Mashify::VERSION = T.let(T.unsafe(nil), String)

# source://faraday-multipart/1.0.4/lib/faraday/multipart.rb#16
Faraday::ParamPart = Faraday::Multipart::ParamPart

# source://faraday-multipart/1.0.4/lib/faraday/multipart.rb#17
Faraday::Parts = Multipart::Post::Parts

# source://faraday-multipart/1.0.4/lib/faraday/multipart.rb#21
Faraday::UploadIO = Multipart::Post::UploadIO

# source://faraday/2.7.3/lib/faraday/version.rb#4
Faraday::VERSION = T.let(T.unsafe(nil), String)
