# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `mime-types` gem.
# Please instead update this file by running `bin/tapioca gem mime-types`.

# The namespace for MIME applications, tools, and libraries.
module MIME; end

# The definition of one MIME content-type.
#
# == Usage
#  require 'mime/types'
#
#  plaintext = MIME::Types['text/plain'] # => [ text/plain ]
#  text = plaintext.first
#  puts text.media_type            # => 'text'
#  puts text.sub_type              # => 'plain'
#
#  puts text.extensions.join(' ')  # => 'txt asc c cc h hh cpp hpp dat hlp'
#  puts text.preferred_extension   # => 'txt'
#  puts text.friendly              # => 'Text Document'
#  puts text.i18n_key              # => 'text.plain'
#
#  puts text.encoding              # => quoted-printable
#  puts text.default_encoding      # => quoted-printable
#  puts text.binary?               # => false
#  puts text.ascii?                # => true
#  puts text.obsolete?             # => false
#  puts text.registered?           # => true
#  puts text.provisional?          # => false
#  puts text.complete?             # => true
#
#  puts text                       # => 'text/plain'
#
#  puts text == 'text/plain'       # => true
#  puts 'text/plain' == text       # => true
#  puts text == 'text/x-plain'     # => false
#  puts 'text/x-plain' == text     # => false
#
#  puts MIME::Type.simplified('x-appl/x-zip') # => 'x-appl/x-zip'
#  puts MIME::Type.i18n_key('x-appl/x-zip') # => 'x-appl.x-zip'
#
#  puts text.like?('text/x-plain') # => true
#  puts text.like?(MIME::Type.new('x-text/x-plain')) # => true
#
#  puts text.xrefs.inspect # => { "rfc" => [ "rfc2046", "rfc3676", "rfc5147" ] }
#  puts text.xref_urls # => [ "http://www.iana.org/go/rfc2046",
#                      #      "http://www.iana.org/go/rfc3676",
#                      #      "http://www.iana.org/go/rfc5147" ]
#
#  xtext = MIME::Type.new('x-text/x-plain')
#  puts xtext.media_type # => 'text'
#  puts xtext.raw_media_type # => 'x-text'
#  puts xtext.sub_type # => 'plain'
#  puts xtext.raw_sub_type # => 'x-plain'
#  puts xtext.complete? # => false
#
#  puts MIME::Types.any? { |type| type.content_type == 'text/plain' } # => true
#  puts MIME::Types.all?(&:registered?) # => false
#
#  # Various string representations of MIME types
#  qcelp = MIME::Types['audio/QCELP'].first # => audio/QCELP
#  puts qcelp.content_type         # => 'audio/QCELP'
#  puts qcelp.simplified           # => 'audio/qcelp'
#
#  xwingz = MIME::Types['application/x-Wingz'].first # => application/x-Wingz
#  puts xwingz.content_type        # => 'application/x-Wingz'
#  puts xwingz.simplified          # => 'application/x-wingz'
class MIME::Type
  include ::Comparable

  # Builds a MIME::Type object from the +content_type+, a MIME Content Type
  # value (e.g., 'text/plain' or 'application/x-eruby'). The constructed object
  # is yielded to an optional block for additional configuration, such as
  # associating extensions and encoding information.
  #
  # * When provided a Hash or a MIME::Type, the MIME::Type will be
  #   constructed with #init_with.
  # * When provided an Array, the MIME::Type will be constructed using
  #   the first element as the content type and the remaining flattened
  #   elements as extensions.
  # * Otherwise, the content_type will be used as a string.
  #
  # Yields the newly constructed +self+ object.
  #
  # @return [Type] a new instance of Type
  # @yield [_self]
  # @yieldparam _self [MIME::Type] the object that the method was called on
  def initialize(content_type); end

  # Compares the +other+ MIME::Type against the exact content type or the
  # simplified type (the simplified type will be used if comparing against
  # something that can be treated as a String with #to_s). In comparisons, this
  # is done against the lowercase version of the MIME::Type.
  def <=>(other); end

  # Merge the +extensions+ provided into this MIME::Type. The extensions added
  # will be merged uniquely.
  def add_extensions(*extensions); end

  # MIME types can be specified to be sent across a network in particular
  # formats. This method returns +false+ when the MIME::Type encoding is
  # set to <tt>base64</tt>.
  #
  # @return [Boolean]
  def ascii?; end

  # MIME types can be specified to be sent across a network in particular
  # formats. This method returns +true+ when the MIME::Type encoding is set
  # to <tt>base64</tt>.
  #
  # @return [Boolean]
  def binary?; end

  # Returns +true+ if the MIME::Type specifies an extension list,
  # indicating that it is a complete MIME::Type.
  #
  # @return [Boolean]
  def complete?; end

  # Returns the whole MIME content-type string.
  #
  # The content type is a presentation value from the MIME type registry and
  # should not be used for comparison. The case of the content type is
  # preserved, and extension markers (<tt>x-</tt>) are kept.
  #
  #   text/plain        => text/plain
  #   x-chemical/x-pdb  => x-chemical/x-pdb
  #   audio/QCELP       => audio/QCELP
  def content_type; end

  # Returns the default encoding for the MIME::Type based on the media type.
  def default_encoding; end

  # The documentation for this MIME::Type.
  def docs; end

  # The documentation for this MIME::Type.
  def docs=(_arg0); end

  # Populates the +coder+ with attributes about this record for
  # serialization. The structure of +coder+ should match the structure used
  # with #init_with.
  #
  # This method should be considered a private implementation detail.
  def encode_with(coder); end

  # Returns the value of attribute encoding.
  def encoding; end

  def encoding=(enc); end

  # Returns +true+ if the +other+ object is a MIME::Type and the content types
  # match.
  #
  # @return [Boolean]
  def eql?(other); end

  # The list of extensions which are known to be used for this MIME::Type.
  # Non-array values will be coerced into an array with #to_a. Array values
  # will be flattened, +nil+ values removed, and made unique.
  #
  # :attr_accessor: extensions
  def extensions; end

  def extensions=(value); end

  # A friendly short description for this MIME::Type.
  #
  # call-seq:
  #   text_plain.friendly         # => "Text File"
  #   text_plain.friendly('en')   # => "Text File"
  def friendly(lang = T.unsafe(nil)); end

  # A key suitable for use as a lookup key for translations, such as with
  # the I18n library.
  #
  # call-seq:
  #    text_plain.i18n_key # => "text.plain"
  #    3gpp_xml.i18n_key   # => "application.vnd-3gpp-bsf-xml"
  #      # from application/vnd.3gpp.bsf+xml
  #    x_msword.i18n_key   # => "application.word"
  #      # from application/x-msword
  def i18n_key; end

  # Initialize an empty object from +coder+, which must contain the
  # attributes necessary for initializing an empty object.
  #
  # This method should be considered a private implementation detail.
  def init_with(coder); end

  def inspect; end

  # Indicates that a MIME type is like another type. This differs from
  # <tt>==</tt> because <tt>x-</tt> prefixes are removed for this comparison.
  #
  # @return [Boolean]
  def like?(other); end

  # Returns the media type of the simplified MIME::Type.
  #
  #   text/plain        => text
  #   x-chemical/x-pdb  => x-chemical
  #   audio/QCELP       => audio
  def media_type; end

  # Returns +true+ if the media type is obsolete.
  def obsolete; end

  # Returns +true+ if the media type is obsolete.
  def obsolete=(_arg0); end

  # Returns +true+ if the media type is obsolete.
  def obsolete?; end

  def preferred_extension; end
  def preferred_extension=(value); end

  # Compares the +other+ MIME::Type based on how reliable it is before doing a
  # normal <=> comparison. Used by MIME::Types#[] to sort types. The
  # comparisons involved are:
  #
  # 1. self.simplified <=> other.simplified (ensures that we
  #    don't try to compare different types)
  # 2. IANA-registered definitions < other definitions.
  # 3. Complete definitions < incomplete definitions.
  # 4. Current definitions < obsolete definitions.
  # 5. Obselete with use-instead names < obsolete without.
  # 6. Obsolete use-instead definitions are compared.
  #
  # While this method is public, its use is strongly discouraged by consumers
  # of mime-types. In mime-types 3, this method is likely to see substantial
  # revision and simplification to ensure current registered content types sort
  # before unregistered or obsolete content types.
  def priority_compare(other); end

  # Indicates whether the MIME type's registration with IANA is provisional.
  def provisional; end

  # Indicates whether the MIME type's registration with IANA is provisional.
  def provisional=(_arg0); end

  # Indicates whether the MIME type's registration with IANA is provisional.
  #
  # @return [Boolean]
  def provisional?; end

  # Returns the media type of the unmodified MIME::Type.
  #
  #   text/plain        => text
  #   x-chemical/x-pdb  => x-chemical
  #   audio/QCELP       => audio
  def raw_media_type; end

  # Returns the media type of the unmodified MIME::Type.
  #
  #   text/plain        => plain
  #   x-chemical/x-pdb  => x-pdb
  #   audio/QCELP       => qcelp
  def raw_sub_type; end

  # Indicates whether the MIME type has been registered with IANA.
  def registered; end

  # Indicates whether the MIME type has been registered with IANA.
  def registered=(_arg0); end

  # Indicates whether the MIME type has been registered with IANA.
  def registered?; end

  # Indicateswhether the MIME type is declared as a signature type.
  def signature; end

  # Indicateswhether the MIME type is declared as a signature type.
  def signature=(_arg0); end

  # Indicateswhether the MIME type is declared as a signature type.
  def signature?; end

  # A simplified form of the MIME content-type string, suitable for
  # case-insensitive comparison, with the content_type converted to lowercase.
  #
  #   text/plain        => text/plain
  #   x-chemical/x-pdb  => x-chemical/x-pdb
  #   audio/QCELP       => audio/qcelp
  def simplified; end

  # Returns the sub-type of the simplified MIME::Type.
  #
  #   text/plain        => plain
  #   x-chemical/x-pdb  => pdb
  #   audio/QCELP       => QCELP
  def sub_type; end

  # Converts the MIME::Type to a hash. The output of this method can also be
  # used to initialize a MIME::Type.
  def to_h; end

  # Converts the MIME::Type to a JSON string.
  def to_json(*args); end

  # Returns the MIME::Type as a string.
  def to_s; end

  # Returns the MIME::Type as a string for implicit conversions. This allows
  # MIME::Type objects to appear on either side of a comparison.
  #
  #   'text/plain' == MIME::Type.new('text/plain')
  def to_str; end

  def use_instead; end

  # Sets the attribute use_instead
  #
  # @param value the value to set the attribute use_instead to.
  def use_instead=(_arg0); end

  # The decoded cross-reference URL list for this MIME::Type.
  def xref_urls; end

  # Returns the value of attribute xrefs.
  def xrefs; end

  def xrefs=(xrefs); end

  private

  def content_type=(type_string); end

  # MRI 2.2 and older don't have a method for string interning,
  # so we simply freeze them for keeping a similar interface
  def intern_string(string); end

  def xref_map(values, helper); end
  def xref_url_for_draft(value); end
  def xref_url_for_person(value); end
  def xref_url_for_rfc(value); end
  def xref_url_for_rfc_errata(value); end
  def xref_url_for_template(value); end

  class << self
    # Converts a provided +content_type+ into a translation key suitable for
    # use with the I18n library.
    def i18n_key(content_type); end

    # Return a +MatchData+ object of the +content_type+ against pattern of
    # media types.
    def match(content_type); end

    # MIME media types are case-insensitive, but are typically presented in a
    # case-preserving format in the type registry. This method converts
    # +content_type+ to lowercase.
    #
    # In previous versions of mime-types, this would also remove any extension
    # prefix (<tt>x-</tt>). This is no longer default behaviour, but may be
    # provided by providing a truth value to +remove_x_prefix+.
    def simplified(content_type, remove_x_prefix: T.unsafe(nil)); end

    private

    def simplify_matchdata(matchdata, remove_x = T.unsafe(nil), joiner: T.unsafe(nil)); end
  end
end

MIME::Type::ASCII_ENCODINGS = T.let(T.unsafe(nil), Array)
MIME::Type::BINARY_ENCODINGS = T.let(T.unsafe(nil), Array)

# A version of MIME::Type that works hand-in-hand with a MIME::Types::Columnar
# container to load data by columns.
#
# When a field is has not yet been loaded, that data will be loaded for all
# types in the container before forwarding the message to MIME::Type.
#
# More information can be found in MIME::Types::Columnar.
#
# MIME::Type::Columnar is *not* intended to be created except by
# MIME::Types::Columnar containers.
class MIME::Type::Columnar < ::MIME::Type
  # @return [Columnar] a new instance of Columnar
  def initialize(container, content_type, extensions); end

  def docs(*args); end
  def docs=(*args); end
  def encode_with(coder); end
  def encoding(*args); end
  def encoding=(*args); end
  def friendly(*args); end
  def obsolete(*args); end
  def obsolete=(*args); end
  def obsolete?(*args); end
  def preferred_extension(*args); end
  def preferred_extension=(*args); end
  def provisional(*args); end
  def provisional=(*args); end
  def provisional?(*args); end
  def registered(*args); end
  def registered=(*args); end
  def registered?(*args); end
  def signature(*args); end
  def signature=(*args); end
  def signature?(*args); end
  def use_instead(*args); end
  def use_instead=(*args); end
  def xref_urls(*args); end
  def xrefs(*args); end
  def xrefs=(*args); end
end

MIME::Type::I18N_RE = T.let(T.unsafe(nil), Regexp)

# Reflects a MIME content-type specification that is not correctly
# formatted (it isn't +type+/+subtype+).
class MIME::Type::InvalidContentType < ::ArgumentError
  # :stopdoc:
  #
  # @return [InvalidContentType] a new instance of InvalidContentType
  def initialize(type_string); end

  def to_s; end
end

# Reflects an unsupported MIME encoding.
class MIME::Type::InvalidEncoding < ::ArgumentError
  # :stopdoc:
  #
  # @return [InvalidEncoding] a new instance of InvalidEncoding
  def initialize(encoding); end

  def to_s; end
end

# :stopdoc:
# TODO verify mime-type character restrictions; I am pretty sure that this is
# too wide open.
MIME::Type::MEDIA_TYPE_RE = T.let(T.unsafe(nil), Regexp)

# The released version of the mime-types library.
MIME::Type::VERSION = T.let(T.unsafe(nil), String)

# MIME::Types is a registry of MIME types. It is both a class (created with
# MIME::Types.new) and a default registry (loaded automatically or through
# interactions with MIME::Types.[] and MIME::Types.type_for).
#
# == The Default mime-types Registry
#
# The default mime-types registry is loaded automatically when the library
# is required (<tt>require 'mime/types'</tt>), but it may be lazily loaded
# (loaded on first use) with the use of the environment variable
# +RUBY_MIME_TYPES_LAZY_LOAD+ having any value other than +false+. The
# initial startup is about 14× faster (~10 ms vs ~140 ms), but the
# registry will be loaded at some point in the future.
#
# The default mime-types registry can also be loaded from a Marshal cache
# file specific to the version of MIME::Types being loaded. This will be
# handled automatically with the use of a file referred to in the
# environment variable +RUBY_MIME_TYPES_CACHE+. MIME::Types will attempt to
# load the registry from this cache file (MIME::Type::Cache.load); if it
# cannot be loaded (because the file does not exist, there is an error, or
# the data is for a different version of mime-types), the default registry
# will be loaded from the normal JSON version and then the cache file will
# be *written* to the location indicated by +RUBY_MIME_TYPES_CACHE+. Cache
# file loads just over 4½× faster (~30 ms vs ~140 ms).
# loads.
#
# Notes:
# * The loading of the default registry is *not* atomic; when using a
#   multi-threaded environment, it is recommended that lazy loading is not
#   used and mime-types is loaded as early as possible.
# * Cache files should be specified per application in a multiprocess
#   environment and should be initialized during deployment or before
#   forking to minimize the chance that the multiple processes will be
#   trying to write to the same cache file at the same time, or that two
#   applications that are on different versions of mime-types would be
#   thrashing the cache.
# * Unless cache files are preinitialized, the application using the
#   mime-types cache file must have read/write permission to the cache file.
#
# == Usage
#  require 'mime/types'
#
#  plaintext = MIME::Types['text/plain']
#  print plaintext.media_type           # => 'text'
#  print plaintext.sub_type             # => 'plain'
#
#  puts plaintext.extensions.join(" ")  # => 'asc txt c cc h hh cpp'
#
#  puts plaintext.encoding              # => 8bit
#  puts plaintext.binary?               # => false
#  puts plaintext.ascii?                # => true
#  puts plaintext.obsolete?             # => false
#  puts plaintext.registered?           # => true
#  puts plaintext.provisional?          # => false
#  puts plaintext == 'text/plain'       # => true
#  puts MIME::Type.simplified('x-appl/x-zip') # => 'appl/zip'
class MIME::Types
  include ::Enumerable
  extend ::Enumerable

  # Creates a new MIME::Types registry.
  #
  # @return [Types] a new instance of Types
  def initialize; end

  # Returns a list of MIME::Type objects, which may be empty. The optional
  # flag parameters are <tt>:complete</tt> (finds only complete MIME::Type
  # objects) and <tt>:registered</tt> (finds only MIME::Types that are
  # registered). It is possible for multiple matches to be returned for
  # either type (in the example below, 'text/plain' returns two values --
  # one for the general case, and one for VMS systems).
  #
  #   puts "\nMIME::Types['text/plain']"
  #   MIME::Types['text/plain'].each { |t| puts t.to_a.join(", ") }
  #
  #   puts "\nMIME::Types[/^image/, complete: true]"
  #   MIME::Types[/^image/, :complete => true].each do |t|
  #     puts t.to_a.join(", ")
  #   end
  #
  # If multiple type definitions are returned, returns them sorted as
  # follows:
  #   1. Complete definitions sort before incomplete ones;
  #   2. IANA-registered definitions sort before LTSW-recorded
  #      definitions.
  #   3. Current definitions sort before obsolete ones;
  #   4. Obsolete definitions with use-instead clauses sort before those
  #      without;
  #   5. Obsolete definitions use-instead clauses are compared.
  #   6. Sort on name.
  def [](type_id, complete: T.unsafe(nil), registered: T.unsafe(nil)); end

  # Add one or more MIME::Type objects to the set of known types. If the
  # type is already known, a warning will be displayed.
  #
  # The last parameter may be the value <tt>:silent</tt> or +true+ which
  # will suppress duplicate MIME type warnings.
  def add(*types); end

  # Add a single MIME::Type object to the set of known types. If the +type+ is
  # already known, a warning will be displayed. The +quiet+ parameter may be a
  # truthy value to suppress that warning.
  def add_type(type, quiet = T.unsafe(nil)); end

  # Returns the number of known type variants.
  def count; end

  # Iterates through the type variants.
  def each; end

  def inspect; end

  # Return the list of MIME::Types which belongs to the file based on its
  # filename extension. If there is no extension, the filename will be used
  # as the matching criteria on its own.
  #
  # This will always return a merged, flatten, priority sorted, unique array.
  #
  #   puts MIME::Types.type_for('citydesk.xml')
  #     => [application/xml, text/xml]
  #   puts MIME::Types.type_for('citydesk.gif')
  #     => [image/gif]
  #   puts MIME::Types.type_for(%w(citydesk.xml citydesk.gif))
  #     => [application/xml, image/gif, text/xml]
  def of(filename); end

  # Return the list of MIME::Types which belongs to the file based on its
  # filename extension. If there is no extension, the filename will be used
  # as the matching criteria on its own.
  #
  # This will always return a merged, flatten, priority sorted, unique array.
  #
  #   puts MIME::Types.type_for('citydesk.xml')
  #     => [application/xml, text/xml]
  #   puts MIME::Types.type_for('citydesk.gif')
  #     => [image/gif]
  #   puts MIME::Types.type_for(%w(citydesk.xml citydesk.gif))
  #     => [application/xml, image/gif, text/xml]
  def type_for(filename); end

  private

  def add_type_variant!(mime_type); end
  def index_extensions!(mime_type); end
  def match(pattern); end
  def prune_matches(matches, complete, registered); end
  def reindex_extensions!(mime_type); end

  class << self
    # MIME::Types#[] against the default MIME::Types registry.
    def [](type_id, complete: T.unsafe(nil), registered: T.unsafe(nil)); end

    # MIME::Types#add against the default MIME::Types registry.
    def add(*types); end

    # MIME::Types#count against the default MIME::Types registry.
    def count; end

    # MIME::Types#each against the default MIME::Types registry.
    def each; end

    # Configure the MIME::Types logger. This defaults to an instance of a
    # logger that passes messages (unformatted) through to Kernel#warn.
    def logger; end

    # Configure the MIME::Types logger. This defaults to an instance of a
    # logger that passes messages (unformatted) through to Kernel#warn.
    def logger=(_arg0); end

    def new(*_arg0); end

    # MIME::Types#type_for against the default MIME::Types registry.
    def of(filename); end

    # MIME::Types#type_for against the default MIME::Types registry.
    def type_for(filename); end

    private

    def __instances__; end
    def __types__; end

    # @return [Boolean]
    def lazy_load?; end

    def load_default_mime_types(mode = T.unsafe(nil)); end
    def load_mode; end
    def reindex_extensions(type); end
  end
end

# Caching of MIME::Types registries is advisable if you will be loading
# the default registry relatively frequently. With the class methods on
# MIME::Types::Cache, any MIME::Types registry can be marshaled quickly
# and easily.
#
# The cache is invalidated on a per-data-version basis; a cache file for
# version 3.2015.1118 will not be reused with version 3.2015.1201.
class MIME::Types::Cache < ::Struct
  def data; end
  def data=(_); end
  def version; end
  def version=(_); end

  class << self
    def [](*_arg0); end
    def inspect; end
    def keyword_init?; end

    # Attempts to load the cache from the file provided as a parameter or in
    # the environment variable +RUBY_MIME_TYPES_CACHE+. Returns +nil+ if the
    # file does not exist, if the file cannot be loaded, or if the data in
    # the cache version is different than this version.
    def load(cache_file = T.unsafe(nil)); end

    def members; end
    def new(*_arg0); end

    # Attempts to save the types provided to the cache file provided.
    #
    # If +types+ is not provided or is +nil+, the cache will contain the
    # current MIME::Types default registry.
    #
    # If +cache_file+ is not provided or is +nil+, the cache will be written
    # to the file specified in the environment variable
    # +RUBY_MIME_TYPES_CACHE+. If there is no cache file specified either
    # directly or through the environment, this method will return +nil+
    def save(types = T.unsafe(nil), cache_file = T.unsafe(nil)); end
  end
end

# MIME::Types::Columnar is used to extend a MIME::Types container to load data
# by columns instead of from JSON or YAML. Column loads of MIME types loaded
# through the columnar store are synchronized with a Mutex.
#
# MIME::Types::Columnar is not intended to be used directly, but will be added
# to an instance of MIME::Types when it is loaded with
# MIME::Types::Loader#load_columnar.
module MIME::Types::Columnar
  # Load the first column data file (type and extensions).
  def load_base_data(path); end

  private

  def arr(line); end
  def dict(line, array: T.unsafe(nil)); end
  def each_file_line(name, lookup = T.unsafe(nil)); end
  def flag(line); end
  def load_docs; end
  def load_encoding; end
  def load_flags; end
  def load_friendly; end
  def load_preferred_extension; end
  def load_use_instead; end
  def load_xrefs; end
  def opt(line); end

  class << self
    def extended(obj); end
  end
end

MIME::Types::Columnar::LOAD_MUTEX = T.let(T.unsafe(nil), Thread::Mutex)

# MIME::Types requires a serializable keyed container that returns an empty Set
# on a key miss. Hash#default_value cannot be used because, while it traverses
# the Marshal format correctly, it won't survive any other serialization
# format (plus, a default of a mutable object resuls in a shared mess).
# Hash#default_proc cannot be used without a wrapper because it prevents
# Marshal serialization (and doesn't survive the round-trip).
class MIME::Types::Container
  extend ::Forwardable

  # @return [Container] a new instance of Container
  def initialize(hash = T.unsafe(nil)); end

  def ==(*args, **_arg1, &block); end
  def [](key); end
  def []=(key, value); end
  def add(key, value); end
  def count(*args, **_arg1, &block); end
  def each(*args, **_arg1, &block); end
  def each_value(*args, **_arg1, &block); end
  def empty?(*args, **_arg1, &block); end
  def encode_with(coder); end
  def flat_map(*args, **_arg1, &block); end
  def init_with(coder); end
  def keys(*args, **_arg1, &block); end
  def marshal_dump; end
  def marshal_load(hash); end
  def merge(other); end
  def merge!(other); end
  def select(*args, **_arg1, &block); end
  def to_hash; end
  def values(*args, **_arg1, &block); end

  protected

  # Returns the value of attribute container.
  def container; end

  # Sets the attribute container
  #
  # @param value the value to set the attribute container to.
  def container=(_arg0); end

  def normalize; end
end

MIME::Types::Container::EMPTY_SET = T.let(T.unsafe(nil), Set)

# This class is responsible for initializing the MIME::Types registry from
# the data files supplied with the mime-types library.
#
# The Loader will use one of the following paths:
# 1.  The +path+ provided in its constructor argument;
# 2.  The value of ENV['RUBY_MIME_TYPES_DATA']; or
# 3.  The value of MIME::Types::Data::PATH.
#
# When #load is called, the +path+ will be searched recursively for all YAML
# (.yml or .yaml) files. By convention, there is one file for each media
# type (application.yml, audio.yml, etc.), but this is not required.
class MIME::Types::Loader
  # Creates a Loader object that can be used to load MIME::Types registries
  # into memory, using YAML, JSON, or Columnar registry format loaders.
  #
  # @return [Loader] a new instance of Loader
  def initialize(path = T.unsafe(nil), container = T.unsafe(nil)); end

  # The MIME::Types container instance that will be loaded. If not provided
  # at initialization, a new MIME::Types instance will be constructed.
  def container; end

  # Loads a MIME::Types registry. Loads from JSON files by default
  # (#load_json).
  #
  # This will load from columnar files (#load_columnar) if <tt>columnar:
  # true</tt> is provided in +options+ and there are columnar files in +path+.
  def load(options = T.unsafe(nil)); end

  # Loads a MIME::Types registry from columnar files recursively found in
  # +path+.
  def load_columnar; end

  # Loads a MIME::Types registry from JSON files (<tt>*.json</tt>)
  # recursively found in +path+.
  #
  # It is expected that the JSON objects will be an array of hash objects.
  # The JSON format is the registry format for the MIME types registry
  # shipped with the mime-types library.
  def load_json; end

  # Loads a MIME::Types registry from YAML files (<tt>*.yml</tt> or
  # <tt>*.yaml</tt>) recursively found in +path+.
  #
  # It is expected that the YAML objects contained within the registry array
  # will be tagged as <tt>!ruby/object:MIME::Type</tt>.
  #
  # Note that the YAML format is about 2½ times *slower* than the JSON format.
  #
  # NOTE: The purpose of this format is purely for maintenance reasons.
  def load_yaml; end

  # The path that will be read for the MIME::Types files.
  def path; end

  private

  def columnar_path; end
  def json_path; end
  def yaml_path; end

  class << self
    # Loads the default MIME::Type registry.
    def load(options = T.unsafe(nil)); end

    # Loads MIME::Types from a single JSON file.
    #
    # It is expected that the JSON objects will be an array of hash objects.
    # The JSON format is the registry format for the MIME types registry
    # shipped with the mime-types library.
    def load_from_json(filename); end

    # Loads MIME::Types from a single YAML file.
    #
    # It is expected that the YAML objects contained within the registry
    # array will be tagged as <tt>!ruby/object:MIME::Type</tt>.
    #
    # Note that the YAML format is about 2½ times *slower* than the JSON
    # format.
    #
    # NOTE: The purpose of this format is purely for maintenance reasons.
    def load_from_yaml(filename); end

    private

    # @return [Boolean]
    def old_yaml?; end

    def read_file(filename); end
  end
end

# The release version of Ruby MIME::Types
MIME::Types::VERSION = T.let(T.unsafe(nil), String)

class MIME::Types::WarnLogger < ::Logger
  # @return [WarnLogger] a new instance of WarnLogger
  def initialize(_one, _two = T.unsafe(nil), _three = T.unsafe(nil)); end
end

class MIME::Types::WarnLogger::WarnLogDevice < ::Logger::LogDevice
  # @return [WarnLogDevice] a new instance of WarnLogDevice
  def initialize(*_arg0); end

  def close; end
  def write(m); end
end
