# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `store_model` gem.
# Please instead update this file by running `bin/tapioca gem store_model`.

# source://store_model//lib/active_model/validations/store_model_validator.rb#6
module ActiveModel
  class << self
    # source://activemodel/7.0.6/lib/active_model.rb#72
    def eager_load!; end

    # source://activemodel/7.0.6/lib/active_model/gem_version.rb#5
    def gem_version; end

    # source://activemodel/7.0.6/lib/active_model/version.rb#7
    def version; end
  end
end

module ActiveModel::Attributes
  include ::StoreModel::ParentAssignment
  include GeneratedInstanceMethods
  include ::ActiveModel::AttributeMethods

  mixes_in_class_methods GeneratedClassMethods
  mixes_in_class_methods ::ActiveModel::AttributeMethods::ClassMethods
  mixes_in_class_methods ::ActiveModel::Attributes::ClassMethods

  # source://activemodel/7.0.6/lib/active_model/attributes.rb#78
  def initialize(*_arg0); end

  # source://activemodel/7.0.6/lib/active_model/attributes.rb#116
  def attribute_names; end

  # source://activemodel/7.0.6/lib/active_model/attributes.rb#100
  def attributes; end

  # source://activemodel/7.0.6/lib/active_model/attributes.rb#120
  def freeze; end

  private

  # source://store_model//lib/store_model/ext/active_model/attributes.rb#19
  def _write_attribute(*_arg0); end

  # source://store_model//lib/store_model/ext/active_model/attributes.rb#12
  def attribute(*_arg0); end

  # source://activemodel/7.0.6/lib/active_model/attributes.rb#126
  def attribute=(attr_name, value); end

  # source://activemodel/7.0.6/lib/active_model/attributes.rb#83
  def initialize_dup(other); end

  module GeneratedClassMethods
    def _default_attributes; end
    def _default_attributes=(value); end
    def _default_attributes?; end
    def attribute_aliases; end
    def attribute_aliases=(value); end
    def attribute_aliases?; end
    def attribute_method_matchers; end
    def attribute_method_matchers=(value); end
    def attribute_method_matchers?; end
    def attribute_types; end
    def attribute_types=(value); end
    def attribute_types?; end
  end

  module GeneratedInstanceMethods
    def attribute_aliases; end
    def attribute_aliases?; end
    def attribute_method_matchers; end
    def attribute_method_matchers?; end
  end
end

# source://store_model//lib/active_model/validations/store_model_validator.rb#7
module ActiveModel::Validations
  include GeneratedInstanceMethods
  include ::ActiveSupport::Callbacks
  include ::ActiveModel::Validations::HelperMethods

  mixes_in_class_methods GeneratedClassMethods
  mixes_in_class_methods ::ActiveModel::Validations::ClassMethods
  mixes_in_class_methods ::ActiveModel::Callbacks
  mixes_in_class_methods ::ActiveSupport::Callbacks::ClassMethods
  mixes_in_class_methods ::ActiveSupport::DescendantsTracker
  mixes_in_class_methods ::ActiveModel::Translation
  mixes_in_class_methods ::ActiveModel::Validations::HelperMethods

  # source://activemodel/7.0.6/lib/active_model/validations.rb#301
  def errors; end

  # source://activemodel/7.0.6/lib/active_model/validations.rb#373
  def invalid?(context = T.unsafe(nil)); end

  def read_attribute_for_validation(*_arg0); end

  # source://activemodel/7.0.6/lib/active_model/validations.rb#334
  def valid?(context = T.unsafe(nil)); end

  # source://activemodel/7.0.6/lib/active_model/validations.rb#334
  def validate(context = T.unsafe(nil)); end

  # source://activemodel/7.0.6/lib/active_model/validations.rb#382
  def validate!(context = T.unsafe(nil)); end

  # source://activemodel/7.0.6/lib/active_model/validations/with.rb#137
  def validates_with(*args, &block); end

  private

  # source://activemodel/7.0.6/lib/active_model/validations.rb#283
  def initialize_dup(other); end

  # source://activemodel/7.0.6/lib/active_model/validations.rb#410
  def raise_validation_error; end

  # source://activemodel/7.0.6/lib/active_model/validations.rb#405
  def run_validations!; end

  module GeneratedClassMethods
    def __callbacks; end
    def __callbacks=(value); end
    def __callbacks?; end
    def _validators; end
    def _validators=(value); end
    def _validators?; end
  end

  module GeneratedInstanceMethods
    def __callbacks; end
    def __callbacks?; end
    def _validators; end
    def _validators?; end
  end
end

# +StoreModelValidator+ is a subclass of ActiveModel::EachValidator for
# checking StoreModel::Model attributes.
#
# source://store_model//lib/active_model/validations/store_model_validator.rb#10
class ActiveModel::Validations::StoreModelValidator < ::ActiveModel::EachValidator
  # Validates _json_ attribute using the configured strategy or
  # invalidates _array_ attribute when at least one element is invalid.
  #
  # @param record [ApplicationRecord] object to validate
  # @param attribute [String] name of the validated attribute
  # @param value [Object] value of the validated attribute
  #
  # source://store_model//lib/active_model/validations/store_model_validator.rb#17
  def validate_each(record, attribute, value); end

  private

  # source://store_model//lib/active_model/validations/store_model_validator.rb#46
  def array_strategy; end

  # source://store_model//lib/active_model/validations/store_model_validator.rb#37
  def call_array_strategy(record, attribute, value); end

  # source://store_model//lib/active_model/validations/store_model_validator.rb#33
  def call_json_strategy(record, attribute, value); end

  # source://store_model//lib/active_model/validations/store_model_validator.rb#42
  def strategy; end
end

# Shared methods for polymorphic classes
#
# source://store_model//lib/store_model/types/polymorphic_helper.rb#4
module PolymorphicHelper
  # @return [Boolean]
  #
  # source://store_model//lib/store_model/types/polymorphic_helper.rb#10
  def implements_model?(klass); end

  # @raise [StoreModel::Types::ExpandWrapperError]
  #
  # source://store_model//lib/store_model/types/polymorphic_helper.rb#5
  def raise_extract_wrapper_error(invalid_klass); end
end

# source://store_model//lib/store_model/types/one_base.rb#5
module StoreModel
  class << self
    # source://store_model//lib/store_model.rb#10
    def config; end

    # source://store_model//lib/store_model.rb#15
    def one_of(&block); end
  end
end

# ActiveModel::Attributes patch with parent tracking support
#
# source://store_model//lib/store_model/ext/active_model/attributes.rb#7
module StoreModel::Attributes
  include ::StoreModel::ParentAssignment

  private

  # source://store_model//lib/store_model/ext/active_model/attributes.rb#19
  def _write_attribute(*_arg0); end

  # source://store_model//lib/store_model/ext/active_model/attributes.rb#12
  def attribute(*_arg0); end
end

# ActiveRecord::Base patch with parent tracking support
#
# source://store_model//lib/store_model/ext/active_record/base.rb#7
module StoreModel::Base
  include ::StoreModel::ParentAssignment

  # source://store_model//lib/store_model/ext/active_record/base.rb#10
  def _read_attribute(*_arg0); end

  # source://store_model//lib/store_model/ext/active_record/base.rb#16
  def _write_attribute(*_arg0); end
end

# Module with built-in strategies for combining errors.
#
# source://store_model//lib/store_model/combine_errors_strategies/mark_invalid_error_strategy.rb#4
module StoreModel::CombineErrorsStrategies
  private

  # Finds a strategy based on +options+ and global config.
  #
  # @param options [Hash]
  # @return [Object] strategy
  #
  # source://store_model//lib/store_model/combine_errors_strategies.rb#17
  def configure(options); end

  # Finds a array strategy based on +options+ and global config.
  #
  # @param options [Hash]
  # @return [Object] strategy
  #
  # source://store_model//lib/store_model/combine_errors_strategies.rb#31
  def configure_array(options); end

  # source://store_model//lib/store_model/combine_errors_strategies.rb#40
  def get_configured_strategy(configured_strategy, true_strategy_class); end

  class << self
    # Finds a strategy based on +options+ and global config.
    #
    # @param options [Hash]
    # @return [Object] strategy
    #
    # source://store_model//lib/store_model/combine_errors_strategies.rb#17
    def configure(options); end

    # Finds a array strategy based on +options+ and global config.
    #
    # @param options [Hash]
    # @return [Object] strategy
    #
    # source://store_model//lib/store_model/combine_errors_strategies.rb#31
    def configure_array(options); end

    # source://store_model//lib/store_model/combine_errors_strategies.rb#40
    def get_configured_strategy(configured_strategy, true_strategy_class); end
  end
end

# +MarkInvalidErrorStrategy+ marks attribute invalid in the parent record.
#
# source://store_model//lib/store_model/combine_errors_strategies/mark_invalid_error_strategy.rb#6
class StoreModel::CombineErrorsStrategies::MarkInvalidErrorStrategy
  # Invalidates +attribute+ in the parent record.
  #
  # StoreModel::Model attribute
  #
  # @param attribute [String] name of the validated attribute
  # @param base_errors [ActiveModel::Errors] errors object of the parent record
  # @param _store_model_errors [ActiveModel::Errors] errors object of the
  #
  # source://store_model//lib/store_model/combine_errors_strategies/mark_invalid_error_strategy.rb#13
  def call(attribute, base_errors, _store_model_errors); end
end

# +MergeArrayErrorStrategy+ copies errors from the StoreModel::Model to the parent
# record attribute errors.
#
# source://store_model//lib/store_model/combine_errors_strategies/merge_array_error_strategy.rb#7
class StoreModel::CombineErrorsStrategies::MergeArrayErrorStrategy
  # Merges errors on +attribute+ from the child model with parent errors.
  #
  # @param attribute [String] name of the validated attribute
  # @param base_errors [ActiveModel::Errors] errors object of the parent record
  # @param store_models [Array] an array or store_models that have been validated
  #
  # source://store_model//lib/store_model/combine_errors_strategies/merge_array_error_strategy.rb#13
  def call(attribute, base_errors, store_models); end
end

# +MergeErrorStrategy+ copies errors from the StoreModel::Model to the parent
# record (for Rails < 6.1) or marks the attribute invalid (for Rails >= 6.1).
#
# source://store_model//lib/store_model/combine_errors_strategies/merge_error_strategy.rb#7
class StoreModel::CombineErrorsStrategies::MergeErrorStrategy
  # Merges errors on +attribute+ from the child model with parent errors.
  #
  # attribute
  #
  # @param attribute [String] name of the validated attribute
  # @param base_errors [ActiveModel::Errors] errors object of the parent record
  # @param store_model_errors [ActiveModel::Errors] errors object of the StoreModel::Model
  #
  # source://store_model//lib/store_model/combine_errors_strategies/merge_error_strategy.rb#14
  def call(attribute, base_errors, store_model_errors); end
end

# StoreModel configuration.
#
# source://store_model//lib/store_model/configuration.rb#5
class StoreModel::Configuration
  # @return [Configuration] a new instance of Configuration
  #
  # source://store_model//lib/store_model/configuration.rb#18
  def initialize; end

  # Controls usage of MergeArrayErrorStrategy
  #
  # @return [Boolean]
  #
  # source://store_model//lib/store_model/configuration.rb#12
  def merge_array_errors; end

  # Controls usage of MergeArrayErrorStrategy
  #
  # @return [Boolean]
  #
  # source://store_model//lib/store_model/configuration.rb#12
  def merge_array_errors=(_arg0); end

  # Controls usage of MergeErrorStrategy
  #
  # @return [Boolean]
  #
  # source://store_model//lib/store_model/configuration.rb#8
  def merge_errors; end

  # Controls usage of MergeErrorStrategy
  #
  # @return [Boolean]
  #
  # source://store_model//lib/store_model/configuration.rb#8
  def merge_errors=(_arg0); end

  # Controls if the result of `as_json` will contain the unknown attributes of the model
  #
  # @return [Boolean]
  #
  # source://store_model//lib/store_model/configuration.rb#16
  def serialize_unknown_attributes; end

  # Controls if the result of `as_json` will contain the unknown attributes of the model
  #
  # @return [Boolean]
  #
  # source://store_model//lib/store_model/configuration.rb#16
  def serialize_unknown_attributes=(_arg0); end
end

# Allows defining Rails-like enums
#
# source://store_model//lib/store_model/enum.rb#5
module StoreModel::Enum
  # Defines new enum
  #
  # @param name [String] name of the enum to define
  # @param values [Object]
  # @param kwargs [Object]
  #
  # source://store_model//lib/store_model/enum.rb#11
  def enum(name, values = T.unsafe(nil), **kwargs); end

  private

  # source://store_model//lib/store_model/enum.rb#63
  def affixed_label(label, name, prefix = T.unsafe(nil), suffix = T.unsafe(nil)); end

  # source://store_model//lib/store_model/enum.rb#53
  def cast_type(mapping); end

  # source://store_model//lib/store_model/enum.rb#27
  def define_attribute(name, mapping, default); end

  # source://store_model//lib/store_model/enum.rb#47
  def define_map_readers(name, mapping); end

  # source://store_model//lib/store_model/enum.rb#40
  def define_predicate_methods(name, mapping, options); end

  # source://store_model//lib/store_model/enum.rb#31
  def define_reader(name, mapping); end

  # source://store_model//lib/store_model/enum.rb#35
  def define_writer(name, mapping); end

  # source://store_model//lib/store_model/enum.rb#57
  def ensure_hash(values); end
end

# When included into class configures it to handle JSON column
#
# source://store_model//lib/store_model/model.rb#10
module StoreModel::Model
  include GeneratedInstanceMethods
  include ::ActiveSupport::Callbacks
  include ::ActiveModel::Validations::HelperMethods
  include ::ActiveModel::Validations
  include ::ActiveModel::Conversion
  include ::ActiveModel::API
  include ::ActiveModel::Model
  include ::ActiveModel::AttributeMethods
  include ::ActiveModel::Attributes
  include ::ActiveRecord::AttributeMethods::BeforeTypeCast
  include ::StoreModel::NestedAttributes

  mixes_in_class_methods GeneratedClassMethods
  mixes_in_class_methods ::ActiveModel::Validations::ClassMethods
  mixes_in_class_methods ::ActiveModel::Callbacks
  mixes_in_class_methods ::ActiveSupport::Callbacks::ClassMethods
  mixes_in_class_methods ::ActiveSupport::DescendantsTracker
  mixes_in_class_methods ::ActiveModel::Translation
  mixes_in_class_methods ::ActiveModel::Validations::HelperMethods
  mixes_in_class_methods ::ActiveModel::Conversion::ClassMethods
  mixes_in_class_methods ::ActiveModel::AttributeMethods::ClassMethods
  mixes_in_class_methods ::ActiveModel::Attributes::ClassMethods
  mixes_in_class_methods ::StoreModel::NestedAttributes::ClassMethods
  mixes_in_class_methods ::StoreModel::Enum
  mixes_in_class_methods ::StoreModel::TypeBuilders

  # Compares two StoreModel::Model instances
  #
  # @param other [StoreModel::Model]
  # @return [Boolean]
  #
  # source://store_model//lib/store_model/model.rb#66
  def ==(other); end

  # Accessing attribute using brackets
  #
  # @param attr_name [String, Symbol]
  # @return [Object]
  #
  # source://store_model//lib/store_model/model.rb#78
  def [](attr_name); end

  # Setting attribute using brackets
  #
  # @param name [String, Symbol]
  # @param value [Object]
  # @return [Object]
  #
  # source://store_model//lib/store_model/model.rb#88
  def []=(attr_name, value); end

  # Legacy implementation of #has_attribute?
  #
  # @param attr_name [String] name of the attribute
  # @return [Boolean]
  #
  # source://store_model//lib/store_model/model.rb#156
  def _has_attribute?(attr_name); end

  # Returns a hash representing the model. Some configuration can be
  # passed through +options+.
  #
  # @param options [Hash]
  # @return [Hash]
  #
  # source://store_model//lib/store_model/model.rb#34
  def as_json(options = T.unsafe(nil)); end

  # source://store_model//lib/store_model/model.rb#115
  def attribute_types(*_arg0, **_arg1, &_arg2); end

  # Allows to call :presence validation on the association itself.
  #
  # @return [Boolean]
  #
  # source://store_model//lib/store_model/model.rb#102
  def blank?; end

  # source://store_model//lib/store_model/model.rb#26
  def each_value(*_arg0, **_arg1, &_arg2); end

  # Compares two StoreModel::Model instances
  #
  # @param other [StoreModel::Model]
  # @return [Boolean]
  #
  # source://store_model//lib/store_model/model.rb#66
  def eql?(other); end

  # Returns an Object, similar to Hash#fetch, raises
  # a KeyError if attr_name doesn't exist.
  #
  # @param attr_name [String, Symbol]
  # @return Object
  #
  # source://store_model//lib/store_model/model.rb#51
  def fetch(attr_name); end

  # Checks if the attribute with a given name is defined
  #
  #
  # @example
  #   class Person
  #   include StoreModel::Model
  #   attribute :name, :string
  #   alias_attribute :new_name, :name
  #   end
  #
  #   Person.has_attribute?('name')     # => true
  #   Person.has_attribute?('new_name') # => true
  #   Person.has_attribute?(:age)       # => true
  #   Person.has_attribute?(:nothing)   # => false
  # @param attr_name [String] name of the attribute
  # @return [Boolean]
  #
  # source://store_model//lib/store_model/model.rb#145
  def has_attribute?(attr_name); end

  # Returns hash for a StoreModel::Model instance based on attributes hash
  #
  # @return [Integer]
  #
  # source://store_model//lib/store_model/model.rb#95
  def hash; end

  # String representation of the object.
  #
  # @return [String]
  #
  # source://store_model//lib/store_model/model.rb#109
  def inspect; end

  # Returns the value of attribute parent.
  #
  # source://store_model//lib/store_model/model.rb#24
  def parent; end

  # Sets the attribute parent
  #
  # @param value the value to set the attribute parent to.
  #
  # source://store_model//lib/store_model/model.rb#24
  def parent=(_arg0); end

  # Returns the type of the attribute with the given name
  #
  # @param attr_name [String] name of the attribute
  # @return [ActiveModel::Type::Value]
  #
  # source://store_model//lib/store_model/model.rb#122
  def type_for_attribute(attr_name); end

  # Contains a hash of attributes which are not defined but exist in the
  # underlying JSON data
  #
  # @return [Hash]
  #
  # source://store_model//lib/store_model/model.rb#166
  def unknown_attributes; end

  private

  # @return [Boolean]
  #
  # source://store_model//lib/store_model/model.rb#172
  def attribute?(attribute); end

  class << self
    # source://store_model//lib/store_model/model.rb#11
    def included(base); end
  end

  module GeneratedClassMethods
    def __callbacks; end
    def __callbacks=(value); end
    def __callbacks?; end
    def _default_attributes; end
    def _default_attributes=(value); end
    def _default_attributes?; end
    def _validators; end
    def _validators=(value); end
    def _validators?; end
    def attribute_aliases; end
    def attribute_aliases=(value); end
    def attribute_aliases?; end
    def attribute_method_matchers; end
    def attribute_method_matchers=(value); end
    def attribute_method_matchers?; end
    def attribute_types; end
    def attribute_types=(value); end
    def attribute_types?; end
  end

  module GeneratedInstanceMethods
    def __callbacks; end
    def __callbacks?; end
    def _validators; end
    def _validators?; end
    def attribute_aliases; end
    def attribute_aliases?; end
    def attribute_method_matchers; end
    def attribute_method_matchers?; end
  end
end

# Contains methods for working with nested StoreModel::Model attributes.
#
# source://store_model//lib/store_model/nested_attributes.rb#5
module StoreModel::NestedAttributes
  mixes_in_class_methods ::StoreModel::NestedAttributes::ClassMethods

  private

  # source://store_model//lib/store_model/nested_attributes.rb#66
  def assign_nested_attributes_for_collection_association(association, attributes, options); end

  class << self
    # source://store_model//lib/store_model/nested_attributes.rb#6
    def included(base); end
  end
end

# source://store_model//lib/store_model/nested_attributes.rb#10
module StoreModel::NestedAttributes::ClassMethods
  # Enables handling of nested StoreModel::Model attributes
  #
  # Supported options:
  # [:allow_destroy]
  #   If true, destroys any members from the attributes hash with a
  #   <tt>_destroy</tt> key and a value that evaluates to +true+
  #   (e.g. 1, '1', true, or 'true'). This option is off by default.
  #
  # @param associations [Array] list of associations and options to define attributes, for example:
  #   accepts_nested_attributes_for [:suppliers, allow_destroy: true]
  #
  # source://store_model//lib/store_model/nested_attributes.rb#21
  def accepts_nested_attributes_for(*associations); end

  private

  # source://store_model//lib/store_model/nested_attributes.rb#45
  def define_association_setter_for_many(association, options); end

  # source://store_model//lib/store_model/nested_attributes.rb#51
  def define_association_setter_for_single(association, options); end

  # source://store_model//lib/store_model/nested_attributes.rb#37
  def define_attr_accessor_for_destroy(association, options); end
end

# Helper methods for ActiveModel and ActiveRecord parent tracking support
#
# source://store_model//lib/store_model/ext/parent_assignment.rb#5
module StoreModel::ParentAssignment
  private

  # source://store_model//lib/store_model/ext/parent_assignment.rb#15
  def assign_parent_to_singular_store_model(item); end

  # source://store_model//lib/store_model/ext/parent_assignment.rb#8
  def assign_parent_to_store_model_relation(attribute); end
end

# source://store_model//lib/store_model/railtie.rb#7
class StoreModel::Railtie < ::Rails::Railtie; end

# Contains methods for converting StoreModel::Model to ActiveModel::Type::Value.
#
# source://store_model//lib/store_model/type_builders.rb#5
module StoreModel::TypeBuilders
  # Converts StoreModel::Model to Types::Many
  #
  # @return [Types::Many]
  #
  # source://store_model//lib/store_model/type_builders.rb#14
  def to_array_type; end

  # Converts StoreModel::Model to Types::One
  #
  # @return [Types::One]
  #
  # source://store_model//lib/store_model/type_builders.rb#8
  def to_type; end
end

# Contains all custom types.
#
# source://store_model//lib/store_model/types/one_base.rb#6
module StoreModel::Types; end

# source://store_model//lib/store_model/types.rb#20
class StoreModel::Types::CastError < ::StandardError; end

# Implements ActiveModel::Type::Value type for handling Rails-like enums
#
# source://store_model//lib/store_model/types/enum_type.rb#8
class StoreModel::Types::EnumType < ::ActiveModel::Type::Value
  # Initializes type for mapping
  #
  # @param mapping [Hash] mapping for enum values
  # @return [StoreModel::Types::EnumType]
  #
  # source://store_model//lib/store_model/types/enum_type.rb#14
  def initialize(mapping); end

  # Casts +value+ from DB or user to StoreModel::Model instance
  #
  # @param value [Object] a value to cast
  # @return StoreModel::Model
  #
  # source://store_model//lib/store_model/types/enum_type.rb#30
  def cast_value(value); end

  # Returns type
  #
  # @return [Symbol]
  #
  # source://store_model//lib/store_model/types/enum_type.rb#21
  def type; end

  private

  # source://store_model//lib/store_model/types/enum_type.rb#50
  def cast_integer_value(value); end

  # source://store_model//lib/store_model/types/enum_type.rb#45
  def cast_symbol_value(value); end

  # @raise [ArgumentError]
  #
  # source://store_model//lib/store_model/types/enum_type.rb#55
  def raise_invalid_value!(value); end
end

# source://store_model//lib/store_model/types.rb#21
class StoreModel::Types::ExpandWrapperError < ::StandardError; end

# Implements ActiveModel::Type::Value type for handling an array of
# StoreModel::Model
#
# source://store_model//lib/store_model/types/many.rb#9
class StoreModel::Types::Many < ::StoreModel::Types::ManyBase
  # Initializes type for model class
  #
  # @param model_klass [StoreModel::Model] model class to handle
  # @return [StoreModel::Types::Many]
  #
  # source://store_model//lib/store_model/types/many.rb#15
  def initialize(model_klass); end

  # Returns type
  #
  # @return [Symbol]
  #
  # source://store_model//lib/store_model/types/many.rb#22
  def type; end

  protected

  # source://store_model//lib/store_model/types/many.rb#34
  def cast_model_type_value(value); end

  # source://store_model//lib/store_model/types/many.rb#28
  def ensure_model_class(array); end

  # source://store_model//lib/store_model/types/many.rb#38
  def model_klass_type; end

  # @raise [StoreModel::Types::CastError]
  #
  # source://store_model//lib/store_model/types/many.rb#42
  def raise_cast_error(value); end
end

# Implements ActiveModel::Type::Value type for handling an array of
# StoreModel::Model
#
# source://store_model//lib/store_model/types/many_base.rb#9
class StoreModel::Types::ManyBase < ::ActiveModel::Type::Value
  # Casts +value+ from DB or user to StoreModel::Model instance
  #
  # @param value [Object] a value to cast
  # @return StoreModel::Model
  #
  # source://store_model//lib/store_model/types/many_base.rb#24
  def cast_value(value); end

  # Determines whether the mutable value has been modified since it was read
  #
  # @param raw_old_value [Object] old value
  # @param new_value [Object] new value
  # @return [Boolean]
  #
  # source://store_model//lib/store_model/types/many_base.rb#55
  def changed_in_place?(raw_old_value, new_value); end

  # Returns the value of attribute model_klass.
  #
  # source://store_model//lib/store_model/types/many_base.rb#10
  def model_klass; end

  # Casts a value from the ruby type to a type that the database knows how
  # to understand.
  #
  # @param value [Object] value to serialize
  # @return [String] serialized value
  #
  # source://store_model//lib/store_model/types/many_base.rb#40
  def serialize(value); end

  # Returns type
  #
  # @raise [NotImplementedError]
  # @return [Symbol]
  #
  # source://store_model//lib/store_model/types/many_base.rb#15
  def type; end

  protected

  # @raise [NotImplementedError]
  #
  # source://store_model//lib/store_model/types/many_base.rb#65
  def cast_model_type_value(_value); end

  # @raise [NotImplementedError]
  #
  # source://store_model//lib/store_model/types/many_base.rb#61
  def ensure_model_class(_array); end

  # @raise [NotImplementedError]
  #
  # source://store_model//lib/store_model/types/many_base.rb#69
  def raise_cast_error(_value); end

  private

  # source://store_model//lib/store_model/types/many_base.rb#76
  def decode_and_initialize(array_value); end
end

# Implements ActiveModel::Type::Value type for handling an array of
# StoreModel::Model
#
# source://store_model//lib/store_model/types/many_polymorphic.rb#9
class StoreModel::Types::ManyPolymorphic < ::StoreModel::Types::ManyBase
  include ::PolymorphicHelper

  # Initializes type for model class
  #
  # @param model_wrapper [Proc] class to handle
  # @return [StoreModel::Types::PolymorphicArrayType]
  #
  # source://store_model//lib/store_model/types/many_polymorphic.rb#17
  def initialize(model_wrapper); end

  # Returns type
  #
  # @return [Symbol]
  #
  # source://store_model//lib/store_model/types/many_polymorphic.rb#24
  def type; end

  private

  # source://store_model//lib/store_model/types/many_polymorphic.rb#38
  def cast_model_type_value(value); end

  # source://store_model//lib/store_model/types/many_polymorphic.rb#30
  def ensure_model_class(array); end

  # @raise [StoreModel::Types::CastError]
  #
  # source://store_model//lib/store_model/types/many_polymorphic.rb#46
  def raise_cast_error(value); end
end

# Implements ActiveModel::Type::Value type for handling an instance of StoreModel::Model
#
# source://store_model//lib/store_model/types/one.rb#8
class StoreModel::Types::One < ::StoreModel::Types::OneBase
  # Initializes type for model class
  #
  # @param model_klass [StoreModel::Model] model class to handle
  # @return [StoreModel::Types::One]
  #
  # source://store_model//lib/store_model/types/one.rb#14
  def initialize(model_klass); end

  # Casts +value+ from DB or user to StoreModel::Model instance
  #
  # @param value [Object] a value to cast
  # @return StoreModel::Model
  #
  # source://store_model//lib/store_model/types/one.rb#30
  def cast_value(value); end

  # Casts a value from the ruby type to a type that the database knows how
  # to understand.
  #
  # @param value [Object] value to serialize
  # @return [String] serialized value
  #
  # source://store_model//lib/store_model/types/one.rb#47
  def serialize(value); end

  # Returns type
  #
  # @return [Symbol]
  #
  # source://store_model//lib/store_model/types/one.rb#21
  def type; end

  private

  # source://store_model//lib/store_model/types/one.rb#64
  def model_instance(value); end

  # @raise [StoreModel::Types::CastError]
  #
  # source://store_model//lib/store_model/types/one.rb#58
  def raise_cast_error(value); end
end

# Implements ActiveModel::Type::Value type for handling an instance of StoreModel::Model
#
# source://store_model//lib/store_model/types/one_base.rb#8
class StoreModel::Types::OneBase < ::ActiveModel::Type::Value
  # Casts +value+ from DB or user to StoreModel::Model instance
  #
  # @param value [Object] a value to cast
  # @raise [NotImplementedError]
  # @return StoreModel::Model
  #
  # source://store_model//lib/store_model/types/one_base.rb#23
  def cast_value(_value); end

  # Determines whether the mutable value has been modified since it was read
  #
  # @param raw_old_value [Object] old value
  # @param new_value [Object] new value
  # @return [Boolean]
  #
  # source://store_model//lib/store_model/types/one_base.rb#33
  def changed_in_place?(raw_old_value, new_value); end

  # Returns the value of attribute model_klass.
  #
  # source://store_model//lib/store_model/types/one_base.rb#9
  def model_klass; end

  # Returns type
  #
  # @raise [NotImplementedError]
  # @return [Symbol]
  #
  # source://store_model//lib/store_model/types/one_base.rb#14
  def type; end

  protected

  # @raise [NotImplementedError]
  #
  # source://store_model//lib/store_model/types/one_base.rb#43
  def model_instance(_value); end

  # @raise [NotImplementedError]
  #
  # source://store_model//lib/store_model/types/one_base.rb#39
  def raise_cast_error(_value); end

  private

  # source://store_model//lib/store_model/types/one_base.rb#50
  def decode_and_initialize(value); end

  # source://store_model//lib/store_model/types/one_base.rb#58
  def handle_unknown_attribute(value, exception); end
end

# Implements ActiveModel::Type::Value type for handling an array of
# StoreModel::Model
#
# source://store_model//lib/store_model/types/one_of.rb#9
class StoreModel::Types::OneOf
  # @return [OneOf] a new instance of OneOf
  #
  # source://store_model//lib/store_model/types/one_of.rb#10
  def initialize(&block); end

  # source://store_model//lib/store_model/types/one_of.rb#18
  def to_array_type; end

  # source://store_model//lib/store_model/types/one_of.rb#14
  def to_type; end
end

# Implements ActiveModel::Type::Value type for handling an instance of StoreModel::Model
#
# source://store_model//lib/store_model/types/one_polymorphic.rb#8
class StoreModel::Types::OnePolymorphic < ::StoreModel::Types::OneBase
  include ::PolymorphicHelper

  # Initializes type for model class
  #
  # @param model_wrapper [Proc] class to handle
  # @return [StoreModel::Types::OnePolymorphic]
  #
  # source://store_model//lib/store_model/types/one_polymorphic.rb#16
  def initialize(model_wrapper); end

  # Casts +value+ from DB or user to StoreModel::Model instance
  #
  # @param value [Object] a value to cast
  # @return StoreModel::Model
  #
  # source://store_model//lib/store_model/types/one_polymorphic.rb#32
  def cast_value(value); end

  # Casts a value from the ruby type to a type that the database knows how
  # to understand.
  #
  # @param value [Object] value to serialize
  # @return [String] serialized value
  #
  # source://store_model//lib/store_model/types/one_polymorphic.rb#52
  def serialize(value); end

  # Returns type
  #
  # @return [Symbol]
  #
  # source://store_model//lib/store_model/types/one_polymorphic.rb#23
  def type; end

  protected

  # Check if block returns an appropriate class and raise cast error if not
  #
  # @param value [Object] raw data
  # @return [Class] which implements StoreModel::Model
  #
  # source://store_model//lib/store_model/types/one_polymorphic.rb#65
  def extract_model_klass(value); end

  # source://store_model//lib/store_model/types/one_polymorphic.rb#79
  def model_instance(value); end

  # @raise [StoreModel::Types::CastError]
  #
  # source://store_model//lib/store_model/types/one_polymorphic.rb#73
  def raise_cast_error(value); end
end
