# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `neighbor` gem.
# Please instead update this file by running `bin/tapioca gem neighbor`.

# source://neighbor//lib/neighbor/version.rb#1
module Neighbor; end

# source://neighbor//lib/neighbor.rb#8
class Neighbor::Error < ::StandardError; end

# source://neighbor//lib/neighbor/railtie.rb#11
module Neighbor::GeneratedAttribute
  # source://neighbor//lib/neighbor/railtie.rb#12
  def parse_type_and_options(type, *_arg1, **_arg2); end
end

# source://neighbor//lib/neighbor/model.rb#2
module Neighbor::Model
  # source://neighbor//lib/neighbor/model.rb#3
  def has_neighbors(*attribute_names, dimensions: T.unsafe(nil), normalize: T.unsafe(nil)); end
end

# source://neighbor//lib/neighbor/railtie.rb#2
class Neighbor::Railtie < ::Rails::Railtie; end

# source://neighbor//lib/neighbor.rb#10
module Neighbor::RegisterTypes
  # source://neighbor//lib/neighbor.rb#11
  def initialize_type_map(m = T.unsafe(nil)); end
end

# source://neighbor//lib/neighbor/type/cube.rb#2
module Neighbor::Type; end

# source://neighbor//lib/neighbor/type/cube.rb#3
class Neighbor::Type::Cube < ::ActiveModel::Type::String
  # source://neighbor//lib/neighbor/type/cube.rb#8
  def cast(value); end

  # source://neighbor//lib/neighbor/type/cube.rb#4
  def type; end

  private

  # source://neighbor//lib/neighbor/type/cube.rb#33
  def cast_point(value); end
end

# source://neighbor//lib/neighbor/type/vector.rb#3
class Neighbor::Type::Vector < ::ActiveModel::Type::String
  # source://neighbor//lib/neighbor/type/vector.rb#4
  def type; end
end

# source://neighbor//lib/neighbor/version.rb#2
Neighbor::VERSION = T.let(T.unsafe(nil), String)

# source://neighbor//lib/neighbor/vector.rb#2
class Neighbor::Vector < ::ActiveModel::Type::Value
  # @return [Vector] a new instance of Vector
  #
  # source://neighbor//lib/neighbor/vector.rb#3
  def initialize(dimensions:, normalize:, model:, attribute_name:); end

  # source://neighbor//lib/neighbor/vector.rb#47
  def cast(value); end

  # need to be careful to avoid loading column info before needed
  #
  # source://neighbor//lib/neighbor/vector.rb#43
  def column_info; end

  # source://neighbor//lib/neighbor/vector.rb#61
  def deserialize(value); end

  # source://neighbor//lib/neighbor/vector.rb#51
  def serialize(value); end

  class << self
    # @raise [Error]
    #
    # source://neighbor//lib/neighbor/vector.rb#11
    def cast(value, dimensions:, normalize:, column_info:); end

    # source://neighbor//lib/neighbor/vector.rb#33
    def column_info(model, attribute_name); end
  end
end
