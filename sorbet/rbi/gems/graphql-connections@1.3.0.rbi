# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `graphql-connections` gem.
# Please instead update this file by running `bin/tapioca gem graphql-connections`.

# source://graphql-connections//lib/graphql/connections.rb#6
module GraphQL
  class << self
    # source://graphql/2.0.24/lib/graphql.rb#35
    def default_parser; end

    # source://graphql/2.0.24/lib/graphql.rb#39
    def default_parser=(_arg0); end

    # source://graphql/2.0.24/lib/graphql.rb#45
    def parse(graphql_string, trace: T.unsafe(nil)); end

    # source://graphql/2.0.24/lib/graphql.rb#52
    def parse_file(filename); end

    # source://graphql/2.0.24/lib/graphql.rb#62
    def parse_with_racc(string, filename: T.unsafe(nil), trace: T.unsafe(nil)); end

    # source://graphql/2.0.24/lib/graphql.rb#58
    def scan(graphql_string); end

    # source://graphql/2.0.24/lib/graphql.rb#66
    def scan_with_ruby(graphql_string); end
  end
end

# source://graphql-connections//lib/graphql/connections.rb#7
module GraphQL::Connections; end

# Base class for pagination implementations
#
# source://graphql-connections//lib/graphql/connections/base.rb#6
class GraphQL::Connections::Base < ::GraphQL::Pagination::Connection
  # @return [Base] a new instance of Base
  #
  # source://graphql-connections//lib/graphql/connections/base.rb#11
  def initialize(*args, opaque_cursor: T.unsafe(nil), **kwargs); end

  # source://graphql-connections//lib/graphql/connections/base.rb#9
  def arel_table(*_arg0, **_arg1, &_arg2); end

  # @raise [NotImplementedError]
  #
  # source://graphql-connections//lib/graphql/connections/base.rb#33
  def cursor_for(item); end

  # @raise [NotImplementedError]
  #
  # source://graphql-connections//lib/graphql/connections/base.rb#29
  def has_next_page; end

  # @raise [NotImplementedError]
  #
  # source://graphql-connections//lib/graphql/connections/base.rb#25
  def has_previous_page; end

  # source://graphql-connections//lib/graphql/connections/base.rb#21
  def nodes; end

  # Returns the value of attribute opaque_cursor.
  #
  # source://graphql-connections//lib/graphql/connections/base.rb#7
  def opaque_cursor; end

  # source://graphql-connections//lib/graphql/connections/base.rb#17
  def primary_key; end

  private

  # source://graphql-connections//lib/graphql/connections/base.rb#56
  def after_cursor; end

  # source://graphql-connections//lib/graphql/connections/base.rb#60
  def before_cursor; end

  # @raise [NotImplementedError]
  #
  # source://graphql-connections//lib/graphql/connections/base.rb#48
  def limited_relation; end

  # source://graphql-connections//lib/graphql/connections/base.rb#39
  def serialize(cursor); end

  # @raise [NotImplementedError]
  #
  # source://graphql-connections//lib/graphql/connections/base.rb#52
  def sliced_relation; end
end

# source://graphql-connections//lib/graphql/connections/chewy.rb#5
class GraphQL::Connections::Chewy < ::GraphQL::Pagination::RelationConnection
  private

  # source://graphql-connections//lib/graphql/connections/chewy.rb#8
  def load_nodes; end

  # source://graphql-connections//lib/graphql/connections/chewy.rb#32
  def null_relation(relation); end

  # source://graphql-connections//lib/graphql/connections/chewy.rb#12
  def relation_count(relation); end

  # source://graphql-connections//lib/graphql/connections/chewy.rb#24
  def relation_limit(relation); end

  # source://graphql-connections//lib/graphql/connections/chewy.rb#28
  def relation_offset(relation); end
end

# source://graphql-connections//lib/graphql/connections/keyset/base.rb#5
module GraphQL::Connections::Keyset; end

# Implements keyset pagination by two fields with asc order
#
# source://graphql-connections//lib/graphql/connections/keyset/asc.rb#7
class GraphQL::Connections::Keyset::Asc < ::GraphQL::Connections::Keyset::Base
  # source://graphql-connections//lib/graphql/connections/keyset/asc.rb#27
  def has_next_page; end

  # source://graphql-connections//lib/graphql/connections/keyset/asc.rb#8
  def has_previous_page; end

  private

  # source://graphql-connections//lib/graphql/connections/keyset/asc.rb#49
  def limited_relation; end

  # source://graphql-connections//lib/graphql/connections/keyset/asc.rb#68
  def sliced_relation_after(relation); end

  # source://graphql-connections//lib/graphql/connections/keyset/asc.rb#75
  def sliced_relation_before(relation); end
end

# Base class for keyset pagination implementations
#
# source://graphql-connections//lib/graphql/connections/keyset/base.rb#7
class GraphQL::Connections::Keyset::Base < ::GraphQL::Connections::Base
  # @return [Base] a new instance of Base
  #
  # source://graphql-connections//lib/graphql/connections/keyset/base.rb#12
  def initialize(*args, keys:, separator: T.unsafe(nil), **kwargs); end

  # source://graphql-connections//lib/graphql/connections/keyset/base.rb#19
  def cursor_for(item); end

  # Returns the value of attribute field_key.
  #
  # source://graphql-connections//lib/graphql/connections/keyset/base.rb#8
  def field_key; end

  private

  # source://graphql-connections//lib/graphql/connections/keyset/base.rb#41
  def after_cursor; end

  # source://graphql-connections//lib/graphql/connections/keyset/base.rb#33
  def after_cursor_date; end

  # source://graphql-connections//lib/graphql/connections/keyset/base.rb#37
  def after_cursor_primary_key; end

  # source://graphql-connections//lib/graphql/connections/keyset/base.rb#53
  def before_cursor; end

  # source://graphql-connections//lib/graphql/connections/keyset/base.rb#45
  def before_cursor_date; end

  # source://graphql-connections//lib/graphql/connections/keyset/base.rb#49
  def before_cursor_primary_key; end

  # source://graphql-connections//lib/graphql/connections/keyset/base.rb#27
  def sliced_relation; end
end

# source://graphql-connections//lib/graphql/connections/keyset/base.rb#10
GraphQL::Connections::Keyset::Base::SEPARATOR = T.let(T.unsafe(nil), String)

# Implements keyset pagination by two fields with desc order
#
# source://graphql-connections//lib/graphql/connections/keyset/desc.rb#7
class GraphQL::Connections::Keyset::Desc < ::GraphQL::Connections::Keyset::Base
  # source://graphql-connections//lib/graphql/connections/keyset/desc.rb#47
  def cursor_for(item); end

  # source://graphql-connections//lib/graphql/connections/keyset/desc.rb#27
  def has_next_page; end

  # source://graphql-connections//lib/graphql/connections/keyset/desc.rb#8
  def has_previous_page; end

  private

  # source://graphql-connections//lib/graphql/connections/keyset/desc.rb#55
  def limited_relation; end

  # source://graphql-connections//lib/graphql/connections/keyset/desc.rb#75
  def sliced_relation_after(relation); end

  # source://graphql-connections//lib/graphql/connections/keyset/desc.rb#82
  def sliced_relation_before(relation); end
end

# Implements pagination by one field with desc order
#
# source://graphql-connections//lib/graphql/connections/primary_key/base.rb#5
module GraphQL::Connections::PrimaryKey; end

# source://graphql-connections//lib/graphql/connections/primary_key/asc.rb#7
class GraphQL::Connections::PrimaryKey::Asc < ::GraphQL::Connections::PrimaryKey::Base
  private

  # source://graphql-connections//lib/graphql/connections/primary_key/asc.rb#20
  def first_limited_sorted_table; end

  # source://graphql-connections//lib/graphql/connections/primary_key/asc.rb#24
  def last_limited_sorted_table; end
end

# source://graphql-connections//lib/graphql/connections/primary_key/asc.rb#8
GraphQL::Connections::PrimaryKey::Asc::PAGE_COMPARABLE_METHODS = T.let(T.unsafe(nil), Hash)

# source://graphql-connections//lib/graphql/connections/primary_key/asc.rb#13
GraphQL::Connections::PrimaryKey::Asc::SLICED_COMPARABLE_METHODS = T.let(T.unsafe(nil), Hash)

# Base class for PrimaryKey pagination implementations
#
# source://graphql-connections//lib/graphql/connections/primary_key/base.rb#7
class GraphQL::Connections::PrimaryKey::Base < ::GraphQL::Connections::Base
  # @return [Base] a new instance of Base
  #
  # source://graphql-connections//lib/graphql/connections/primary_key/base.rb#12
  def initialize(*args, primary_key: T.unsafe(nil), **kwargs); end

  # source://graphql-connections//lib/graphql/connections/primary_key/base.rb#38
  def cursor_for(item); end

  sig { returns(T::Boolean) }
  def has_next_page; end

  # source://graphql-connections//lib/graphql/connections/primary_key/base.rb#18
  def has_previous_page; end

  private

  # @raise [NotImplementedError]
  #
  # source://graphql-connections//lib/graphql/connections/primary_key/base.rb#97
  def first_limited_sorted_table; end

  # @return [Boolean]
  #
  # source://graphql-connections//lib/graphql/connections/primary_key/base.rb#50
  def items_exist?(type:, search:, page_type:); end

  # @raise [NotImplementedError]
  #
  # source://graphql-connections//lib/graphql/connections/primary_key/base.rb#101
  def last_limited_sorted_table; end

  # source://graphql-connections//lib/graphql/connections/primary_key/base.rb#60
  def limited_relation; end

  # source://graphql-connections//lib/graphql/connections/primary_key/base.rb#46
  def page_comparable_method(query_type:, page_type:); end

  # source://graphql-connections//lib/graphql/connections/primary_key/base.rb#93
  def sliced_comparable_method(type); end

  # source://graphql-connections//lib/graphql/connections/primary_key/base.rb#89
  def sliced_items(items:, cursor:, type:); end

  # source://graphql-connections//lib/graphql/connections/primary_key/base.rb#83
  def sliced_relation; end
end

# source://graphql-connections//lib/graphql/connections/primary_key/base.rb#8
GraphQL::Connections::PrimaryKey::Base::COMPARABLE_METHODS = T.let(T.unsafe(nil), Array)

# source://graphql-connections//lib/graphql/connections/primary_key/desc.rb#7
class GraphQL::Connections::PrimaryKey::Desc < ::GraphQL::Connections::PrimaryKey::Base
  private

  # source://graphql-connections//lib/graphql/connections/primary_key/desc.rb#20
  def first_limited_sorted_table; end

  # source://graphql-connections//lib/graphql/connections/primary_key/desc.rb#24
  def last_limited_sorted_table; end
end

# source://graphql-connections//lib/graphql/connections/primary_key/desc.rb#8
GraphQL::Connections::PrimaryKey::Desc::PAGE_COMPARABLE_METHODS = T.let(T.unsafe(nil), Hash)

# source://graphql-connections//lib/graphql/connections/primary_key/desc.rb#13
GraphQL::Connections::PrimaryKey::Desc::SLICED_COMPARABLE_METHODS = T.let(T.unsafe(nil), Hash)

# Cursor-based pagination to work with `ActiveRecord::Relation`s.
# Implements a mechanism for serving stable connections based on column values.
# If objects are created or destroyed during pagination, the list of items won't be disrupted.
#
# Inspired by `GraphQL::Pro`s Stable Relation Connections
# https://graphql-ruby.org/pagination/stable_relation_connections.html
#
# For more information see GraphQL Cursor Connections Specification
# https://relay.dev/graphql/connections.htm
#
# source://graphql-connections//lib/graphql/connections/stable.rb#14
module GraphQL::Connections::Stable
  class << self
    # @raise [ArgumentError]
    #
    # source://graphql-connections//lib/graphql/connections/stable.rb#15
    def new(*args, desc: T.unsafe(nil), keys: T.unsafe(nil), **kwargs); end

    sig { params(defn: T.untyped, options: T::Hash[::Symbol, T.untyped]).void }
    def use(defn, options = T.unsafe(nil)); end
  end
end
