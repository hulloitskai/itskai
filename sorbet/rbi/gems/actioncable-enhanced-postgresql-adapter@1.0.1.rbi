# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `actioncable-enhanced-postgresql-adapter` gem.
# Please instead update this file by running `bin/tapioca gem actioncable-enhanced-postgresql-adapter`.

# source://actioncable-enhanced-postgresql-adapter//lib/action_cable/subscription_adapter/enhanced_postgresql.rb#6
module ActionCable
  private

  # source://actioncable/7.1.1/lib/action_cable.rb#71
  def server; end

  class << self
    # source://actioncable/7.1.1/lib/action_cable/deprecator.rb#4
    def deprecator; end

    # source://actioncable/7.1.1/lib/action_cable/gem_version.rb#5
    def gem_version; end

    # source://actioncable/7.1.1/lib/action_cable.rb#71
    def server; end

    # source://actioncable/7.1.1/lib/action_cable/version.rb#7
    def version; end
  end
end

# source://actioncable-enhanced-postgresql-adapter//lib/action_cable/subscription_adapter/enhanced_postgresql.rb#7
module ActionCable::SubscriptionAdapter; end

# source://actioncable-enhanced-postgresql-adapter//lib/action_cable/subscription_adapter/enhanced_postgresql.rb#8
class ActionCable::SubscriptionAdapter::EnhancedPostgresql < ::ActionCable::SubscriptionAdapter::PostgreSQL
  # @return [EnhancedPostgresql] a new instance of EnhancedPostgresql
  #
  # source://actioncable-enhanced-postgresql-adapter//lib/action_cable/subscription_adapter/enhanced_postgresql.rb#29
  def initialize(*_arg0); end

  # source://actioncable-enhanced-postgresql-adapter//lib/action_cable/subscription_adapter/enhanced_postgresql.rb#36
  def broadcast(channel, payload); end

  # source://actioncable-enhanced-postgresql-adapter//lib/action_cable/subscription_adapter/enhanced_postgresql.rb#60
  def payload_encryptor; end

  # source://actioncable-enhanced-postgresql-adapter//lib/action_cable/subscription_adapter/enhanced_postgresql.rb#73
  def with_broadcast_connection(&block); end

  # Called from the Listener thread
  #
  # source://actioncable-enhanced-postgresql-adapter//lib/action_cable/subscription_adapter/enhanced_postgresql.rb#82
  def with_subscriptions_connection(&block); end

  private

  # source://actioncable-enhanced-postgresql-adapter//lib/action_cable/subscription_adapter/enhanced_postgresql.rb#94
  def connection_pool; end

  # source://actioncable-enhanced-postgresql-adapter//lib/action_cable/subscription_adapter/enhanced_postgresql.rb#100
  def insert_large_payload(pg_conn, payload); end

  # Override needed to ensure we reference our local Listener class
  #
  # source://actioncable-enhanced-postgresql-adapter//lib/action_cable/subscription_adapter/enhanced_postgresql.rb#110
  def listener; end
end

# source://actioncable-enhanced-postgresql-adapter//lib/action_cable/subscription_adapter/enhanced_postgresql.rb#21
ActionCable::SubscriptionAdapter::EnhancedPostgresql::CREATE_CREATED_AT_INDEX_QUERY = T.let(T.unsafe(nil), String)

# source://actioncable-enhanced-postgresql-adapter//lib/action_cable/subscription_adapter/enhanced_postgresql.rb#14
ActionCable::SubscriptionAdapter::EnhancedPostgresql::CREATE_LARGE_TABLE_QUERY = T.let(T.unsafe(nil), String)

# source://actioncable-enhanced-postgresql-adapter//lib/action_cable/subscription_adapter/enhanced_postgresql.rb#27
ActionCable::SubscriptionAdapter::EnhancedPostgresql::DELETE_LARGE_PAYLOAD_QUERY = T.let(T.unsafe(nil), String)

# execute DELETE query every N inserts
#
# source://actioncable-enhanced-postgresql-adapter//lib/action_cable/subscription_adapter/enhanced_postgresql.rb#11
ActionCable::SubscriptionAdapter::EnhancedPostgresql::INSERTS_PER_DELETE = T.let(T.unsafe(nil), Integer)

# source://actioncable-enhanced-postgresql-adapter//lib/action_cable/subscription_adapter/enhanced_postgresql.rb#25
ActionCable::SubscriptionAdapter::EnhancedPostgresql::INSERT_LARGE_PAYLOAD_QUERY = T.let(T.unsafe(nil), String)

# source://actioncable-enhanced-postgresql-adapter//lib/action_cable/subscription_adapter/enhanced_postgresql.rb#13
ActionCable::SubscriptionAdapter::EnhancedPostgresql::LARGE_PAYLOADS_TABLE = T.let(T.unsafe(nil), String)

# source://actioncable-enhanced-postgresql-adapter//lib/action_cable/subscription_adapter/enhanced_postgresql.rb#10
ActionCable::SubscriptionAdapter::EnhancedPostgresql::LARGE_PAYLOAD_PREFIX = T.let(T.unsafe(nil), String)

# source://actioncable-enhanced-postgresql-adapter//lib/action_cable/subscription_adapter/enhanced_postgresql.rb#114
class ActionCable::SubscriptionAdapter::EnhancedPostgresql::Listener < ::ActionCable::SubscriptionAdapter::PostgreSQL::Listener
  # source://actioncable-enhanced-postgresql-adapter//lib/action_cable/subscription_adapter/enhanced_postgresql.rb#115
  def invoke_callback(callback, message); end
end

# documented as 8000 bytes, but there appears to be some overhead in transit
#
# source://actioncable-enhanced-postgresql-adapter//lib/action_cable/subscription_adapter/enhanced_postgresql.rb#9
ActionCable::SubscriptionAdapter::EnhancedPostgresql::MAX_NOTIFY_SIZE = T.let(T.unsafe(nil), Integer)

# source://actioncable-enhanced-postgresql-adapter//lib/railtie.rb#2
class ActionCable::SubscriptionAdapter::EnhancedPostgresql::Railtie < ::Rails::Railtie; end

# source://actioncable-enhanced-postgresql-adapter//lib/action_cable/subscription_adapter/enhanced_postgresql.rb#26
ActionCable::SubscriptionAdapter::EnhancedPostgresql::SELECT_LARGE_PAYLOAD_QUERY = T.let(T.unsafe(nil), String)
