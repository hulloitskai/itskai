# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `email_validator` gem.
# Please instead update this file by running `bin/tapioca gem email_validator`.

# EmailValidator class
#
# source://email_validator//lib/email_validator.rb#4
class EmailValidator < ::ActiveModel::EachValidator
  # source://email_validator//lib/email_validator.rb#161
  def validate_each(record, attribute, value); end

  class << self
    # source://email_validator//lib/email_validator.rb#22
    def default_options; end

    # @return [Boolean]
    #
    # source://email_validator//lib/email_validator.rb#35
    def invalid?(value, options = T.unsafe(nil)); end

    # Refs:
    #  https://tools.ietf.org/html/rfc2822 : 3.2. Lexical Tokens, 3.4.1. Addr-spec specification
    #  https://tools.ietf.org/html/rfc5321 : 4.1.2.  Command Argument Syntax
    #
    # source://email_validator//lib/email_validator.rb#42
    def regexp(options = T.unsafe(nil)); end

    # @return [Boolean]
    #
    # source://email_validator//lib/email_validator.rb#26
    def valid?(value, options = T.unsafe(nil)); end

    protected

    # source://email_validator//lib/email_validator.rb#93
    def address_literal; end

    # source://email_validator//lib/email_validator.rb#76
    def alnum; end

    # source://email_validator//lib/email_validator.rb#80
    def alnumhy; end

    # source://email_validator//lib/email_validator.rb#72
    def alpha; end

    # source://email_validator//lib/email_validator.rb#127
    def atom_char; end

    # splitting this up into separate regex pattern for performance; let's not
    # try the "contains" pattern unless we have to
    #
    # source://email_validator//lib/email_validator.rb#104
    def domain_label_pattern; end

    # source://email_validator//lib/email_validator.rb#123
    def domain_part_is_correct_length; end

    # source://email_validator//lib/email_validator.rb#138
    def domain_part_pattern(options); end

    # source://email_validator//lib/email_validator.rb#144
    def fqdn_pattern; end

    # source://email_validator//lib/email_validator.rb#97
    def host_label_pattern; end

    # source://email_validator//lib/email_validator.rb#84
    def ipv4; end

    # source://email_validator//lib/email_validator.rb#88
    def ipv6; end

    # source://email_validator//lib/email_validator.rb#119
    def label_is_correct_length; end

    # source://email_validator//lib/email_validator.rb#133
    def local_part_pattern; end

    # source://email_validator//lib/email_validator.rb#59
    def loose_regexp(options = T.unsafe(nil)); end

    # source://email_validator//lib/email_validator.rb#68
    def rfc_regexp(options = T.unsafe(nil)); end

    # source://email_validator//lib/email_validator.rb#64
    def strict_regexp(options = T.unsafe(nil)); end

    # While, techincally, TLDs can be numeric-only, this is not allowed by ICANN
    # Ref: ICANN Application Guidebook for new TLDs (June 2012)
    #      says the following starting at page 64:
    #
    #      > The ASCII label must consist entirely of letters (alphabetic characters a-z)
    #
    #      -- https://newgtlds.icann.org/en/applicants/agb/guidebook-full-04jun12-en.pdf
    #
    # source://email_validator//lib/email_validator.rb#115
    def tld_label_pattern; end

    private

    # source://email_validator//lib/email_validator.rb#150
    def parse_options(options); end

    # source://email_validator//lib/email_validator.rb#156
    def regexp_safe_domain(options); end
  end
end

# EmailValidator::Error class
#
# source://email_validator//lib/email_validator.rb#15
class EmailValidator::Error < ::StandardError
  # @return [Error] a new instance of Error
  #
  # source://email_validator//lib/email_validator.rb#16
  def initialize(msg = T.unsafe(nil)); end
end
