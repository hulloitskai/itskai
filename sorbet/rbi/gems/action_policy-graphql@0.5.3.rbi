# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `action_policy-graphql` gem.
# Please instead update this file by running `bin/tapioca gem action_policy-graphql`.

# source://action_policy-graphql//lib/action_policy/graphql/types/failure_reasons.rb#3
module ActionPolicy
  class << self
    # source://action_policy/0.6.3/lib/action_policy.rb#35
    def cache_store; end

    # source://action_policy/0.6.3/lib/action_policy.rb#35
    def cache_store=(_arg0); end

    # source://action_policy/0.6.3/lib/action_policy.rb#37
    def enforce_predicate_rules_naming; end

    # source://action_policy/0.6.3/lib/action_policy.rb#37
    def enforce_predicate_rules_naming=(_arg0); end

    # source://action_policy/0.6.3/lib/action_policy.rb#40
    def lookup(target, allow_nil: T.unsafe(nil), default: T.unsafe(nil), **options); end
  end
end

# source://action_policy/0.6.3/lib/action_policy/policy/cache.rb#9
ActionPolicy::CACHE_NAMESPACE = T.let(T.unsafe(nil), String)

# source://action_policy-graphql//lib/action_policy/graphql/types/failure_reasons.rb#4
module ActionPolicy::GraphQL
  class << self
    # Whether to raise an exeption if field is not authorized
    # or return `nil`.
    # Defaults to `true`.
    #
    # source://action_policy-graphql//lib/action_policy/graphql.rb#28
    def authorize_raise_exception; end

    # Whether to raise an exeption if field is not authorized
    # or return `nil`.
    # Defaults to `true`.
    #
    # source://action_policy-graphql//lib/action_policy/graphql.rb#28
    def authorize_raise_exception=(_arg0); end

    # Which prefix to use for authorization fields
    # Defaults to `"can_"`
    #
    # source://action_policy-graphql//lib/action_policy/graphql.rb#32
    def default_authorization_field_prefix; end

    # Which prefix to use for authorization fields
    # Defaults to `"can_"`
    #
    # source://action_policy-graphql//lib/action_policy/graphql.rb#32
    def default_authorization_field_prefix=(_arg0); end

    # Which rule to use when no specified (e.g. `authorize: true`)
    # Defaults to `:show?`
    #
    # source://action_policy-graphql//lib/action_policy/graphql.rb#13
    def default_authorize_rule; end

    # Which rule to use when no specified (e.g. `authorize: true`)
    # Defaults to `:show?`
    #
    # source://action_policy-graphql//lib/action_policy/graphql.rb#13
    def default_authorize_rule=(_arg0); end

    # Which rule to use when no specified for preauthorization (e.g. `preauthorize: true`)
    # of a list-like field.
    # Defaults to `:index?`
    #
    # source://action_policy-graphql//lib/action_policy/graphql.rb#18
    def default_preauthorize_list_rule; end

    # Which rule to use when no specified for preauthorization (e.g. `preauthorize: true`)
    # of a list-like field.
    # Defaults to `:index?`
    #
    # source://action_policy-graphql//lib/action_policy/graphql.rb#18
    def default_preauthorize_list_rule=(_arg0); end

    # Which rule to use when no specified for preauthorization (e.g. `preauthorize: true`)
    # of a singleton-like field.
    # Defaults to `:show?`
    #
    # source://action_policy-graphql//lib/action_policy/graphql.rb#23
    def default_preauthorize_node_rule; end

    # Which rule to use when no specified for preauthorization (e.g. `preauthorize: true`)
    # of a singleton-like field.
    # Defaults to `:show?`
    #
    # source://action_policy-graphql//lib/action_policy/graphql.rb#23
    def default_preauthorize_node_rule=(_arg0); end

    # source://action_policy-graphql//lib/action_policy/graphql.rb#47
    def preauthorize_mutation_raise_exception; end

    # Whether to raise an exception if preauthorization fails
    # Equals to preauthorize_raise_exception unless explicitly set
    #
    # source://action_policy-graphql//lib/action_policy/graphql.rb#45
    def preauthorize_mutation_raise_exception=(_arg0); end

    # Whether to raise an exception if preauthorization fails
    # Equals to authorize_raise_exception unless explicitly set
    #
    # source://action_policy-graphql//lib/action_policy/graphql.rb#38
    def preauthorize_raise_exception; end

    # Sets the attribute preauthorize_raise_exception
    #
    # @param value the value to set the attribute preauthorize_raise_exception to.
    #
    # source://action_policy-graphql//lib/action_policy/graphql.rb#34
    def preauthorize_raise_exception=(_arg0); end
  end
end

# Add `authorized` option to the field
#
# Example:
#
#   class PostType < ::GraphQL::Schema::Object
#     field :comments, null: false, authorized: true
#
#     # or with options
#     field :comments, null: false, authorized: { type: :relation, with: MyPostPolicy }
#   end
#
# source://action_policy-graphql//lib/action_policy/graphql/authorized_field.rb#15
module ActionPolicy::GraphQL::AuthorizedField
  # source://action_policy-graphql//lib/action_policy/graphql/authorized_field.rb#125
  def initialize(*args, preauthorize: T.unsafe(nil), authorize: T.unsafe(nil), authorized_scope: T.unsafe(nil), authorize_field: T.unsafe(nil), **kwargs, &block); end

  private

  # source://action_policy-graphql//lib/action_policy/graphql/authorized_field.rb#148
  def add_extension!(extensions, extension_class, options); end
end

# source://action_policy-graphql//lib/action_policy/graphql/authorized_field.rb#24
class ActionPolicy::GraphQL::AuthorizedField::AuthorizeExtension < ::ActionPolicy::GraphQL::AuthorizedField::Extension
  # source://action_policy-graphql//lib/action_policy/graphql/authorized_field.rb#48
  def after_resolve(value:, context:, object:, **_rest); end

  # source://action_policy-graphql//lib/action_policy/graphql/authorized_field.rb#41
  def apply; end

  class << self
    # source://action_policy-graphql//lib/action_policy/graphql/authorized_field.rb#28
    def show_authorize_mutation_deprecation; end
  end
end

# source://action_policy-graphql//lib/action_policy/graphql/authorized_field.rb#25
ActionPolicy::GraphQL::AuthorizedField::AuthorizeExtension::DEPRECATION_MESSAGE = T.let(T.unsafe(nil), String)

# source://action_policy-graphql//lib/action_policy/graphql/authorized_field.rb#94
class ActionPolicy::GraphQL::AuthorizedField::AuthorizeFieldExtension < ::ActionPolicy::GraphQL::AuthorizedField::Extension
  # source://action_policy-graphql//lib/action_policy/graphql/authorized_field.rb#95
  def apply; end

  # source://action_policy-graphql//lib/action_policy/graphql/authorized_field.rb#100
  def resolve(context:, object:, arguments:, **_rest); end

  private

  # source://action_policy-graphql//lib/action_policy/graphql/authorized_field.rb#111
  def underscored_field_name; end
end

# source://action_policy-graphql//lib/action_policy/graphql/authorized_field.rb#16
class ActionPolicy::GraphQL::AuthorizedField::Extension < ::GraphQL::Schema::FieldExtension
  # source://action_policy-graphql//lib/action_policy/graphql/authorized_field.rb#17
  def extract_option(key, &default); end
end

# source://action_policy-graphql//lib/action_policy/graphql/authorized_field.rb#60
class ActionPolicy::GraphQL::AuthorizedField::PreauthorizeExtension < ::ActionPolicy::GraphQL::AuthorizedField::Extension
  # source://action_policy-graphql//lib/action_policy/graphql/authorized_field.rb#61
  def apply; end

  # source://action_policy-graphql//lib/action_policy/graphql/authorized_field.rb#84
  def resolve(context:, object:, arguments:, **_rest); end
end

# source://action_policy-graphql//lib/action_policy/graphql/authorized_field.rb#116
class ActionPolicy::GraphQL::AuthorizedField::ScopeExtension < ::ActionPolicy::GraphQL::AuthorizedField::Extension
  # source://action_policy-graphql//lib/action_policy/graphql/authorized_field.rb#117
  def resolve(context:, object:, arguments:, **_rest); end
end

# source://action_policy-graphql//lib/action_policy/graphql/behaviour.rb#8
module ActionPolicy::GraphQL::Behaviour
  include ::ActionPolicy::Behaviour
  include ::ActionPolicy::Behaviours::ThreadMemoized
  include ::ActionPolicy::Behaviours::Memoized
  include ::ActionPolicy::Behaviours::Namespaced

  mixes_in_class_methods ::ActionPolicy::Behaviour::ClassMethods
  mixes_in_class_methods ::ActionPolicy::Behaviour
  mixes_in_class_methods ::ActionPolicy::Behaviours::ThreadMemoized
  mixes_in_class_methods ::ActionPolicy::Behaviours::Memoized
  mixes_in_class_methods ::ActionPolicy::Behaviours::Namespaced

  # source://action_policy-graphql//lib/action_policy/graphql/behaviour.rb#52
  def current_user; end

  class << self
    # When used with self.authorized?
    #
    # source://action_policy-graphql//lib/action_policy/graphql/behaviour.rb#13
    def extended(base); end

    # @private
    #
    # source://action_policy-graphql//lib/action_policy/graphql/behaviour.rb#31
    def included(base); end
  end
end

# Add DSL to add policy rules as fields
#
# Example:
#
#   class PostType < ::GraphQL::Schema::Object
#     # Adds can_edit, can_destroy fields with
#     # AuthorizationResult type.
#
#     expose_authorization_rules :edit?, :destroy?, prefix: "can_"
#   end
#
# Prefix is "can_" by default.
#
# source://action_policy-graphql//lib/action_policy/graphql/fields.rb#21
module ActionPolicy::GraphQL::Fields
  mixes_in_class_methods ::ActionPolicy::GraphQL::Fields::ClassMethods

  class << self
    # @private
    #
    # source://action_policy-graphql//lib/action_policy/graphql/fields.rb#22
    def included(base); end
  end
end

# source://action_policy-graphql//lib/action_policy/graphql/fields.rb#26
module ActionPolicy::GraphQL::Fields::ClassMethods
  # @raise [ArgumentError]
  #
  # source://action_policy-graphql//lib/action_policy/graphql/fields.rb#27
  def expose_authorization_rules(*rules, field_name: T.unsafe(nil), prefix: T.unsafe(nil), field_options: T.unsafe(nil), **options); end
end

# source://action_policy-graphql//lib/action_policy/graphql/types/failure_reasons.rb#5
module ActionPolicy::GraphQL::Types; end

# source://action_policy-graphql//lib/action_policy/graphql/types/authorization_result.rb#8
class ActionPolicy::GraphQL::Types::AuthorizationResult < ::GraphQL::Schema::Object
  # source://action_policy-graphql//lib/action_policy/graphql/types/authorization_result.rb#13
  def message; end

  # source://action_policy-graphql//lib/action_policy/graphql/types/authorization_result.rb#18
  def reasons; end
end

# source://action_policy-graphql//lib/action_policy/graphql/types/failure_reasons.rb#6
class ActionPolicy::GraphQL::Types::FailureReasons < ::GraphQL::Schema::Object
  # source://action_policy-graphql//lib/action_policy/graphql/types/failure_reasons.rb#10
  def details; end
end

# source://action_policy/0.6.3/lib/action_policy/version.rb#4
ActionPolicy::VERSION = T.let(T.unsafe(nil), String)
