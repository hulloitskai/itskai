# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `terminal-table` gem.
# Please instead update this file by running `bin/tapioca gem terminal-table`.

module Terminal; end

class Terminal::Table
  # Generates a ASCII/Unicode table with the given _options_.
  #
  # @return [Table] a new instance of Table
  def initialize(options = T.unsafe(nil), &block); end

  # Add a row.
  def <<(array); end

  # Check if _other_ is equal to self. _other_ is considered equal
  # if it contains the same headings and rows.
  def ==(other); end

  # Add a row.
  def add_row(array); end

  # Add a separator.
  def add_separator(border_type: T.unsafe(nil)); end

  # Align column _n_ to the given _alignment_ of :center, :left, or :right.
  def align_column(n, alignment); end

  def cell_padding; end
  def cell_spacing; end

  # Return column _n_.
  def column(n, method = T.unsafe(nil), array = T.unsafe(nil)); end

  # Return length of column _n_.
  def column_width(n); end

  # Return _n_ column including headings.
  def column_with_headings(n, method = T.unsafe(nil)); end

  # Return columns.
  def columns; end

  # Elaborate rows to form an Array of Rows and Separators with adjacency properties added.
  #
  # This is separated from the String rendering so that certain features may be tweaked
  # before the String is built.
  def elaborate_rows; end

  # Returns the value of attribute headings.
  def headings; end

  # Set the headings
  def headings=(arrays); end

  # Return length of column _n_.
  # for legacy support
  def length_of_column(n); end

  # Return total number of columns available.
  def number_of_columns; end

  # Render the table.
  def render; end

  # Return rows without separator rows.
  def rows; end

  def rows=(array); end
  def style; end
  def style=(options); end

  # Returns the value of attribute title.
  def title; end

  def title=(title); end

  # Render the table.
  def to_s; end

  private

  def column_widths; end
  def columns_width; end

  # Return headings combined with rows.
  def headings_with_rows; end

  def recalc_column_widths; end
  def require_column_widths_recalc; end
  def title_cell_options; end
  def yield_or_eval(&block); end
end

class Terminal::Table::AsciiBorder < ::Terminal::Table::Border
  # @return [AsciiBorder] a new instance of AsciiBorder
  def initialize; end

  # Get horizontal border elements
  #
  # @return [Array] a 6 element list of: [i-left, horizontal-bar, i-up/down, i-right, i-down, i-up]
  def horizontal(_type); end

  # Get vertical border elements
  #
  # @return [Array] 3-element list of [left, center, right]
  def vertical; end
end

Terminal::Table::AsciiBorder::HORIZONTALS = T.let(T.unsafe(nil), Array)
Terminal::Table::AsciiBorder::INTERSECTIONS = T.let(T.unsafe(nil), Array)
Terminal::Table::AsciiBorder::VERTICALS = T.let(T.unsafe(nil), Array)

class Terminal::Table::Border
  # @return [Border] a new instance of Border
  def initialize; end

  def [](key); end
  def []=(key, val); end

  # Returns the value of attribute bottom.
  def bottom; end

  # Sets the attribute bottom
  #
  # @param value the value to set the attribute bottom to.
  def bottom=(_arg0); end

  # Returns the value of attribute data.
  def data; end

  # Sets the attribute data
  #
  # @param value the value to set the attribute data to.
  def data=(_arg0); end

  # Returns the value of attribute left.
  def left; end

  # Sets the attribute left
  #
  # @param value the value to set the attribute left to.
  def left=(_arg0); end

  # If @left, return the edge else empty-string.
  def maybeleft(key); end

  # If @right, return the edge else empty-string.
  def mayberight(key); end

  def remove_horizontals; end
  def remove_verticals; end

  # Returns the value of attribute right.
  def right; end

  # Sets the attribute right
  #
  # @param value the value to set the attribute right to.
  def right=(_arg0); end

  # Returns the value of attribute top.
  def top; end

  # Sets the attribute top
  #
  # @param value the value to set the attribute top to.
  def top=(_arg0); end

  private

  def initialize_dup(other); end
end

class Terminal::Table::Cell
  # Initialize with _options_.
  #
  # @return [Cell] a new instance of Cell
  def initialize(options = T.unsafe(nil)); end

  def align(val, position, length); end
  def alignment; end
  def alignment=(val); end

  # @return [Boolean]
  def alignment?; end

  # Column span.
  def colspan; end

  def inspect; end
  def lines; end

  # Render the cell.
  def render(line = T.unsafe(nil)); end

  # Render the cell.
  def to_s(line = T.unsafe(nil)); end

  # Cell value.
  def value; end

  # Returns the longest line in the cell and
  # removes all ANSI escape sequences (e.g. color)
  def value_for_column_width_recalc; end

  # Returns the width of this cell
  def width; end
end

class Terminal::Table::MarkdownBorder < ::Terminal::Table::AsciiBorder
  # @return [MarkdownBorder] a new instance of MarkdownBorder
  def initialize; end
end

class Terminal::Table::Row
  # Initialize with _width_ and _options_.
  #
  # @return [Row] a new instance of Row
  def initialize(table, array = T.unsafe(nil), **_kwargs); end

  def <<(item); end
  def [](index); end
  def add_cell(item); end

  # Row cells
  def cells; end

  # used to find indices where we have table '+' crossings.
  # in cases where the colspan > 1, then we will skip over some numbers
  # if colspan is always 1, then the list should be incrementing by 1.
  #
  # skip 0 entry, because it's the left side.
  # skip last entry, because it's the right side.
  # we only care about "+/T" style crossings.
  def crossings; end

  def height; end
  def number_of_columns; end
  def render; end

  # Returns the value of attribute table.
  def table; end
end

class Terminal::Table::Separator < ::Terminal::Table::Row
  # `prevrow`, `nextrow` contain references to adjacent rows.
  #
  # `border_type` is a symbol used to control which type of border is used
  # on the separator (:top for top-edge, :bot for bottom-edge,
  # :div for interior, and :strong for emphasized-interior)
  #
  # `implicit` is false for user-added separators, and true for
  # implicit/auto-generated separators.
  #
  # @return [Separator] a new instance of Separator
  def initialize(*args, border_type: T.unsafe(nil), implicit: T.unsafe(nil)); end

  # Returns the value of attribute border_type.
  def border_type; end

  # Sets the attribute border_type
  #
  # @param value the value to set the attribute border_type to.
  def border_type=(_arg0); end

  # Returns the value of attribute implicit.
  def implicit; end

  def render; end

  # Save off neighboring rows, so that we can use them later in determining
  # which types of table edges to use.
  def save_adjacent_rows(prevrow, nextrow); end
end

# A Style object holds all the formatting information for a Table object
#
# To create a table with a certain style, use either the constructor
# option <tt>:style</tt>, the Table#style object or the Table#style= method
#
# All these examples have the same effect:
#
#     # by constructor
#     @table = Table.new(:style => {:padding_left => 2, :width => 40})
#
#     # by object
#     @table.style.padding_left = 2
#     @table.style.width = 40
#
#     # by method
#     @table.style = {:padding_left => 2, :width => 40}
#
# To set a default style for all tables created afterwards use Style.defaults=
#
#     Terminal::Table::Style.defaults = {:width => 80}
class Terminal::Table::Style
  extend ::Forwardable

  # @return [Style] a new instance of Style
  def initialize(options = T.unsafe(nil)); end

  # Returns the value of attribute alignment.
  def alignment; end

  # Sets the attribute alignment
  #
  # @param value the value to set the attribute alignment to.
  def alignment=(_arg0); end

  # Returns the value of attribute all_separators.
  def all_separators; end

  # Sets the attribute all_separators
  #
  # @param value the value to set the attribute all_separators to.
  def all_separators=(_arg0); end

  def apply(options); end

  # Accessor for instance of Border
  def border; end

  def border=(val); end
  def border_bottom; end
  def border_bottom=(val); end
  def border_i=(val); end
  def border_left; end
  def border_left=(val); end
  def border_right; end
  def border_right=(val); end
  def border_top; end
  def border_top=(val); end

  # settors/gettor for legacy ascii borders
  def border_x=(val); end

  def border_y; end
  def border_y=(val); end
  def border_y_width; end
  def horizontal(*args, **_arg1, &block); end

  # Returns the value of attribute margin_left.
  def margin_left; end

  # Sets the attribute margin_left
  #
  # @param value the value to set the attribute margin_left to.
  def margin_left=(_arg0); end

  def on_change(attr); end

  # Returns the value of attribute padding_left.
  def padding_left; end

  # Sets the attribute padding_left
  #
  # @param value the value to set the attribute padding_left to.
  def padding_left=(_arg0); end

  # Returns the value of attribute padding_right.
  def padding_right; end

  # Sets the attribute padding_right
  #
  # @param value the value to set the attribute padding_right to.
  def padding_right=(_arg0); end

  def remove_horizontals(*args, **_arg1, &block); end
  def remove_verticals(*args, **_arg1, &block); end
  def vertical(*args, **_arg1, &block); end

  # Returns the value of attribute width.
  def width; end

  # Sets the attribute width
  #
  # @param value the value to set the attribute width to.
  def width=(_arg0); end

  class << self
    def defaults; end
    def defaults=(options); end
  end
end

module Terminal::Table::TableHelper
  def table(headings = T.unsafe(nil), *rows, &block); end
end

class Terminal::Table::UnicodeBorder < ::Terminal::Table::Border
  # @return [UnicodeBorder] a new instance of UnicodeBorder
  def initialize; end

  # Get horizontal border elements
  #
  # @raise [ArgumentError]
  # @return [Array] a 6 element list of: [i-left, horizontal-bar, i-up/down, i-right, i-down, i-up]
  def horizontal(type); end

  # Get vertical border elements
  #
  # @return [Array] 3-element list of [left, center, right]
  def vertical; end
end

Terminal::Table::UnicodeBorder::ALLOWED_SEPARATOR_BORDER_STYLES = T.let(T.unsafe(nil), Array)
Terminal::Table::UnicodeBorder::HORIZONTALS = T.let(T.unsafe(nil), Array)
Terminal::Table::UnicodeBorder::INTERSECTIONS = T.let(T.unsafe(nil), Array)
Terminal::Table::UnicodeBorder::VERTICALS = T.let(T.unsafe(nil), Array)

# Unicode Border With rounded edges
class Terminal::Table::UnicodeRoundBorder < ::Terminal::Table::UnicodeBorder
  # @return [UnicodeRoundBorder] a new instance of UnicodeRoundBorder
  def initialize; end
end

# Unicode Border with thick outer edges
class Terminal::Table::UnicodeThickEdgeBorder < ::Terminal::Table::UnicodeBorder
  # @return [UnicodeThickEdgeBorder] a new instance of UnicodeThickEdgeBorder
  def initialize; end
end

module Terminal::Table::Util
  private

  # removes all ANSI escape sequences (e.g. color)
  def ansi_escape(line); end

  class << self
    # removes all ANSI escape sequences (e.g. color)
    def ansi_escape(line); end
  end
end

Terminal::Table::VERSION = T.let(T.unsafe(nil), String)
