# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `htmlbeautifier` gem.
# Please instead update this file by running `bin/tapioca gem htmlbeautifier`.

module HtmlBeautifier
  class << self
    # Returns a beautified HTML/HTML+ERB document as a String.
    # html must be an object that responds to +#to_s+.
    #
    # Available options are:
    # tab_stops - an integer for the number of spaces to indent, default 2.
    # Deprecated: see indent.
    # indent - what to indent with ("  ", "\t" etc.), default "  "
    # stop_on_errors - raise an exception on a badly-formed document. Default
    # is false, i.e. continue to process the rest of the document.
    # initial_level - The entire output will be indented by this number of steps.
    # Default is 0.
    # keep_blank_lines - an integer for the number of consecutive empty lines
    # to keep in output.
    def beautify(html, options = T.unsafe(nil)); end
  end
end

class HtmlBeautifier::Builder
  # @return [Builder] a new instance of Builder
  def initialize(output, options = T.unsafe(nil)); end

  private

  def close_block_element(elem); end
  def close_element(elem); end
  def close_ie_cc(elem); end
  def embed(opening, code, closing); end
  def emit(*strings); end
  def emit_reindented_block_content(code); end
  def error(text); end
  def foreign_block(opening, code, closing); end
  def foreign_block_indentation(code); end
  def indent; end
  def new_line; end
  def new_lines(*content); end
  def open_block_element(elem); end
  def open_element(elem); end
  def open_ie_cc(elem); end
  def outdent; end
  def preformatted_block(opening, content, closing); end
  def standalone_element(elem); end
  def text(*strings); end
end

HtmlBeautifier::Builder::DEFAULT_OPTIONS = T.let(T.unsafe(nil), Hash)

class HtmlBeautifier::HtmlParser < ::HtmlBeautifier::Parser
  # @return [HtmlParser] a new instance of HtmlParser
  def initialize; end
end

HtmlBeautifier::HtmlParser::ELEMENT_CONTENT = T.let(T.unsafe(nil), Regexp)
HtmlBeautifier::HtmlParser::HTML_BLOCK_ELEMENTS = T.let(T.unsafe(nil), Regexp)
HtmlBeautifier::HtmlParser::HTML_VOID_ELEMENTS = T.let(T.unsafe(nil), Regexp)
HtmlBeautifier::HtmlParser::MAPPINGS = T.let(T.unsafe(nil), Array)

class HtmlBeautifier::Parser
  # @return [Parser] a new instance of Parser
  # @yield [_self]
  # @yieldparam _self [HtmlBeautifier::Parser] the object that the method was called on
  def initialize; end

  def map(pattern, method); end
  def scan(subject, receiver); end
  def source_line_number; end
  def source_so_far; end

  private

  def dispatch(receiver); end
  def extract_params(scanner); end
end

class HtmlBeautifier::RubyIndenter
  # @return [Boolean]
  def indent?(lines); end

  # @return [Boolean]
  def outdent?(lines); end
end

HtmlBeautifier::RubyIndenter::INDENT_KEYWORDS = T.let(T.unsafe(nil), Array)
HtmlBeautifier::RubyIndenter::OUTDENT_KEYWORDS = T.let(T.unsafe(nil), Array)
HtmlBeautifier::RubyIndenter::RUBY_INDENT = T.let(T.unsafe(nil), Regexp)
HtmlBeautifier::RubyIndenter::RUBY_OUTDENT = T.let(T.unsafe(nil), Regexp)
module HtmlBeautifier::VERSION; end
HtmlBeautifier::VERSION::MAJOR = T.let(T.unsafe(nil), Integer)
HtmlBeautifier::VERSION::MINOR = T.let(T.unsafe(nil), Integer)
HtmlBeautifier::VERSION::STRING = T.let(T.unsafe(nil), String)
HtmlBeautifier::VERSION::TINY = T.let(T.unsafe(nil), Integer)
