# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `email_reply_parser` gem.
# Please instead update this file by running `bin/tapioca gem email_reply_parser`.

# EmailReplyParser is a small library to parse plain text email content.  The
# goal is to identify which fragments are quoted, part of a signature, or
# original body content.  We want to support both top and bottom posters, so
# no simple "REPLY ABOVE HERE" content is used.
#
# Beyond RFC 5322 (which is handled by the [Ruby mail gem][mail]), there aren't
# any real standards for how emails are created.  This attempts to parse out
# common conventions for things like replies:
#
#     this is some text
#
#     On <date>, <author> wrote:
#     > blah blah
#     > blah blah
#
# ... and signatures:
#
#     this is some text
#
#     --
#     Bob
#     http://homepage.com/~bob
#
# Each of these are parsed into Fragment objects.
#
# EmailReplyParser also attempts to figure out which of these blocks should
# be hidden from users.
#
# [mail]: https://github.com/mikel/mail
#
# source://email_reply_parser//lib/email_reply_parser.rb#32
class EmailReplyParser
  class << self
    # Public: Get the text of the visible portions of the given email body.
    #
    # text - A String email body.
    #
    # Returns a String.
    #
    # source://email_reply_parser//lib/email_reply_parser.rb#49
    def parse_reply(text); end

    # Public: Splits an email body into a list of Fragments.
    #
    # text - A String email body.
    #
    # Returns an Email instance.
    #
    # source://email_reply_parser//lib/email_reply_parser.rb#40
    def read(text); end
  end
end

# An Email instance represents a parsed body String.
#
# source://email_reply_parser//lib/email_reply_parser.rb#56
class EmailReplyParser::Email
  # @return [Email] a new instance of Email
  #
  # source://email_reply_parser//lib/email_reply_parser.rb#60
  def initialize; end

  # Emails have an Array of Fragments.
  #
  # source://email_reply_parser//lib/email_reply_parser.rb#58
  def fragments; end

  # Splits the given text into a list of Fragments.  This is roughly done by
  # reversing the text and parsing from the bottom to the top.  This way we
  # can check for 'On <date>, <author> wrote:' lines above quoted blocks.
  #
  # text - A String email body.
  #
  # Returns this same Email instance.
  #
  # source://email_reply_parser//lib/email_reply_parser.rb#78
  def read(text); end

  # Public: Gets the combined text of the visible fragments of the email body.
  #
  # Returns a String.
  #
  # source://email_reply_parser//lib/email_reply_parser.rb#67
  def visible_text; end

  private

  # Builds the fragment string and reverses it, after all lines have been
  # added.  It also checks to see if this Fragment is hidden.  The hidden
  # Fragment check reads from the bottom to the top.
  #
  # Any quoted Fragments or signature Fragments are marked hidden if they
  # are below any visible Fragments.  Visible Fragments are expected to
  # contain original content by the author.  If they are below a quoted
  # Fragment, then the Fragment should be visible to give context to the
  # reply.
  #
  #     some original text (visible)
  #
  #     > do you have any two's? (quoted, visible)
  #
  #     Go fish! (visible)
  #
  #     > --
  #     > Player 1 (quoted, hidden)
  #
  #     --
  #     Player 2 (signature, hidden)
  #
  # source://email_reply_parser//lib/email_reply_parser.rb#210
  def finish_fragment; end

  # Detects if a given line is a header above a quoted area.  It is only
  # checked for lines preceding quoted regions.
  #
  # line - A String line of text from the email.
  #
  # Returns true if the line is a valid header, or false.
  #
  # @return [Boolean]
  #
  # source://email_reply_parser//lib/email_reply_parser.rb#184
  def quote_header?(line); end

  # Scans the given line of text and figures out which fragment it belongs
  # to.
  #
  # line - A String line of text from the email.
  #
  # Returns nothing.
  #
  # source://email_reply_parser//lib/email_reply_parser.rb#146
  def scan_line(line); end
end

# source://email_reply_parser//lib/email_reply_parser.rb#134
EmailReplyParser::Email::EMPTY = T.let(T.unsafe(nil), String)

# source://email_reply_parser//lib/email_reply_parser.rb#135
EmailReplyParser::Email::SIGNATURE = T.let(T.unsafe(nil), String)

# source://email_reply_parser//lib/email_reply_parser.rb#136
EmailReplyParser::Email::SIG_REGEX = T.let(T.unsafe(nil), Regexp)

# Represents a group of paragraphs in the email sharing common attributes.
# Paragraphs should get their own fragment if they are a quoted area or a
# signature.
#
# source://email_reply_parser//lib/email_reply_parser.rb#234
class EmailReplyParser::Fragment < ::Struct
  # @return [Fragment] a new instance of Fragment
  #
  # source://email_reply_parser//lib/email_reply_parser.rb#241
  def initialize(quoted, first_line); end

  # This is an Array of String lines of content.  Since the content is
  # reversed, this array is backwards, and contains reversed strings.
  #
  # source://email_reply_parser//lib/email_reply_parser.rb#235
  def content; end

  # Builds the string content by joining the lines and reversing them.
  #
  # Returns nothing.
  #
  # source://email_reply_parser//lib/email_reply_parser.rb#256
  def finish; end

  # Returns the value of attribute hidden
  #
  # @return [Object] the current value of hidden
  def hidden?; end

  # source://email_reply_parser//lib/email_reply_parser.rb#266
  def inspect; end

  # This is an Array of String lines of content.  Since the content is
  # reversed, this array is backwards, and contains reversed strings.
  #
  # source://email_reply_parser//lib/email_reply_parser.rb#235
  def lines; end

  # Returns the value of attribute quoted
  #
  # @return [Object] the current value of quoted
  def quoted?; end

  # Returns the value of attribute signature
  #
  # @return [Object] the current value of signature
  def signature?; end

  # source://email_reply_parser//lib/email_reply_parser.rb#262
  def to_s; end
end

# source://email_reply_parser//lib/email_reply_parser.rb#33
EmailReplyParser::VERSION = T.let(T.unsafe(nil), String)
