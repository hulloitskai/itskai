# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `js_from_routes` gem.
# Please instead update this file by running `bin/tapioca gem js_from_routes`.

# Public: Automatically generates JS for Rails routes with { export: true }.
# Generates one file per controller, and one function per route.
#
# source://js_from_routes//lib/js_from_routes/generator.rb#10
module JsFromRoutes
  class << self
    # Public: Configuration of the code generator.
    #
    # @yield [@config]
    #
    # source://js_from_routes//lib/js_from_routes/generator.rb#131
    def config; end

    # Public: Generates code for the specified routes with { export: true }.
    #
    # @raise [ArgumentError]
    #
    # source://js_from_routes//lib/js_from_routes/generator.rb#138
    def generate!(app_or_routes = T.unsafe(nil)); end

    private

    # source://js_from_routes//lib/js_from_routes/generator.rb#172
    def default_config(root); end

    # Internal: Returns exported routes grouped by controller name.
    #
    # source://js_from_routes//lib/js_from_routes/generator.rb#187
    def exported_routes_by_controller(routes); end

    # source://js_from_routes//lib/js_from_routes/generator.rb#155
    def generate_file_for_all(routes); end

    # source://js_from_routes//lib/js_from_routes/generator.rb#146
    def generate_files(exported_routes); end
  end
end

# Internal: Helper class used as a presenter for the routes template.
#
# source://js_from_routes//lib/js_from_routes/generator.rb#12
class JsFromRoutes::ControllerRoutes
  # @return [ControllerRoutes] a new instance of ControllerRoutes
  #
  # source://js_from_routes//lib/js_from_routes/generator.rb#15
  def initialize(controller, routes, config); end

  # Internal: The base name of the JS file to be written.
  #
  # source://js_from_routes//lib/js_from_routes/generator.rb#49
  def basename; end

  # Public: Used to check whether the file should be generated again, changes
  # based on the configuration, and route definition.
  #
  # source://js_from_routes//lib/js_from_routes/generator.rb#24
  def cache_key; end

  # Public: Exposes the preferred import library to the generator.
  #
  # source://js_from_routes//lib/js_from_routes/generator.rb#29
  def client_library; end

  # Internal: Name of the JS file with helpers for the the given controller.
  #
  # source://js_from_routes//lib/js_from_routes/generator.rb#34
  def filename; end

  # Public: Name of the JS file with helpers for the the given controller.
  #
  # source://js_from_routes//lib/js_from_routes/generator.rb#39
  def import_filename; end

  # Public: Name of the file as a valid JS variable.
  #
  # source://js_from_routes//lib/js_from_routes/generator.rb#44
  def js_name; end

  # Returns the value of attribute routes.
  #
  # source://js_from_routes//lib/js_from_routes/generator.rb#13
  def routes; end
end

# NOTE: Not strictly required, but it helps to simplify the setup.
#
# source://js_from_routes//lib/js_from_routes/railtie.rb#6
class JsFromRoutes::Railtie < ::Rails::Railtie; end

# Internal: A presenter for an individual Rails action.
#
# source://js_from_routes//lib/js_from_routes/generator.rb#55
class JsFromRoutes::Route
  # @return [Route] a new instance of Route
  #
  # source://js_from_routes//lib/js_from_routes/generator.rb#56
  def initialize(route, mappings = T.unsafe(nil)); end

  # Public: The `export` setting specified for the action.
  #
  # source://js_from_routes//lib/js_from_routes/generator.rb#61
  def export; end

  # Public: The name of the JS helper for the action. Example: 'destroyAll'
  #
  # source://js_from_routes//lib/js_from_routes/generator.rb#76
  def helper; end

  # Internal: Useful as a cache key for the route, and for debugging purposes.
  #
  # source://js_from_routes//lib/js_from_routes/generator.rb#82
  def inspect; end

  # Public: The path for the action. Example: '/users/:id/edit'
  #
  # source://js_from_routes//lib/js_from_routes/generator.rb#71
  def path; end

  # Public: The HTTP verb for the action. Example: 'patch'
  #
  # source://js_from_routes//lib/js_from_routes/generator.rb#66
  def verb; end
end

# Internal: Represents a compiled template that can write itself to a file.
#
# source://js_from_routes//lib/js_from_routes/generator.rb#88
class JsFromRoutes::Template
  # @return [Template] a new instance of Template
  #
  # source://js_from_routes//lib/js_from_routes/generator.rb#89
  def initialize(template_path); end

  # Public: Checks if the cache is fresh, or renders the template with the
  # specified variables, and writes the updated result to a file.
  #
  # source://js_from_routes//lib/js_from_routes/generator.rb#96
  def write_if_changed(object); end

  private

  # Internal: Returns a String with the generated JS code.
  #
  # source://js_from_routes//lib/js_from_routes/generator.rb#103
  def render_template(object); end

  # Internal: Returns true if the cache key has changed since the last codegen.
  #
  # @return [Boolean]
  #
  # source://js_from_routes//lib/js_from_routes/generator.rb#108
  def stale?(file, cache_key_comment); end

  # Internal: Writes if the file does not exist or the cache key has changed.
  # The cache strategy consists of a comment on the first line of the file.
  #
  # Yields to receive the rendered file content when it needs to.
  #
  # source://js_from_routes//lib/js_from_routes/generator.rb#116
  def write_file_if_changed(name, cache_key); end
end
