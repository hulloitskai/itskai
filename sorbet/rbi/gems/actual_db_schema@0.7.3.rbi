# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `actual_db_schema` gem.
# Please instead update this file by running `bin/tapioca gem actual_db_schema`.


class ActiveRecord::MigrationProxy < ::Struct
  include ::ActualDbSchema::Patches::MigrationProxy
end

# The main module definition
#
# source://actual_db_schema//lib/actual_db_schema/git.rb#3
module ActualDbSchema
  class << self
    # Returns the value of attribute config.
    #
    # source://actual_db_schema//lib/actual_db_schema.rb#23
    def config; end

    # Sets the attribute config
    #
    # @param value the value to set the attribute config to.
    #
    # source://actual_db_schema//lib/actual_db_schema.rb#23
    def config=(_arg0); end

    # source://actual_db_schema//lib/actual_db_schema.rb#48
    def default_migrated_folder; end

    # Returns the value of attribute failed.
    #
    # source://actual_db_schema//lib/actual_db_schema.rb#23
    def failed; end

    # Sets the attribute failed
    #
    # @param value the value to set the attribute failed to.
    #
    # source://actual_db_schema//lib/actual_db_schema.rb#23
    def failed=(_arg0); end

    # source://actual_db_schema//lib/actual_db_schema.rb#60
    def for_each_db_connection; end

    # source://actual_db_schema//lib/actual_db_schema.rb#31
    def migrated_folder; end

    # source://actual_db_schema//lib/actual_db_schema.rb#35
    def migrated_folders; end

    # source://actual_db_schema//lib/actual_db_schema.rb#56
    def migration_filename(fullpath); end

    # source://actual_db_schema//lib/actual_db_schema.rb#52
    def migrations_paths; end
  end
end

# source://actual_db_schema//lib/actual_db_schema/commands/base.rb#4
module ActualDbSchema::Commands; end

# Base class for all commands
#
# source://actual_db_schema//lib/actual_db_schema/commands/base.rb#6
class ActualDbSchema::Commands::Base
  # source://actual_db_schema//lib/actual_db_schema/commands/base.rb#7
  def call; end

  private

  # @raise [NotImplementedError]
  #
  # source://actual_db_schema//lib/actual_db_schema/commands/base.rb#17
  def call_impl; end

  # source://actual_db_schema//lib/actual_db_schema/commands/base.rb#21
  def context; end
end

# Shows the list of phantom migrations
#
# source://actual_db_schema//lib/actual_db_schema/commands/list.rb#6
class ActualDbSchema::Commands::List < ::ActualDbSchema::Commands::Base
  private

  # source://actual_db_schema//lib/actual_db_schema/commands/list.rb#73
  def branch_column_width; end

  # source://actual_db_schema//lib/actual_db_schema/commands/list.rb#60
  def branch_for(version); end

  # source://actual_db_schema//lib/actual_db_schema/commands/list.rb#9
  def call_impl; end

  # source://actual_db_schema//lib/actual_db_schema/commands/list.rb#31
  def header; end

  # source://actual_db_schema//lib/actual_db_schema/commands/list.rb#14
  def indexed_phantom_migrations; end

  # source://actual_db_schema//lib/actual_db_schema/commands/list.rb#48
  def line_for(status, version); end

  # source://actual_db_schema//lib/actual_db_schema/commands/list.rb#68
  def longest_branch_name; end

  # source://actual_db_schema//lib/actual_db_schema/commands/list.rb#64
  def metadata; end

  # source://actual_db_schema//lib/actual_db_schema/commands/list.rb#18
  def preambule; end

  # source://actual_db_schema//lib/actual_db_schema/commands/list.rb#27
  def separator_width; end

  # source://actual_db_schema//lib/actual_db_schema/commands/list.rb#41
  def table; end
end

# Rolls back all phantom migrations
#
# source://actual_db_schema//lib/actual_db_schema/commands/rollback.rb#6
class ActualDbSchema::Commands::Rollback < ::ActualDbSchema::Commands::Base
  private

  # source://actual_db_schema//lib/actual_db_schema/commands/rollback.rb#9
  def call_impl; end
end

# Git helper
#
# source://actual_db_schema//lib/actual_db_schema/git.rb#5
class ActualDbSchema::Git
  class << self
    # source://actual_db_schema//lib/actual_db_schema/git.rb#6
    def current_branch; end
  end
end

# source://actual_db_schema//lib/actual_db_schema/patches/migration_proxy.rb#4
module ActualDbSchema::Patches; end

# Add new command to roll back the phantom migrations
#
# source://actual_db_schema//lib/actual_db_schema/patches/migration_context.rb#6
module ActualDbSchema::Patches::MigrationContext
  # source://actual_db_schema//lib/actual_db_schema/patches/migration_context.rb#7
  def rollback_branches; end

  private

  # source://actual_db_schema//lib/actual_db_schema/patches/migration_context.rb#21
  def down_migrator_for(migration); end

  # source://actual_db_schema//lib/actual_db_schema/patches/migration_context.rb#31
  def migration_files; end
end

# Records the migration file into the tmp folder after it's been migrated
#
# source://actual_db_schema//lib/actual_db_schema/patches/migration_proxy.rb#6
module ActualDbSchema::Patches::MigrationProxy
  # source://actual_db_schema//lib/actual_db_schema/patches/migration_proxy.rb#7
  def migrate(direction); end
end

# Run only one migration that's being rolled back
#
# source://actual_db_schema//lib/actual_db_schema/patches/migrator.rb#6
module ActualDbSchema::Patches::Migrator
  # source://actual_db_schema//lib/actual_db_schema/patches/migrator.rb#7
  def runnable; end
end

# Load the task into Rails app
#
# source://actual_db_schema//lib/railtie.rb#7
class ActualDbSchema::Railtie < ::Rails::Railtie; end

# Stores the migrated files into the tmp folder
#
# source://actual_db_schema//lib/actual_db_schema/store.rb#5
class ActualDbSchema::Store
  include ::Singleton
  extend ::Singleton::SingletonClassMethods

  # source://actual_db_schema//lib/actual_db_schema/store.rb#17
  def read; end

  # source://actual_db_schema//lib/actual_db_schema/store.rb#10
  def write(filename); end

  private

  # source://actual_db_schema//lib/actual_db_schema/store.rb#36
  def folder; end

  # source://actual_db_schema//lib/actual_db_schema/store.rb#25
  def record_metadata(filename); end

  # source://actual_db_schema//lib/actual_db_schema/store.rb#40
  def store_file; end

  class << self
    private

    def allocate; end
    def new(*_arg0); end
  end
end

# source://actual_db_schema//lib/actual_db_schema/store.rb#8
class ActualDbSchema::Store::Item < ::Struct
  # Returns the value of attribute branch
  #
  # @return [Object] the current value of branch
  def branch; end

  # Sets the attribute branch
  #
  # @param value [Object] the value to set the attribute branch to.
  # @return [Object] the newly set value
  def branch=(_); end

  # Returns the value of attribute timestamp
  #
  # @return [Object] the current value of timestamp
  def timestamp; end

  # Sets the attribute timestamp
  #
  # @param value [Object] the value to set the attribute timestamp to.
  # @return [Object] the newly set value
  def timestamp=(_); end

  # Returns the value of attribute version
  #
  # @return [Object] the current value of version
  def version; end

  # Sets the attribute version
  #
  # @param value [Object] the value to set the attribute version to.
  # @return [Object] the newly set value
  def version=(_); end

  class << self
    def [](*_arg0); end
    def inspect; end
    def keyword_init?; end
    def members; end
    def new(*_arg0); end
  end
end

# source://actual_db_schema//lib/actual_db_schema/version.rb#4
ActualDbSchema::VERSION = T.let(T.unsafe(nil), String)
