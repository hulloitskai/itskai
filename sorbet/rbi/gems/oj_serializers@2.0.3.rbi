# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `oj_serializers` gem.
# Please instead update this file by running `bin/tapioca gem oj_serializers`.


# source://oj_serializers//lib/oj_serializers/serializer.rb#726
Oj::Serializer = OjSerializers::Serializer

# NOTE: Add an optimization to make it easier to work with a StringWriter
# transparently in different scenarios.
#
# source://oj_serializers//lib/oj_serializers/setup.rb#15
class Oj::StringWriter
  # Internal: ActiveSupport can pass an options argument to `as_json` when
  # serializing a Hash or Array.
  #
  # source://oj_serializers//lib/oj_serializers/setup.rb#20
  def as_json(_options = T.unsafe(nil)); end

  def original_as_json; end
  def pop; end
  def pop_all; end
  def push_array(*_arg0); end
  def push_json(*_arg0); end
  def push_key(_arg0); end
  def push_object(*_arg0); end
  def push_value(*_arg0); end
  def raw_json; end
  def reset; end

  # Internal: We can use `to_s` directly, this is not important but gives a
  # slight boost to a few use cases that use it for caching in Memcached.
  #
  # source://oj_serializers//lib/oj_serializers/setup.rb#26
  def to_json(_options = T.unsafe(nil)); end

  def to_s; end

  private

  def new(*_arg0); end

  class << self
    def new(*_arg0); end
  end
end

# source://oj_serializers//lib/oj_serializers/version.rb#3
module OjSerializers; end

# Public: Allows to prevent double encoding an existing JSON string.
#
# NOTE: Oj's raw_json option means there's no performance overhead, as it would
# occur with the previous alternative of parsing the JSON string.
#
# source://oj_serializers//lib/oj_serializers/json_value.rb#7
class OjSerializers::JsonValue
  # Public: Expects json to be a JSON-encoded string.
  #
  # @return [JsonValue] a new instance of JsonValue
  #
  # source://oj_serializers//lib/oj_serializers/json_value.rb#9
  def initialize(json); end

  # Internal: Used by Oj::Rails::Encoder when found inside a Hash or Array.
  #
  # source://oj_serializers//lib/oj_serializers/json_value.rb#31
  def as_json(_options = T.unsafe(nil)); end

  # Internal: Used by Oj::Rails::Encoder because we use the `raw_json` option.
  #
  # source://oj_serializers//lib/oj_serializers/json_value.rb#26
  def raw_json(*_arg0); end

  # Public: Return the internal json when using string interpolation.
  #
  # source://oj_serializers//lib/oj_serializers/json_value.rb#21
  def to_s; end

  class << self
    # Public: Expects an Array of JSON-encoded strings and wraps them in a JSON array.
    #
    # Returns a JsonValue representing a JSON-encoded array.
    #
    # source://oj_serializers//lib/oj_serializers/json_value.rb#16
    def array(json_rows); end
  end
end

# Internal: Provides a simple API on top of Hash for memoization purposes.
#
# source://oj_serializers//lib/oj_serializers/memo.rb#4
class OjSerializers::Memo
  # @return [Memo] a new instance of Memo
  #
  # source://oj_serializers//lib/oj_serializers/memo.rb#5
  def initialize; end

  # Internal: Allows to clear the cache when binding the serializer to a
  # different object.
  #
  # source://oj_serializers//lib/oj_serializers/memo.rb#11
  def clear; end

  # Public: Allows to use a simple memoization pattern that also works for
  # falsey values.
  #
  # source://oj_serializers//lib/oj_serializers/memo.rb#17
  def fetch(key); end
end

# Public: Implementation of an "ActiveModelSerializer"-like DSL, but with a
# design that allows replacing the internal object, which greatly reduces object
# allocation.
#
# Unlike ActiveModelSerializer, which builds a Hash which then gets encoded to
# JSON, this implementation allows to use Oj::StringWriter to write directly to
# JSON, greatly reducing the overhead of allocating and garbage collecting the
# hashes.
#
# source://oj_serializers//lib/oj_serializers/serializer.rb#19
class OjSerializers::Serializer
  # source://oj_serializers//lib/oj_serializers/serializer.rb#58
  def _check_instance_variables; end

  # Backwards Compatibility: Allows to access options passed through `render json`,
  # in the same way than ActiveModel::Serializers.
  #
  # source://oj_serializers//lib/oj_serializers/serializer.rb#52
  def options; end

  # Internal: Used internally to write an array of objects to JSON.
  #
  # writer - writer used to serialize results
  # items - items to serialize results for
  # options - list of external options to pass to the serializer (available as `options`)
  #
  # source://oj_serializers//lib/oj_serializers/serializer.rb#85
  def write_many(writer, items, options = T.unsafe(nil)); end

  # Internal: Used internally to write a single object to JSON.
  #
  # writer - writer used to serialize results
  # item - item to serialize results for
  # options - list of external options to pass to the serializer (available as `options`)
  #
  # NOTE: Binds this instance to the specified object and options and writes
  # to json using the provided writer.
  #
  # source://oj_serializers//lib/oj_serializers/serializer.rb#74
  def write_one(writer, item, options = T.unsafe(nil)); end

  protected

  # Internal: An internal cache that can be used for temporary memoization.
  #
  # source://oj_serializers//lib/oj_serializers/serializer.rb#96
  def memo; end

  class << self
    # Internal: List of attributes to be serialized.
    #
    # Any attributes defined in parent classes are inherited.
    #
    # source://oj_serializers//lib/oj_serializers/serializer.rb#234
    def _attributes; end

    # source://oj_serializers//lib/oj_serializers/serializer.rb#106
    def _default_format; end

    # Public: Allows the user to specify `default_format :json`, as a simple
    # way to ensure that `.one` and `.many` work as in Version 1.
    #
    # This setting is inherited from parent classes.
    #
    # source://oj_serializers//lib/oj_serializers/serializer.rb#105
    def default_format(format); end

    # Internal: Will alias the object according to the name of the wrapper class.
    #
    # source://oj_serializers//lib/oj_serializers/serializer.rb#225
    def inherited(subclass); end

    # source://oj_serializers//lib/oj_serializers/serializer.rb#219
    def many(items, options = T.unsafe(nil)); end

    # Public: Renders an array of items using this serializer, without
    # serializing to JSON.
    #
    # items - Must respond to `each`.
    # options - list of external options to pass to the sub class (available in `item.options`)
    #
    # Returns an Array of Hash, each with the attributes specified in the serializer.
    #
    # source://oj_serializers//lib/oj_serializers/serializer.rb#219
    def many_as_hash(items, options = T.unsafe(nil)); end

    # Public: Serializes an array of items using this serializer.
    #
    # items - Must respond to `each`.
    # options - list of external options to pass to the sub class (available in `item.options`)
    #
    # Returns an Oj::StringWriter instance, which is encoded as raw json.
    #
    # source://oj_serializers//lib/oj_serializers/serializer.rb#195
    def many_as_json(items, options = T.unsafe(nil)); end

    # Internal: Keep a reference to the default `write_many` method so that we
    # can use it inside cached overrides and benchmark tests.
    #
    # source://oj_serializers//lib/oj_serializers/serializer.rb#152
    def non_cached_write_many(*_arg0, **_arg1, &_arg2); end

    # Internal: Keep a reference to the default `write_one` method so that we
    # can use it inside cached overrides and benchmark tests.
    #
    # source://oj_serializers//lib/oj_serializers/serializer.rb#152
    def non_cached_write_one(*_arg0, **_arg1, &_arg2); end

    # Public: Creates an alias for the internal object.
    sig { params(name: T.any(::String, ::Symbol), model: T.nilable(::String), types_from: T.nilable(::String)).void }
    def object_as(name, model: T.unsafe(nil), types_from: T.unsafe(nil)); end

    # source://oj_serializers//lib/oj_serializers/serializer.rb#208
    def one(item, options = T.unsafe(nil)); end

    # Public: Renders the configured attributes for the specified object,
    # without serializing to JSON.
    #
    # item - the item to serialize
    # options - list of external options to pass to the sub class (available in `item.options`)
    #
    # Returns a Hash, with the attributes specified in the serializer.
    #
    # source://oj_serializers//lib/oj_serializers/serializer.rb#208
    def one_as_hash(item, options = T.unsafe(nil)); end

    # Public: Serializes the configured attributes for the specified object.
    #
    # item - the item to serialize
    # options - list of external options to pass to the sub class (available in `item.options`)
    #
    # Returns an Oj::StringWriter instance, which is encoded as raw json.
    #
    # source://oj_serializers//lib/oj_serializers/serializer.rb#183
    def one_as_json(item, options = T.unsafe(nil)); end

    # Helper: Serializes the item unless it's nil.
    #
    # source://oj_serializers//lib/oj_serializers/serializer.rb#173
    def one_if(item, options = T.unsafe(nil)); end

    # Helper: Serializes one or more items.
    #
    # source://oj_serializers//lib/oj_serializers/serializer.rb#163
    def render(item, options = T.unsafe(nil)); end

    # Helper: Serializes one or more items.
    #
    # source://oj_serializers//lib/oj_serializers/serializer.rb#168
    def render_as_hash(item, options = T.unsafe(nil)); end

    # Public: Allows to sort fields by name instead of by definition order, or
    # pass a Proc to apply a custom order.
    #
    # This setting is inherited from parent classes.
    #
    # source://oj_serializers//lib/oj_serializers/serializer.rb#114
    def sort_attributes_by(strategy); end

    # Public: Allows to transform the JSON keys to camelCase, or pass a Proc
    # to apply a custom transformation.
    #
    # This setting is inherited from parent classes.
    #
    # source://oj_serializers//lib/oj_serializers/serializer.rb#127
    def transform_keys(strategy = T.unsafe(nil), &block); end

    # source://oj_serializers//lib/oj_serializers/serializer.rb#152
    def write_many(*_arg0, **_arg1, &_arg2); end

    # source://oj_serializers//lib/oj_serializers/serializer.rb#152
    def write_one(*_arg0, **_arg1, &_arg2); end

    # source://oj_serializers//lib/oj_serializers/serializer.rb#152
    def write_to_json(*_arg0, **_arg1, &_arg2); end

    protected

    # Backwards Compatibility: Meant only to replace Active Model Serializers,
    # calling a method in the serializer, or using `read_attribute_for_serialization`.
    #
    # NOTE: Prefer to use `attributes` or `serializer_attributes` explicitly.
    #
    # source://oj_serializers//lib/oj_serializers/serializer.rb#438
    def ams_attributes(*attr_names, **options); end

    # Syntax Sugar: Allows to use it before a method name.
    #
    # Example:
    #   attribute
    #   def full_name
    #     "#{ first_name } #{ last_name }"
    #   end
    #
    # source://oj_serializers//lib/oj_serializers/serializer.rb#413
    def attr(name = T.unsafe(nil), **options, &block); end

    # Syntax Sugar: Allows to use it before a method name.
    #
    # Example:
    #   attribute
    #   def full_name
    #     "#{ first_name } #{ last_name }"
    #   end
    #
    # source://oj_serializers//lib/oj_serializers/serializer.rb#413
    def attribute(name = T.unsafe(nil), **options, &block); end

    # Public: Specify which attributes are going to be obtained by calling a
    # method in the object.
    #
    # source://oj_serializers//lib/oj_serializers/serializer.rb#385
    def attributes(*attr_names, **methods_with_options); end

    # Public: Specify an object that should be serialized using the serializer.
    # Alias: From a serializer perspective, the association type does not matter.
    #
    # source://oj_serializers//lib/oj_serializers/serializer.rb#352
    def belongs_to(name, serializer:, **options, &block); end

    # Public: Allows to define a cache key strategy for the serializer.
    # Defaults to calling cache_key in the object if no key is provided.
    #
    # NOTE: Benchmark it, sometimes caching is actually SLOWER.
    #
    # source://oj_serializers//lib/oj_serializers/serializer.rb#249
    def cached(cache_key_proc = T.unsafe(nil)); end

    # Public: Allows to define a cache key strategy for the serializer.
    # Defaults to calling cache_key in the object if no key is provided.
    #
    # NOTE: Benchmark it, sometimes caching is actually SLOWER.
    #
    # source://oj_serializers//lib/oj_serializers/serializer.rb#249
    def cached_with_key(cache_key_proc = T.unsafe(nil)); end

    # source://oj_serializers//lib/oj_serializers/serializer.rb#321
    def define_serialization_shortcuts(format = T.unsafe(nil)); end

    # Public: Specify an object that should be serialized using the serializer,
    # but unlike `has_one`, this one will write the attributes directly without
    # wrapping it in an object.
    #
    # source://oj_serializers//lib/oj_serializers/serializer.rb#362
    def flat_one(name, serializer:, **options); end

    # Public: Specify a collection of objects that should be serialized using
    # the specified serializer.
    #
    # source://oj_serializers//lib/oj_serializers/serializer.rb#346
    def has_many(name, serializer:, **options, &block); end

    # Public: Specify an object that should be serialized using the serializer.
    #
    # source://oj_serializers//lib/oj_serializers/serializer.rb#352
    def has_one(name, serializer:, **options, &block); end

    # Public: Specify which attributes are going to be obtained from indexing
    # the object.
    #
    # source://oj_serializers//lib/oj_serializers/serializer.rb#368
    def hash_attributes(*attr_names, **options); end

    # Public: Identifiers are always serialized first.
    #
    # NOTE: We skip the id for non-persisted documents, since it doesn't
    # actually identify the document (it will change once it's persisted).
    #
    # source://oj_serializers//lib/oj_serializers/serializer.rb#340
    def identifier(name = T.unsafe(nil), **options); end

    # Internal: Calculates the cache_key used to cache one serialized item.
    #
    # source://oj_serializers//lib/oj_serializers/serializer.rb#241
    def item_cache_key(item, cache_key_proc); end

    # Internal: Intercept a method definition, tying a type that was
    # previously specified to the name of the attribute.
    #
    # source://oj_serializers//lib/oj_serializers/serializer.rb#426
    def method_added(name); end

    # Public: Specify which attributes are going to be obtained from indexing
    # a Mongoid model's `attributes` hash directly, for performance.
    #
    # Automatically renames `_id` to `id` for Mongoid models.
    #
    # See ./benchmarks/document_benchmark.rb
    #
    # source://oj_serializers//lib/oj_serializers/serializer.rb#378
    def mongo_attributes(*attr_names, **options); end

    # Internal: The writer to use to write to json
    #
    # source://oj_serializers//lib/oj_serializers/serializer.rb#332
    def new_json_writer; end

    # Public: Specify which attributes are going to be obtained by calling a
    # method in the serializer.
    #
    # source://oj_serializers//lib/oj_serializers/serializer.rb#402
    def serializer_attributes(*attr_names, **options); end

    private

    # source://oj_serializers//lib/oj_serializers/serializer.rb#447
    def add_attribute(value_from, root: T.unsafe(nil), as: T.unsafe(nil), **options); end

    # Internal: Detects any include methods defined in the serializer, or defines
    # one by using the lambda passed in the `if` option, if any.
    #
    # source://oj_serializers//lib/oj_serializers/serializer.rb#548
    def check_conditional_method(options); end

    # Internal: We generate code for the serializer to avoid the overhead of
    # using variables for method names, having to iterate the list of attributes
    # and associations, and the overhead of using `send` with dynamic methods.
    #
    # As a result, the performance is the same as writing the most efficient
    # code by hand.
    #
    # source://oj_serializers//lib/oj_serializers/serializer.rb#507
    def code_to_render_as_hash(attributes); end

    # Internal: Returns the code for the association method.
    #
    # source://oj_serializers//lib/oj_serializers/serializer.rb#661
    def code_to_render_association(key, options); end

    # Internal: Returns the code for the attribute method.
    #
    # source://oj_serializers//lib/oj_serializers/serializer.rb#641
    def code_to_render_attribute(key, options); end

    # Internal: Returns the code to render an attribute or association
    # conditionally.
    #
    # NOTE: Detects any include methods defined in the serializer, or defines
    # one by using the lambda passed in the `if` option, if any.
    #
    # source://oj_serializers//lib/oj_serializers/serializer.rb#632
    def code_to_render_conditionally(options); end

    # source://oj_serializers//lib/oj_serializers/serializer.rb#529
    def code_to_rescue_no_method; end

    # Internal: Returns the code for the association method.
    #
    # source://oj_serializers//lib/oj_serializers/serializer.rb#599
    def code_to_write_association(key, options); end

    # Internal: Returns the code for the association method.
    #
    # source://oj_serializers//lib/oj_serializers/serializer.rb#575
    def code_to_write_attribute(key, options); end

    # Internal: Returns the code to render an attribute or association
    # conditionally.
    #
    # NOTE: Detects any include methods defined in the serializer, or defines
    # one by using the lambda passed in the `if` option, if any.
    #
    # source://oj_serializers//lib/oj_serializers/serializer.rb#566
    def code_to_write_conditionally(options); end

    # Internal: We generate code for the serializer to avoid the overhead of
    # using variables for method names, having to iterate the list of attributes
    # and associations, and the overhead of using `send` with dynamic methods.
    #
    # As a result, the performance is the same as writing the most efficient
    # code by hand.
    #
    # source://oj_serializers//lib/oj_serializers/serializer.rb#481
    def code_to_write_to_json(attributes); end

    # Internal: Allows to obtain a pre-existing instance and binds it to the
    # specified object.
    #
    # NOTE: Each class is only instantiated once to reduce object allocation.
    # For that reason, serializers must be completely stateless (or use global
    # state).
    #
    # source://oj_serializers//lib/oj_serializers/serializer.rb#685
    def instance; end

    # Internal: Cache key to set a thread-local instance.
    #
    # source://oj_serializers//lib/oj_serializers/serializer.rb#690
    def instance_key; end

    # Internal: Whether the object should be serialized as a collection.
    #
    # @return [Boolean]
    #
    # source://oj_serializers//lib/oj_serializers/serializer.rb#469
    def many?(item); end

    def new(*_arg0); end

    # Internal: Returns attributes sorted and with keys transformed using
    # the specified strategies.
    #
    # source://oj_serializers//lib/oj_serializers/serializer.rb#709
    def prepare_attributes(transform_keys: T.unsafe(nil), sort_by: T.unsafe(nil)); end

    # Internal: Generates write_to_json and render_as_hash methods optimized for
    # the specified configuration.
    #
    # source://oj_serializers//lib/oj_serializers/serializer.rb#701
    def prepare_serializer; end
  end
end

# Public: Used to validate incorrect memoization during development. Users of
# this library might add additional options as needed.
#
# source://oj_serializers//lib/oj_serializers/serializer.rb#22
OjSerializers::Serializer::ALLOWED_INSTANCE_VARIABLES = T.let(T.unsafe(nil), Array)

# source://oj_serializers//lib/oj_serializers/serializer.rb#39
OjSerializers::Serializer::CACHE = T.let(T.unsafe(nil), ActiveSupport::Cache::MemoryStore)

# source://oj_serializers//lib/oj_serializers/serializer.rb#48
OjSerializers::Serializer::DEFAULT_OPTIONS = T.let(T.unsafe(nil), Hash)

# Internal: Used to display warnings or detect misusage during development.
#
# source://oj_serializers//lib/oj_serializers/serializer.rb#46
OjSerializers::Serializer::DEV_MODE = T.let(T.unsafe(nil), TrueClass)

# source://oj_serializers//lib/oj_serializers/serializer.rb#29
OjSerializers::Serializer::KNOWN_ATTRIBUTE_OPTIONS = T.let(T.unsafe(nil), Set)

# source://oj_serializers//lib/oj_serializers/version.rb#4
OjSerializers::VERSION = T.let(T.unsafe(nil), String)
