# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `rspotify` gem.
# Please instead update this file by running `bin/tapioca gem rspotify`.

# source://rspotify//lib/rspotify/connection.rb#6
module RSpotify
  class << self
    # Authenticates access to restricted data. Requires {https://developer.spotify.com/my-applications user credentials}
    #
    # @example
    #   RSpotify.authenticate("<your_client_id>", "<your_client_secret>")
    #
    #   playlist = RSpotify::Playlist.find('wizzler', '00wHcTN0zQiun4xri9pmvX')
    #   playlist.name #=> "Movie Soundtrack Masterpieces"
    # @param client_id [String]
    # @param client_secret [String]
    #
    # source://rspotify//lib/rspotify/connection.rb#28
    def authenticate(client_id, client_secret); end

    # Returns the value of attribute client_token.
    #
    # source://rspotify//lib/rspotify/connection.rb#16
    def client_token; end

    # source://rspotify//lib/rspotify/connection.rb#37
    def delete(path, *params); end

    # source://rspotify//lib/rspotify/connection.rb#37
    def get(path, *params); end

    # source://rspotify//lib/rspotify/connection.rb#37
    def post(path, *params); end

    # source://rspotify//lib/rspotify/connection.rb#37
    def put(path, *params); end

    # Returns the value of attribute raw_response.
    #
    # source://rspotify//lib/rspotify/connection.rb#15
    def raw_response; end

    # Sets the attribute raw_response
    #
    # @param value the value to set the attribute raw_response to.
    #
    # source://rspotify//lib/rspotify/connection.rb#15
    def raw_response=(_arg0); end

    # source://rspotify//lib/rspotify/connection.rb#43
    def resolve_auth_request(user_id, url); end

    private

    # source://rspotify//lib/rspotify/connection.rb#106
    def auth_header; end

    # source://rspotify//lib/rspotify/connection.rb#111
    def get_headers(params); end

    # @return [Boolean]
    #
    # source://rspotify//lib/rspotify/connection.rb#89
    def request_was_user_authenticated?(*params); end

    # Added this method for testing
    #
    # source://rspotify//lib/rspotify/connection.rb#85
    def retry_connection(verb, url, params); end

    # source://rspotify//lib/rspotify/connection.rb#57
    def send_request(verb, path, *params); end
  end
end

# source://rspotify//lib/rspotify/connection.rb#9
RSpotify::API_URI = T.let(T.unsafe(nil), String)

# source://rspotify//lib/rspotify/connection.rb#10
RSpotify::AUTHORIZE_URI = T.let(T.unsafe(nil), String)

# @attr total_tracks [Integer] The total number of tracks in the album
# @attr artists [Array<Artist>] The artists of the album
# @attr available_markets [Array<String>] The markets in which the album is available. See {http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2 ISO 3166-1 alpha-2 country codes}
# @attr copyrights [Array<Hash>] The copyright statements of the album
# @attr external_ids [Hash] Known external IDs for the album
# @attr genres [Array<String>] A list of the genres used to classify the album. If not yet classified, the array is empty
# @attr images [Array<Hash>] The cover art for the album in various sizes, widest first
# @attr label [String] The label for the album
# @attr name [String] The name of the album
# @attr popularity [Integer] The popularity of the album. The value will be between 0 and 100, with 100 being the most popular
# @attr release_date [String] The date the album was first released, for example "1981-12-15". Depending on the precision, it might be shown as "1981" or "1981-12"
# @attr release_date_precision [String] The precision with which release_date value is known: "year", "month", or "day"
# @attr album_type [String] The type of the album (album, single, compilation)
#
# source://rspotify//lib/rspotify/album.rb#16
class RSpotify::Album < ::RSpotify::Base
  # @return [Album] a new instance of Album
  #
  # source://rspotify//lib/rspotify/album.rb#74
  def initialize(options = T.unsafe(nil)); end

  # Returns array of tracks from the album
  #
  # @example
  #   album = RSpotify::Album.find('41vPD50kQ7JeamkxQW7Vuy')
  #   album.tracks.first.name #=> "Do I Wanna Know?"
  # @param limit [Integer] Maximum number of tracks to return. Maximum: 50. Default: 50.
  # @param offset [Integer] The index of the first track to return. Use with limit to get the next set of objects. Default: 0.
  # @param market [String] Optional. An {http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2 ISO 3166-1 alpha-2 country code}. Default: nil.
  # @return [Array<Track>]
  #
  # source://rspotify//lib/rspotify/album.rb#111
  def tracks(limit: T.unsafe(nil), offset: T.unsafe(nil), market: T.unsafe(nil)); end

  class << self
    # Returns Album object(s) with id(s) provided
    #
    # @example
    #   album = RSpotify::Album.find('41vPD50kQ7JeamkxQW7Vuy')
    #   album.class #=> RSpotify::Album
    #   album.name  #=> "AM"
    #
    #   ids = %w(41vPD50kQ7JeamkxQW7Vuy 4jKGRliQXa5VwxKOsiCbfL)
    #   albums = RSpotify::Album.find(ids)
    #   albums.class       #=> Array
    #   albums.first.class #=> RSpotify::Album
    # @param ids [String, Array] Maximum: 20 IDs
    # @param market [String] Optional. An {http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2 ISO 3166-1 alpha-2 country code}.
    # @return [Album, Array<Album>]
    #
    # source://rspotify//lib/rspotify/album.rb#33
    def find(ids, market: T.unsafe(nil)); end

    # Get a list of new album releases featured in Spotify (shown, for example, on a Spotify player’s “Browse” tab).
    #
    # @example
    #   albums = RSpotify::Album.new_releases
    #   albums = RSpotify::Album.new_releases(country: 'US', limit: 10)
    # @param limit [Integer] Maximum number of albums to return. Maximum: 50. Default: 20.
    # @param offset [Integer] The index of the first album to return. Use with limit to get the next set of albums. Default: 0.
    # @param country [String] Optional. A country: an {http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2 ISO 3166-1 alpha-2 country code}. Provide this parameter if you want the list of returned albums to be relevant to a particular country. If omitted, the returned albums will be relevant to all countries.
    # @return [Array<Album>]
    #
    # source://rspotify//lib/rspotify/album.rb#47
    def new_releases(limit: T.unsafe(nil), offset: T.unsafe(nil), country: T.unsafe(nil)); end

    # Returns array of Album objects matching the query, ordered by popularity. It's also possible to find the total number of search results for the query
    #
    # @example
    #   albums = RSpotify::Album.search('AM')
    #   albums = RSpotify::Album.search('AM', limit: 10, market: 'US')
    #   albums = RSpotify::Album.search('AM', market: { from: user })
    #
    #   RSpotify::Album.search('AM').total #=> 9374
    # @param query [String] The search query's keywords. For details access {https://developer.spotify.com/web-api/search-item here} and look for the q parameter description.
    # @param limit [Integer] Maximum number of albums to return. Maximum: 50. Default: 20.
    # @param offset [Integer] The index of the first album to return. Use with limit to get the next set of albums. Default: 0.
    # @param market [String, Hash] Optional. An {http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2 ISO 3166-1 alpha-2 country code} or the hash { from: user }, where user is a RSpotify user authenticated using OAuth with scope *user-read-private*. This will take the user's country as the market value. For details access {https://developer.spotify.com/web-api/search-item here} and look for the market parameter description.
    # @return [Array<Album>]
    #
    # source://rspotify//lib/rspotify/album.rb#70
    def search(query, limit: T.unsafe(nil), offset: T.unsafe(nil), market: T.unsafe(nil)); end
  end
end

# @attr followers [Hash] Information about the followers of the artist
# @attr genres [Array<String>] A list of the genres the artist is associated with. If not yet classified, the array is empty
# @attr images [Array<Hash>] Images of the artist in various sizes, widest first
# @attr name [String] The name of the artist
# @attr popularity [Integer] The popularity of the artist. The value will be between 0 and 100, with 100 being the most popular
#
# source://rspotify//lib/rspotify/artist.rb#8
class RSpotify::Artist < ::RSpotify::Base
  # @return [Artist] a new instance of Artist
  #
  # source://rspotify//lib/rspotify/artist.rb#46
  def initialize(options = T.unsafe(nil)); end

  # Returns array of albums from artist
  #
  # @example
  #   artist.albums
  #   artist.albums(album_type: 'single,compilation')
  #   artist.albums(limit: 50, country: 'US')
  # @param limit [Integer] Maximum number of albums to return. Maximum: 50. Default: 20.
  # @param offset [Integer] The index of the first album to return. Use with limit to get the next set of albums. Default: 0.
  # @param album_type [String] Optional. A comma-separated list of keywords that will be used to filter the response. If not supplied, all album types will be returned. Valid values are: album; single; appears_on; compilation.
  # @param market [String] Optional. (synonym: country). An {http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2 ISO 3166-1 alpha-2 country code}. Supply this parameter to limit the response to one particular geographical market. If not supplied, results will be returned for all markets. Note if you do not provide this field, you are likely to get duplicate results per album, one for each market in which the album is available.
  # @return [Array<Album>]
  #
  # source://rspotify//lib/rspotify/artist.rb#69
  def albums(limit: T.unsafe(nil), offset: T.unsafe(nil), **filters); end

  # Returns array of similar artists. Similarity is based on analysis of the Spotify community’s {http://news.spotify.com/se/2010/02/03/related-artists listening history}.
  #
  # @example
  #   artist.name #=> "Arctic Monkeys"
  #   related_artists = artist.related_artists
  #
  #   related_artists.size       #=> 20
  #   related_artists.first.name #=> "Miles Kane"
  # @return [Array<Artist>]
  #
  # source://rspotify//lib/rspotify/artist.rb#90
  def related_artists; end

  # Returns artist's 10 top tracks by country.
  #
  # @example
  #   top_tracks = artist.top_tracks(:US)
  #   top_tracks.class       #=> Array
  #   top_tracks.size        #=> 10
  #   top_tracks.first.class #=> RSpotify::Track
  # @param country [Symbol] An {http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2 ISO 3166-1 alpha-2 country code}
  # @return [Array<Track>]
  #
  # source://rspotify//lib/rspotify/artist.rb#108
  def top_tracks(country); end

  class << self
    # Returns Artist object(s) with id(s) provided
    #
    # @example
    #   artist = RSpotify::Artist.find('7Ln80lUS6He07XvHI8qqHH')
    #   artist.class #=> RSpotify::Artist
    #   artist.name  #=> "Arctic Monkeys"
    #
    #   ids = %w(7Ln80lUS6He07XvHI8qqHH 3dRfiJ2650SZu6GbydcHNb)
    #   artists = RSpotify::Artist.find(ids)
    #   artists.class       #=> Array
    #   artists.first.class #=> RSpotify::Artist
    # @param ids [String, Array] Maximum: 50 IDs
    # @return [Artist, Array<Artist>]
    #
    # source://rspotify//lib/rspotify/artist.rb#24
    def find(ids); end

    # Returns array of Artist objects matching the query, ordered by popularity. It's also possible to find the total number of search results for the query
    #
    # @example
    #   artists = RSpotify::Artist.search('Arctic')
    #   artists = RSpotify::Artist.search('Arctic', limit: 10, market: 'US')
    #   artists = RSpotify::Artist.search('Arctic', market: { from: user })
    #
    #   RSpotify::Artist.search('Arctic').total #=> 86
    # @param query [String] The search query's keywords. For details access {https://developer.spotify.com/web-api/search-item here} and look for the q parameter description.
    # @param limit [Integer] Maximum number of artists to return. Maximum: 50. Default: 20.
    # @param offset [Integer] The index of the first artist to return. Use with limit to get the next set of artists. Default: 0.
    # @param market [String, Hash] Optional. An {http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2 ISO 3166-1 alpha-2 country code} or the hash { from: user }, where user is a RSpotify user authenticated using OAuth with scope *user-read-private*. This will take the user's country as the market value. For details access {https://developer.spotify.com/web-api/search-item here} and look for the market parameter description.
    # @return [Array<Artist>]
    #
    # source://rspotify//lib/rspotify/artist.rb#42
    def search(query, limit: T.unsafe(nil), offset: T.unsafe(nil), market: T.unsafe(nil)); end
  end
end

# @attr valence [Float] A measure from 0.0 to 1.0 describing the musical positiveness conveyed by a track. Tracks with high valence sound more positive (e.g. happy, cheerful, euphoric), while tracks with low valence sound more negative (e.g. sad, depressed, angry).
# @attr analysis_url [String] An HTTP URL to access the full audio analysis of this track. This URL is cryptographically signed and configured to expire after roughly 10 minutes. Do not store these URLs for later use.
# @attr danceability [Float] Danceability describes how suitable a track is for dancing based on a combination of musical elements including tempo, rhythm stability, beat strength, and overall regularity. A value of 0.0 is least danceable and 1.0 is most danceable.
# @attr duration_ms [Integer] The duration of the track in milliseconds.
# @attr energy [Float] Energy is a measure from 0.0 to 1.0 and represents a perceptual measure of intensity and activity. Typically, energetic tracks feel fast, loud, and noisy. For example, death metal has high energy, while a Bach prelude scores low on the scale. Perceptual features contributing to this attribute include dynamic range, perceived loudness, timbre, onset rate, and general entropy.
# @attr instrumentalness [Float] Predicts whether a track contains no vocals. "Ooh" and "aah" sounds are treated as instrumental in this context. Rap or spoken word tracks are clearly "vocal". The closer the instrumentalness value is to 1.0, the greater likelihood the track contains no vocal content. Values above 0.5 are intended to represent instrumental tracks, but confidence is higher as the value approaches 1.0.
# @attr key [Integer] The key the track is in. Integers map to pitches using standard {https://en.wikipedia.org/wiki/Pitch_class Pitch Class notation}. E.g. 0 = C, 1 = C♯/D♭, 2 = D, and so on.
# @attr liveness [Float] Detects the presence of an audience in the recording. Higher liveness values represent an increased probability that the track was performed live. A value above 0.8 provides strong likelihood that the track is live.
# @attr loudness [Float] The overall loudness of a track in decibels (dB). Loudness values are averaged across the entire track and are useful for comparing relative loudness of tracks. Loudness is the quality of a sound that is the primary psychological correlate of physical strength (amplitude). Values typical range between -60 and 0 db.
# @attr mode [Integer] Mode indicates the modality (major or minor) of a track, the type of scale from which its melodic content is derived. Major is represented by 1 and minor is 0.
# @attr speechiness [Float] Speechiness detects the presence of spoken words in a track. The more exclusively speech-like the recording (e.g. talk show, audio book, poetry), the closer to 1.0 the attribute value. Values above 0.66 describe tracks that are probably made entirely of spoken words. Values between 0.33 and 0.66 describe tracks that may contain both music and speech, either in sections or layered, including such cases as rap music. Values below 0.33 most likely represent music and other non-speech-like tracks.
# @attr tempo [Float] The overall estimated tempo of a track in beats per minute (BPM). In musical terminology, tempo is the speed or pace of a given piece and derives directly from the average beat duration.
# @attr time_signature [Integer] An estimated overall time signature of a track. The time signature (meter) is a notational convention to specify how many beats are in each bar (or measure).
# @attr track_href [String] A link to the Web API endpoint providing full details of the track.
# @attr acousticness [Float] A confidence measure from 0.0 to 1.0 of whether the track is acoustic. 1.0 represents high confidence the track is acoustic.
#
# source://rspotify//lib/rspotify/audio_features.rb#18
class RSpotify::AudioFeatures < ::RSpotify::Base
  # @return [AudioFeatures] a new instance of AudioFeatures
  #
  # source://rspotify//lib/rspotify/audio_features.rb#45
  def initialize(options = T.unsafe(nil)); end

  class << self
    # Retrieves AudioFeatures object(s) for the track id(s) provided
    #
    # @example
    #   audio_features = RSpotify::AudioFeatures.find('1zHlj4dQ8ZAtrayhuDDmkY')
    #   audio_features = RSpotify::AudioFeatures.find(['1zHlj4dQ8ZAtrayhuDDmkY', '7ouMYWpwJ422jRcDASZB7P', '4VqPOruhp5EdPBeR92t6lQ'])
    # @param ids [String, Array] Either a single track id or a list track ids. Maximum: 100 IDs.
    # @return [AudioFeatures, Array<AudioFeatures>]
    #
    # source://rspotify//lib/rspotify/audio_features.rb#28
    def find(ids); end

    # Spotify does not support search for audio features
    #
    # source://rspotify//lib/rspotify/audio_features.rb#66
    def search(*_arg0); end
  end
end

# @attr external_urls [Hash] Known external URLs for object
# @attr href [String] A link to the Web API endpoint
# @attr id [String] The {https://developer.spotify.com/web-api/user-guide/#spotify-uris-and-ids Spotify ID} for the object
# @attr type [String] The object type (artist, album, etc.)
# @attr uri [String] The {https://developer.spotify.com/web-api/user-guide/#spotify-uris-and-ids Spotify URI} for the object
#
# source://rspotify//lib/rspotify/base.rb#8
class RSpotify::Base
  # @return [Base] a new instance of Base
  #
  # source://rspotify//lib/rspotify/base.rb#118
  def initialize(options = T.unsafe(nil)); end

  # When an object is obtained undirectly, Spotify usually returns a simplified version of it.
  # This method updates it into a full object, with all attributes filled.
  #
  # @example
  #   track = artist.tracks.first
  #   track.instance_variable_get("@popularity") #=> nil
  #   track.complete!
  #   track.instance_variable_get("@popularity") #=> 62
  # @note It is seldom necessary to use this method explicitly, since RSpotify takes care of it automatically when needed (see {#method_missing})
  #
  # source://rspotify//lib/rspotify/base.rb#176
  def complete!; end

  # Generate an embed code for an album, artist or track.
  # For full documentation on widgets/embeds, check out the official documentation:
  #
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @param options [Hash]
  # @see https://developer.spotify.com/technologies/widgets/examples/
  #
  # source://rspotify//lib/rspotify/base.rb#138
  def embed(options = T.unsafe(nil)); end

  # Used internally to retrieve an object's instance variable. If instance
  # variable equals nil, calls {#complete!} on object and retrieve it again.
  #
  # @example
  #   user.id #=> "wizzler"
  #
  #   track = artist.tracks.first
  #   track.instance_variable_get("@popularity") #=> nil
  #   track.popularity #=> 62
  #   track.instance_variable_get("@popularity") #=> 62
  #
  # source://rspotify//lib/rspotify/base.rb#190
  def method_missing(method_name, *args); end

  # Overrides Object#respond_to? to also consider methods dynamically generated by {#method_missing}
  #
  # @return [Boolean]
  #
  # source://rspotify//lib/rspotify/base.rb#202
  def respond_to?(method_name, include_private_methods = T.unsafe(nil)); end

  protected

  # source://rspotify//lib/rspotify/base.rb#210
  def hash_for(tracks, field); end

  class << self
    # Returns RSpotify object(s) with id(s) and type provided
    #
    # @example
    #   user = RSpotify::Base.find('wizzler', 'user')
    #   user.class #=> RSpotify::User
    #   user.id    #=> "wizzler"
    #
    #   ids = %w(2UzMpPKPhbcC8RbsmuURAZ 7Jzsc04YpkRwB1zeyM39wE)
    #   tracks = RSpotify::Base.find(ids, 'track')
    #   tracks.class       #=> Array
    #   tracks.first.class #=> RSpotify::Track
    # @param ids [String, Array]
    # @param type [String]
    # @param market [String] Optional. An {http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2 ISO 3166-1 alpha-2 country code}.
    # @return [Album, Artist, Track, User, Array<Album>, Array<Artist>, Array<Track>]
    #
    # source://rspotify//lib/rspotify/base.rb#26
    def find(ids, type, market: T.unsafe(nil)); end

    # Returns array of RSpotify objects matching the query, ordered by popularity. It's also possible to find the total number of search results for the query
    #
    # @example
    #   artists = RSpotify::Base.search('Arctic', 'artist')
    #   albums  = RSpotify::Base.search('AM', 'album', limit: 10, market: 'US')
    #   mixed   = RSpotify::Base.search('Arctic', 'artist, album, track')
    #   albums  = RSpotify::Base.search('AM', 'album', market: { from: user })
    #
    #   RSpotify::Base.search('Arctic', 'album,artist,playlist').total #=> 2142
    # @param query [String] The search query's keywords. For details access {https://developer.spotify.com/web-api/search-item here} and look for the q parameter description.
    # @param types [String] Valid types are: album, artist, track and playlist. Separate multiple types with commas.
    # @param limit [Integer] Maximum number of objects to return. Maximum: 50. Default: 20.
    # @param offset [Integer] The index of the first object to return. Use with limit to get the next set of objects. Default: 0.
    # @param market [String, Hash] Optional. An {http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2 ISO 3166-1 alpha-2 country code} or the hash { from: user }, where user is a RSpotify user authenticated using OAuth with scope *user-read-private*. This will take the user's country as the market value. (Playlist results are not affected by the market parameter.) For details access {https://developer.spotify.com/web-api/search-item here} and look for the market parameter description.
    # @return [Array<Album>, Array<Artist>, Array<Track>, Array<Playlist>, Array<Base>]
    #
    # source://rspotify//lib/rspotify/base.rb#91
    def search(query, types, limit: T.unsafe(nil), offset: T.unsafe(nil), market: T.unsafe(nil)); end

    private

    # source://rspotify//lib/rspotify/base.rb#40
    def find_many(ids, type, market: T.unsafe(nil)); end

    # source://rspotify//lib/rspotify/base.rb#51
    def find_one(id, type, market: T.unsafe(nil)); end

    # source://rspotify//lib/rspotify/base.rb#62
    def insert_total(result, types, response); end
  end
end

# @attr external_urls [NilClass] Inexistent for Category.
# @attr href [String] A link to the Spotify Web API endpoint returning full details of the category.
# @attr icons [Array] An array of image objects. The category icons, in various sizes.
# @attr id [String] The {https://developer.spotify.com/web-api/user-guide/#spotify-uris-and-ids Spotify ID} of the category
# @attr name [String] The name of the category.
# @attr type [NilClass] Inexistent for Category.
# @attr uri [NilClass] Inexistent for Category.
#
# source://rspotify//lib/rspotify/category.rb#10
class RSpotify::Category < ::RSpotify::Base
  # @return [Category] a new instance of Category
  #
  # source://rspotify//lib/rspotify/category.rb#66
  def initialize(options = T.unsafe(nil)); end

  # See {Base#complete!}
  #
  # source://rspotify//lib/rspotify/category.rb#74
  def complete!; end

  # Get a list of Spotify playlists tagged with a particular category.
  #
  # @example
  #   playlists = category.playlists
  #   playlists = category.playlists(country: 'BR')
  #   playlists = category.playlists(limit: 10, offset: 20)
  # @param limit [Integer] Maximum number of playlists to return. Maximum: 50. Default: 20.
  # @param offset [Integer] The index of the first playlist to return. Use with limit to get the next set of playlists. Default: 0.
  # @param country [String] Optional. A country: an {http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2 ISO 3166-1 alpha-2 country code}. Provide this parameter if you want to narrow the list of returned playlists to those relevant to a particular country. If omitted, the returned playlists will be globally relevant.
  # @return [Array<Playlist>]
  #
  # source://rspotify//lib/rspotify/category.rb#89
  def playlists(limit: T.unsafe(nil), offset: T.unsafe(nil), **options); end

  class << self
    # Returns Category object with id provided
    #
    # @example
    #   category = RSpotify::Category.find('party')
    #   category = RSpotify::Category.find('party', country: 'US')
    #   category = RSpotify::Category.find('party', locale: 'es_MX')
    # @param id [String] The {https://developer.spotify.com/web-api/user-guide/#spotify-uris-and-ids Spotify ID} of the category
    # @param country [String] Optional. A country: an {http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2 ISO 3166-1 alpha-2 country code}. Provide this parameter to ensure that the category exists for a particular country.
    # @param locale [String] Optional. The desired language, consisting of a lowercase {http://en.wikipedia.org/wiki/ISO_639 ISO 639 language code} and an uppercase {http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2 ISO 3166-1 alpha-2 country code}, joined by an underscore. For details access {https://developer.spotify.com/web-api/get-category/ here} and look for the locale parameter description.
    # @return [Category]
    #
    # source://rspotify//lib/rspotify/category.rb#23
    def find(id, **options); end

    # Get a list of categories used to tag items in Spotify
    #
    # @example
    #   categories = RSpotify::Category.list
    #   categories = RSpotify::Category.list(country: 'US')
    #   categories = RSpotify::Category.list(locale: 'es_MX', limit: 10)
    # @param limit [Integer] Optional. Maximum number of categories to return. Maximum: 50. Default: 20.
    # @param offset [Integer] Optional. The index of the first category to return. Use with limit to get the next set of categories. Default: 0.
    # @param country [String] Optional. A country: an {http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2 ISO 3166-1 alpha-2 country code}. Provide this parameter if you want to narrow the list of returned categories to those relevant to a particular country. If omitted, the returned categories will be globally relevant.
    # @param locale [String] Optional. The desired language, consisting of a lowercase {http://en.wikipedia.org/wiki/ISO_639 ISO 639 language code} and an uppercase {http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2 ISO 3166-1 alpha-2 country code}, joined by an underscore. For details access {https://developer.spotify.com/web-api/get-category/ here} and look for the locale parameter description.
    # @return [Array<Category>]
    #
    # source://rspotify//lib/rspotify/category.rb#49
    def list(limit: T.unsafe(nil), offset: T.unsafe(nil), **options); end

    # Spotify does not support search for categories.
    #
    # source://rspotify//lib/rspotify/category.rb#61
    def search(*_arg0); end
  end
end

# @attr id [String] The device ID. This may be null
# @attr is_active [Boolean] If this device is the currently active device
# @attr is_restricted [Boolean] Whether controlling this device is restricted. At present if this is "true" then no Web API commands will be accepted by this device.
# @attr name [String] The name of the device
# @attr type [String] Device type, such as "Computer", "Smartphone" or "Speaker".
# @attr volume_percent [String] The current volume in percent. This may be null
#
# source://rspotify//lib/rspotify/device.rb#9
class RSpotify::Device < ::RSpotify::Base
  # @return [Device] a new instance of Device
  #
  # source://rspotify//lib/rspotify/device.rb#10
  def initialize(options = T.unsafe(nil)); end
end

# @attr resume_point [Hash] The user’s most recent position in the episode. Set if the supplied access token is a user token and has the scope ‘user-read-playback-position’.
# @attr description [String] A description of the episode. HTML tags are stripped away from this field, use html_description field in case HTML tags are needed.
# @attr duration_ms [Integer] The episode length in milliseconds.
# @attr explicit [Boolean] Whether or not the episode has explicit content (true = yes it does; false = no it does not OR unknown).
# @attr href [String] A link to the Web API endpoint providing full details of the episode.
# @attr html_description [String] A description of the episode. This field may contain HTML tags.
# @attr images [Array<Hash>] The cover art for the episode in various sizes, widest first.
# @attr is_externally_hosted [Boolean] True if the episode is hosted outside of Spotify’s CDN.
# @attr is_playable [Boolean] True if the episode is playable in the given market. Otherwise false.
# @attr language [String] The language used in the episode, identified by a ISO 639 code. This field is deprecated and might be removed in the future. Please use the languages field instead.
# @attr languages [Array<String>] A list of the languages used in the episode, identified by their ISO 639-1 code.
# @attr name [String] The name of the episode.
# @attr release_date [String] The date the episode was first released, for example "1981-12-15". Depending on the precision, it might be shown as "1981" or "1981-12".
# @attr release_date_precision [String] The precision with which release_date value is known.
# @attr restrictions [Hash] Included in the response when a content restriction is applied.
# @attr audio_preview_url [String] A URL to a 30 second preview (MP3 format) of the episode. null if not available.
#
# source://rspotify//lib/rspotify/episode.rb#19
class RSpotify::Episode < ::RSpotify::Base
  # @return [Episode] a new instance of Episode
  #
  # source://rspotify//lib/rspotify/episode.rb#58
  def initialize(options = T.unsafe(nil)); end

  class << self
    # Returns Episode object(s) with id(s) provided
    #
    # @example
    #   episode = RSpotify::Episode.find('512ojhOuo1ktJprKbVcKyQ')
    #   episode.class #=> RSpotify::Episode
    #   episode.name  #=> "Do I Wanna Know?"
    #
    #   ids = %w(512ojhOuo1ktJprKbVcKyQ 15tHEpY9pwbKC0QjpYCRB1)
    #   episodes = RSpotify::Base.find(ids, 'episode')
    #   episodes.class       #=> Array
    #   episodes.first.class #=> RSpotify::Episode
    # @param ids [String, Array] Maximum: 50 IDs
    # @param market [String] Optional. An {http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2 ISO 3166-1 alpha-2 country code}.
    # @return [Episode, Array<Episode>]
    #
    # source://rspotify//lib/rspotify/episode.rb#36
    def find(ids, market: T.unsafe(nil)); end

    # Returns array of Episode objects matching the query. It's also possible to find the total number of search results for the query
    #
    # @example
    #   episodes = RSpotify::Episode.search('Vetenskapsradion Historia')
    #   episodes = RSpotify::Episode.search('Vetenskapsradion Historia', limit: 10, market: 'US')
    #   episodes = RSpotify::Episode.search('Vetenskapsradion Historia', market: { from: user })
    #
    #   RSpotify::Episode.search('Vetenskapsradion Historia').total #=> 711
    # @param query [String] The search query's keywords. For details access {https://developer.spotify.com/web-api/search-item here} and look for the q parameter description.
    # @param limit [Integer] Maximum number of episodes to return. Maximum: 50. Default: 20.
    # @param offset [Integer] The index of the first episode to return. Use with limit to get the next set of episodes. Default: 0.
    # @param market [String, Hash] Optional. An {http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2 ISO 3166-1 alpha-2 country code} or the hash { from: user }, where user is a RSpotify user authenticated using OAuth with scope *user-read-private*. This will take the user's country as the market value. For details access {https://developer.spotify.com/web-api/search-item here} and look for the market parameter description.
    # @return [Array<Episode>]
    #
    # source://rspotify//lib/rspotify/episode.rb#54
    def search(query, limit: T.unsafe(nil), offset: T.unsafe(nil), market: T.unsafe(nil)); end
  end
end

# source://rspotify//lib/rspotify/connection.rb#7
class RSpotify::MissingAuthentication < ::StandardError; end

# source://rspotify//lib/rspotify/player.rb#2
class RSpotify::Player < ::RSpotify::Base
  # @return [Player] a new instance of Player
  #
  # source://rspotify//lib/rspotify/player.rb#4
  def initialize(user, options = T.unsafe(nil)); end

  # source://rspotify//lib/rspotify/player.rb#187
  def currently_playing; end

  # Skip User’s Playback To Next Track
  #
  # @example
  #   player = user.player
  #   player.next
  #
  # source://rspotify//lib/rspotify/player.rb#162
  def next; end

  # Get the user’s current playback queue
  #
  # @example
  #   player = user.player
  #   player.next_up
  #
  # source://rspotify//lib/rspotify/player.rb#81
  def next_up; end

  # Pause the user's currently active player
  #
  # @example
  #   player = user.player
  #   player.pause
  #
  # source://rspotify//lib/rspotify/player.rb#132
  def pause; end

  # Play the user's currently active player or specific device
  # If `device_id` is not passed, the currently active spotify app will be triggered
  #
  # @example
  #   player = user.player
  #   player.play
  #
  # source://rspotify//lib/rspotify/player.rb#69
  def play(device_id = T.unsafe(nil), params = T.unsafe(nil)); end

  # Allow user to play a specific context(albums, artists & playlists).
  # If `device_id` is not passed, the currently active spotify app will be triggered
  #
  # @example
  #   player = user.player
  #   player.play_context(nil,"spotify:album:1Je1IMUlBXcx1Fz0WE7oPT")
  #
  # source://rspotify//lib/rspotify/player.rb#34
  def play_context(device_id = T.unsafe(nil), uri); end

  # @example
  #   player = user.player
  #   player.play_track(nil, "spotify:track:4iV5W9uYEdYUVa79Axb7Rh")
  #   # User must be a premium subscriber for this feature to work.
  #
  # source://rspotify//lib/rspotify/player.rb#58
  def play_track(device_id = T.unsafe(nil), uri); end

  # Allow user to play a list of tracks.
  # If `device_id` is not passed, the currently active spotify app will be triggered
  #
  # @example
  #   player = user.player
  #   tracks_uris = ["spotify:track:4iV5W9uYEdYUVa79Axb7Rh", "spotify:track:1301WleyT98MSxVHPZCA6M"]
  #   player.play_tracks(nil, tracks_uris)
  #
  # source://rspotify//lib/rspotify/player.rb#46
  def play_tracks(device_id = T.unsafe(nil), uris); end

  # @return [Boolean]
  #
  # source://rspotify//lib/rspotify/player.rb#24
  def playing?; end

  # Skip User’s Playback To Previous Track
  #
  # @example
  #   player = user.player
  #   player.previous
  #
  # source://rspotify//lib/rspotify/player.rb#172
  def previous; end

  # Add an item to the end of the user’s current playback queue
  # If `device_id` is not passed, the currently active spotify app will be triggered
  #
  # @example
  #   player = user.player
  #   player.queue("spotify:track:4iV5W9uYEdYUVa79Axb7Rh")
  # @param device_id [String] the ID of the device to set the repeat state on.
  # @param uri [String] the spotify uri of the track to be queued
  #
  # source://rspotify//lib/rspotify/player.rb#101
  def queue(device_id = T.unsafe(nil), uri); end

  # Toggle the current user's player repeat status.
  # If `device_id` is not passed, the currently active spotify app will be triggered.
  # If `state` is not passed, the currently active context will be set to repeat.
  #
  # @example
  #   player = user.player
  #   player.repeat(state: 'track')
  # @param device_id [String] the ID of the device to set the repeat state on.
  # @param state [String] the repeat state. Defaults to the current play context.
  # @see https://developer.spotify.com/documentation/web-api/reference/player/set-repeat-mode-on-users-playback/
  #
  # source://rspotify//lib/rspotify/player.rb#119
  def repeat(device_id: T.unsafe(nil), state: T.unsafe(nil)); end

  # source://rspotify//lib/rspotify/player.rb#194
  def seek(position_ms); end

  # Toggle the current user's shuffle status.
  # If `device_id` is not passed, the currently active spotify app will be triggered.
  # If `state` is not passed, shuffle mode will be turned on.
  #
  # @example
  #   player = user.player
  #   player.shuffle(state: false)
  # @param device_id [String] the ID of the device to set the shuffle state on.
  # @param state [String] the shuffle state. Defaults to turning the shuffle behavior on.
  # @see https://developer.spotify.com/documentation/web-api/reference/player/toggle-shuffle-for-users-playback/
  #
  # source://rspotify//lib/rspotify/player.rb#149
  def shuffle(device_id: T.unsafe(nil), state: T.unsafe(nil)); end

  # Update the user's currently active player volume
  #
  # @example
  #   player = user.player
  #   player.volume(50)
  #
  # source://rspotify//lib/rspotify/player.rb#182
  def volume(percent); end
end

# @attr tracks_is_local [Hash] A hash showing whether each track is local or not. Note: the hash is updated only when {#tracks} is used.
# @attr description [String] The playlist description
# @attr followers [Hash] Information about the followers of the playlist
# @attr images [Array<Hash>] Images for the playlist. The array may be empty or contain up to three images. The images are returned by size in descending order. If returned, the source URL for the image is temporary and will expire in less than one day.
# @attr name [String] The name of the playlist
# @attr owner [User] The user who owns the playlist
# @attr public [Boolean] true if the playlist is not marked as secret
# @attr snapshot_id [String] The version identifier for the current playlist. This attribute gets updated every time the playlist changes and can be supplied in other requests to target a specific playlist version
# @attr total [Integer] The total number of tracks in the playlist
# @attr tracks_added_at [Hash] A hash containing the date and time each track was added to the playlist. Note: the hash is updated only when {#tracks} is used.
# @attr tracks_added_by [Hash] A hash containing the user that added each track to the playlist. Note: the hash is updated only when {#tracks} is used.
# @attr collaborative [Boolean] true if the owner allows other users to modify the playlist
#
# source://rspotify//lib/rspotify/playlist.rb#15
class RSpotify::Playlist < ::RSpotify::Base
  # @return [Playlist] a new instance of Playlist
  #
  # source://rspotify//lib/rspotify/playlist.rb#96
  def initialize(options = T.unsafe(nil)); end

  # Adds one or more tracks to a playlist in user's Spotify account. This method is only available when the
  # current user has granted access to the *playlist-modify-public* and *playlist-modify-private* scopes.
  #
  # @example
  #   tracks = RSpotify::Track.search('Know', 30)
  #   playlist = user.create_playlist!('my-awesome-playlist')
  #
  #   playlist.add_tracks!(tracks)
  #   playlist.tracks.size       #=> 30
  #   playlist.tracks.first.name #=> "Somebody That I Used To Know"
  #
  #   playlist.add_tracks!(tracks, position: 20)
  #   playlist.tracks[20].name #=> "Somebody That I Used To Know"
  # @param tracks [Array<Track>, Array<String>] Tracks to be added. Either array of Tracks or strings where each string is a valid spotify track uri. Maximum: 100 per request
  # @param position [Integer, NilClass] The position to insert the tracks, a zero-based index. Default: tracks are appended to the playlist
  # @return [Array<Track>] The tracks added
  #
  # source://rspotify//lib/rspotify/playlist.rb#152
  def add_tracks!(tracks, position: T.unsafe(nil)); end

  # Change name and public/private state of playlist in user's Spotify account. Changing a public playlist requires
  # the *playlist-modify-public* scope; changing a private playlist requires the *playlist-modify-private* scope.
  #
  # @example
  #   playlist.name   #=> "Movie Soundtrack Masterpieces"
  #   playlist.public #=> true
  #
  #   playlist.change_details!(name: 'Movie Tracks', public: false)
  #
  #   playlist.name   #=> "Movie Tracks"
  #   playlist.public #=> false
  # @param name [String] Optional. The new name for the playlist.
  # @param public [Boolean] Optional. If true the playlist will be public, if false it will be private.
  # @return [Playlist]
  #
  # source://rspotify//lib/rspotify/playlist.rb#190
  def change_details!(**data); end

  # When an object is obtained undirectly, Spotify usually returns a simplified version of it.
  # This method updates it into a full object, with all attributes filled.
  #
  # @example
  #   playlist = user.playlists.first
  #   playlist.instance_variable_get("@description") #=> nil
  #   playlist.complete!
  #   playlist.instance_variable_get("@description") #=> "Iconic soundtracks..."
  # @note It is seldom necessary to use this method explicitly, since RSpotify takes care of it automatically when needed (see {Base#method_missing})
  #
  # source://rspotify//lib/rspotify/playlist.rb#209
  def complete!; end

  # Check if one or more Spotify users are following a specified playlist. Checking if the user is privately
  # following a playlist is only possible if he/she has granted access to the *playlist-read-private* scope.
  #
  # @example
  #   user1 = RSpotify::User.find('<some-id>')
  #   user2 = RSpotify::User.find('<some-other-id>')
  #   playlist.is_followed_by?([user1, user2]) #=> [true, true] (Users publicly following playlist)
  #
  #   oauth-user = RSpotify::User.new(request.env['omniauth.auth']) # (See OAuth section in readme)
  #   playlist.is_followed_by?([oauth-user]) #=> [true] (User publicly or privately following playlist)
  # @param users [Array<User>] The users to check. Maximum: 5.
  # @return [Array<Boolean>]
  #
  # source://rspotify//lib/rspotify/playlist.rb#226
  def is_followed_by?(users); end

  # Remove one or more tracks from a user’s playlist. Removing from a public playlist requires the
  # *playlist-modify-public* scope; removing from a private playlist requires the *playlist-modify-private* scope.
  #
  # @example
  #   # Remove all occurrences of one or more tracks
  #   love_tracks = RSpotify::Track.search('Love')
  #   playlist.remove_tracks!(love_tracks)
  #
  #   # Remove specific occurrences of one or more tracks
  #   track = RSpotify::Track.find('tR3oH...')
  #   playlist.remove_tracks!([{track: track, positions: [0,3]}, other_track])
  #
  #   # Remove tracks based only on their positions (requires snapshot id)
  #   positions = [0,3,8]
  #   playlist.remove_tracks!(positions, snapshot_id: '0ZvtH...')
  # @param tracks [Array<Track,Hash>, Array<Integer>] Tracks to be removed. Maximum: 100 per request
  # @param snapshot_id [String] Optional. The playlist's snapshot ID against which you want to make the changes.
  # @return [Playlist]
  #
  # source://rspotify//lib/rspotify/playlist.rb#305
  def remove_tracks!(tracks, snapshot_id: T.unsafe(nil)); end

  # Reorder a track or a group of tracks in a playlist. Changing a public playlist requires the
  # *playlist-modify-public* scope; changing a private playlist requires the *playlist-modify-private* scope.
  #
  # @example
  #   range_start = 10
  #   insert_before = 0
  #   # Move the tracks at index 10-14 to the start of the playlist
  #   playlist.reorder_tracks!(range_start, insert_before, range_length: 5)
  # @param range_start [Integer] The position of the first track to be reordered.
  # @param insert_before [Integer] The position where the tracks should be inserted. To reorder the tracks to the end of the playlist, simply set insert_before to the position after the last track.
  # @param range_length [Integer] Optional. The amount of tracks to be reordered. Default: 1.
  # @param snapshot_id [String] Optional. The playlist's snapshot ID against which you want to make the changes.
  # @return [Playlist]
  #
  # source://rspotify//lib/rspotify/playlist.rb#346
  def reorder_tracks!(range_start, insert_before, **options); end

  # Replace the image used to represent a specific playlist. Requires ugc-image-upload scope. Changing a public playlist
  # requires the *playlist-modify-public* scope; changing a private playlist requires the *playlist-modify-private* scope.
  #
  # @example
  #   playlist.replace_image!('SkZJRgABA...', 'image/jpeg')
  # @param image [String] Base64 encoded JPEG image data, maximum payload size is 256 KB
  # @param content_type [String] The content type of the request body, e.g. "image/jpeg"
  # @return [NilClass] When the image has been provided, Spofity forwards it on to their transcoder service in order to generate the three sizes provided in the playlist’s images object. This operation takes some time, that's why nothing is returned for this method.
  #
  # source://rspotify//lib/rspotify/playlist.rb#370
  def replace_image!(image, content_type); end

  # Replace all the tracks in a playlist, overwriting its existing tracks. Changing a public playlist requires
  # the *playlist-modify-public* scope; changing a private playlist requires the *playlist-modify-private* scope.
  #
  # @example
  #   playlist.tracks.map(&:name) #=> ["All of Me", "Wasted Love", "Love Runs Out"]
  #   tracks = RSpotify::Track.search('Know', limit: 2)
  #   playlist.replace_tracks!(tracks)
  #   playlist.tracks.map(&:name) #=> ["Somebody That I Used To Know", "Do I Wanna Know?"]
  # @param tracks [Array<Track>] The tracks that will replace the existing ones. Maximum: 100 per request
  # @return [Array<Track>] The tracks that were added.
  #
  # source://rspotify//lib/rspotify/playlist.rb#390
  def replace_tracks!(tracks); end

  # Returns array of tracks from the playlist
  #
  # @example
  #   playlist = RSpotify::Playlist.find('wizzler', '00wHcTN0zQiun4xri9pmvX')
  #   playlist.tracks.first.name #=> "Main Theme from Star Wars - Instrumental"
  # @param limit [Integer] Maximum number of tracks to return. Maximum: 100. Default: 100.
  # @param offset [Integer] The index of the first track to return. Use with limit to get the next set of objects. Default: 0.
  # @param market [String] Optional. An {https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2 ISO 3166-1 alpha-2 country code}. Provide this parameter if you want to apply Track Relinking
  # @return [Array<Track>]
  #
  # source://rspotify//lib/rspotify/playlist.rb#255
  def tracks(limit: T.unsafe(nil), offset: T.unsafe(nil), market: T.unsafe(nil)); end

  class << self
    # Get a list of Spotify featured playlists (shown, for example, on a Spotify player’s “Browse” tab).
    #
    # @example
    #   playlists = RSpotify::Playlist.browse_featured
    #   playlists = RSpotify::Playlist.browse_featured(locale: 'es_MX', limit: 10)
    #   playlists = RSpotify::Playlist.browse_featured(country: 'US', timestamp: '2014-10-23T09:00:00')
    # @param limit [Integer] Maximum number of playlists to return. Maximum: 50. Default: 20.
    # @param offset [Integer] The index of the first playlist to return. Use with limit to get the next set of playlists. Default: 0.
    # @param country [String] Optional. A country: an {http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2 ISO 3166-1 alpha-2 country code}. Provide this parameter if you want the list of returned playlists to be relevant to a particular country. If omitted, the returned playlists will be relevant to all countries.
    # @param locale [String] Optional. The desired language, consisting of a lowercase {http://en.wikipedia.org/wiki/ISO_639 ISO 639 language code} and an uppercase {http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2 ISO 3166-1 alpha-2 country code}, joined by an underscore. For details access {https://developer.spotify.com/web-api/get-list-featured-playlists/ here} and look for the locale parameter description.
    # @param timestamp [String] Optional. A timestamp in {http://en.wikipedia.org/wiki/ISO_8601 ISO 8601} format: yyyy-MM-ddTHH:mm:ss. Use this parameter to specify the user's local time to get results tailored for that specific date and time in the day. If not provided, the response defaults to the current UTC time. Example: "2014-10-23T09:00:00" for a user whose local time is 9AM.
    # @return [Array<Playlist>]
    #
    # source://rspotify//lib/rspotify/playlist.rb#30
    def browse_featured(limit: T.unsafe(nil), offset: T.unsafe(nil), **options); end

    # Returns Playlist object with user_id and id provided. If id is "starred", returns starred playlist from user.
    #
    # @example
    #   playlist = RSpotify::Playlist.find('wizzler', '00wHcTN0zQiun4xri9pmvX')
    #   playlist.class #=> RSpotify::Playlist
    #   playlist.name  #=> "Movie Soundtrack Masterpieces"
    # @param user_id [String]
    # @param id [String]
    # @param market [String] Optional. An {https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2 ISO 3166-1 alpha-2 country code}. Provide this parameter if you want to apply Track Relinking
    # @return [Playlist]
    #
    # source://rspotify//lib/rspotify/playlist.rb#52
    def find(user_id, id, market: T.unsafe(nil)); end

    # Returns Playlist object with id provided.
    #
    # @example
    #   playlist = RSpotify::Playlist.find_by_id('00wHcTN0zQiun4xri9pmvX')
    #   playlist.class #=> RSpotify::Playlist
    #   playlist.name  #=> "Movie Soundtrack Masterpieces"
    # @param id [String]
    # @param market [String] Optional. An {https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2 ISO 3166-1 alpha-2 country code}. Provide this parameter if you want to apply Track Relinking
    # @return [Playlist]
    #
    # source://rspotify//lib/rspotify/playlist.rb#72
    def find_by_id(id, market: T.unsafe(nil)); end

    # Returns array of Playlist objects matching the query. It's also possible to find the total number of search results for the query
    #
    # @example
    #   playlists = RSpotify::Playlist.search('Indie')
    #   playlists = RSpotify::Playlist.search('Indie', limit: 10)
    #
    #   RSpotify::Playlist.search('Indie').total #=> 14653
    # @param query [String] The search query's keywords. See the q description in {https://developer.spotify.com/web-api/search-item here} for details.
    # @param limit [Integer] Maximum number of playlists to return. Maximum: 50. Default: 20.
    # @param offset [Integer] The index of the first playlist to return. Use with limit to get the next set of playlists. Default: 0.
    # @return [Array<Playlist>]
    #
    # source://rspotify//lib/rspotify/playlist.rb#92
    def search(query, limit: T.unsafe(nil), offset: T.unsafe(nil)); end
  end
end

# @attr after_filtering_size [Integer] The number of tracks available after min_* and max_* filters have been applied.
# @attr after_relinking_size [Integer] The number of tracks available after relinking for regional availability.
# @attr initial_pool_size [Integer] The number of recommended tracks available for this seed.
#
# source://rspotify//lib/rspotify/recommendation_seed.rb#6
class RSpotify::RecommendationSeed < ::RSpotify::Base
  # @return [RecommendationSeed] a new instance of RecommendationSeed
  #
  # source://rspotify//lib/rspotify/recommendation_seed.rb#8
  def initialize(options = T.unsafe(nil)); end
end

# @attr tracks [Array<Track>] An array of {https://developer.spotify.com/web-api/object-model/#track-object-simplified track object (simplified)} ordered according to the parameters supplied.
# @attr seeds [Array<RecommendationSeed>] An array of {https://developer.spotify.com/web-api/object-model/#recommendations-seed-object recommendation seed objects}.
#
# source://rspotify//lib/rspotify/recommendations.rb#5
class RSpotify::Recommendations < ::RSpotify::Base
  # @return [Recommendations] a new instance of Recommendations
  #
  # source://rspotify//lib/rspotify/recommendations.rb#100
  def initialize(options = T.unsafe(nil)); end

  class << self
    # Retrieve a list of available genres seed parameter values for recommendations.
    #
    # @example
    #   genres = RSpotify::Recommendations.available_genre_seeds
    # @return [Array<String>]
    #
    # source://rspotify//lib/rspotify/recommendations.rb#12
    def available_genre_seeds; end

    # Create a playlist-style listening experience based on seed artists, tracks and genres
    #
    # @example
    #   recommendations = RSpotify::Recommendations.generate(limit: 20, seed_tracks: ['0c6xIDDpzE81m2q797ordA'])
    #   recommendations = RSpotify::Recommendations.generate(seed_tracks: ['0c6xIDDpzE81m2q797ordA'], seed_artists: ['4NHQUGzhtTLFvgF5SZesLK'], market: 'ES')
    #   recommendations = RSpotify::Recommendations.generate(seed_tracks: ['0c6xIDDpzE81m2q797ordA'], seed_genres: ['alt_rock'], seed_artists: ['4NHQUGzhtTLFvgF5SZesLK'], target_energy: 1.0)
    # @note Up to 5 seed values may be provided in any combination of seed_artists, seed_tracks and seed_genres.
    # @option options
    # @option options
    # @option options
    # @option options
    # @option options
    # @option options
    # @option options
    # @option options
    # @option options
    # @option options
    # @option options
    # @option options
    # @option options
    # @option options
    # @option options
    # @option options
    # @option options
    # @option options
    # @option options
    # @option options
    # @option options
    # @option options
    # @option options
    # @option options
    # @option options
    # @option options
    # @option options
    # @option options
    # @option options
    # @option options
    # @option options
    # @option options
    # @option options
    # @option options
    # @option options
    # @option options
    # @option options
    # @option options
    # @option options
    # @option options
    # @option options
    # @option options
    # @param limit [Integer] The target size of the list of recommended tracks. For seeds with unusually small pools or when highly restrictive filtering is applied, it may be impossible to generate the requested number of recommended tracks. Debugging information for such cases is available in the response. Default: 20. Minimum: 1. Maximum: 100.
    # @param seed_artists [Array<String>] A list of Spotify IDs for seed artists.
    # @param seed_genres [Array<String>] A list of any genres in the set of {https://developer.spotify.com/web-api/get-recommendations/#available-genre-seeds available genre seeds}.
    # @param seed_tracks [Array<String>] A list of Spotify IDs for seed tracks.
    # @param market [String] Optional. An {https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2  ISO 3166-1 alpha-2 country code}. Provide this parameter if you want to apply Track Relinking. Because min_*, max_* and target_* are applied to pools before relinking, the generated results may not precisely match the filters applied. Original, non-relinked tracks are available via the linked_from attribute of the relinked track response.
    # @param options [Hash] a customizable set of options
    # @return [Array<Recommendations>]
    #
    # source://rspotify//lib/rspotify/recommendations.rb#76
    def generate(limit: T.unsafe(nil), seed_artists: T.unsafe(nil), seed_genres: T.unsafe(nil), seed_tracks: T.unsafe(nil), market: T.unsafe(nil), **options); end
  end
end

# @attr publisher [String] The publisher of the show.
# @attr copyrights [Array<Hash>] The copyright statements of the show.
# @attr description [String] A description of the show. HTML tags are stripped away from this field, use html_description field in case HTML tags are needed.
# @attr explicit [Boolean] Whether or not the show has explicit content (true = yes it does; false = no it does not OR unknown).
# @attr html_description [String] A description of the show. This field may contain HTML tags.
# @attr images [Array<Hash>] The cover art for the show in various sizes, widest first.
# @attr is_externally_hosted [Boolean] True if all of the show’s episodes are hosted outside of Spotify’s CDN. This field might be null in some cases.
# @attr languages [Array<String>] A list of the languages used in the show, identified by their ISO 639 code.
# @attr media_type [String] The media type of the show.
# @attr name [String] The name of the show.
# @attr available_markets [Array<String>] A list of the countries in which the show can be played, identified by their ISO 3166-1 alpha-2 code.
#
# source://rspotify//lib/rspotify/show.rb#14
class RSpotify::Show < ::RSpotify::Base
  # @return [Show] a new instance of Show
  #
  # source://rspotify//lib/rspotify/show.rb#47
  def initialize(options = T.unsafe(nil)); end

  # Returns array of episodes from the show
  #
  # @example
  #   show = RSpotify::Show.find('3Z6JdCS2d0eFEpXHKI6WqH')
  #   show.episodes.first.name #=> "Colin Powell's Complicated Legacy"
  # @param limit [Integer] Maximum number of episodes to return. Maximum: 50. Default: 20.
  # @param offset [Integer] The index of the first track to return. Use with limit to get the next set of objects. Default: 0.
  # @param market [String] An {https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2 ISO 3166-1 alpha-2 country code}.
  # @return [Array<Episode>]
  #
  # source://rspotify//lib/rspotify/show.rb#79
  def episodes(limit: T.unsafe(nil), offset: T.unsafe(nil), market: T.unsafe(nil)); end

  class << self
    # Returns Show object(s) with id(s) provided
    #
    # @example
    #   show = RSpotify::Show.find('3Z6JdCS2d0eFEpXHKI6WqH')
    #   show.class #=> RSpotify::Show
    #   show.name  #=> "Consider This from NPR"
    # @param id [String, Array] Maximum: 50 IDs
    # @param market [String] An {https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2 ISO 3166-1 alpha-2 country code}.
    # @return [Show, Array<Show>]
    #
    # source://rspotify//lib/rspotify/show.rb#26
    def find(ids, market: T.unsafe(nil)); end

    # Returns array of Show objects matching the query. It's also possible to find the total number of search results for the query
    #
    # @example
    #   shows = RSpotify::Show.search('NPR')
    #   shows = RSpotify::Show.search('NPR', market: 'US', limit: 10)
    #
    #   RSpotify::Show.search('NPR').total #=> 357
    # @param query [String] The search query's keywords. See the q description in {https://developer.spotify.com/web-api/search-item here} for details.
    # @param limit [Integer] Maximum number of shows to return. Maximum: 50. Default: 20.
    # @param offset [Integer] The index of the first show to return. Use with limit to get the next set of shows. Default: 0.
    # @param market [String] An {https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2 ISO 3166-1 alpha-2 country code}.
    # @return [Array<Show>]
    #
    # source://rspotify//lib/rspotify/show.rb#43
    def search(query, limit: T.unsafe(nil), offset: T.unsafe(nil), market: T.unsafe(nil)); end
  end
end

# source://rspotify//lib/rspotify/connection.rb#11
RSpotify::TOKEN_URI = T.let(T.unsafe(nil), String)

# @attr linked_from [TrackLink] Details of the requested track. Only present when track relinking is applied and the returned track is different to the one requested because the latter is not available in the given market
# @attr artists [Array<Artist>] The artists who performed the track
# @attr available_markets [Array<String>] The markets in which the track can be played. See {http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2 ISO 3166-1 alpha-2 country codes}
# @attr disc_number [Integer] The disc number. Usually 1 unless the album consists of more than one disc
# @attr duration_ms [Integer] The track length in milliseconds
# @attr explicit [Boolean] Whether or not the track has explicit lyrics. true = yes it does; false = no it does not OR unknown
# @attr external_ids [Hash] Known external IDs for the track
# @attr name [String] The name of the track
# @attr popularity [Integer] The popularity of the track. The value will be between 0 and 100, with 100 being the most popular
# @attr preview_url [String] A link to a 30 second preview (MP3 format) of the track
# @attr track_number [Integer] The number of the track. If an album has several discs, the track number is the number on the specified disc
# @attr played_at [String] The date and time the track was played. Only present when pulled from /recently-played
# @attr context_type [String] The context the track was played from. Only present when pulled from /recently-played
# @attr is_playable [Boolean] Whether or not the track is playable in the given market. Only present when track relinking is applied by specifying a market when looking up the track
# @attr album [Album] The album on which the track appears
#
# source://rspotify//lib/rspotify/track.rb#18
class RSpotify::Track < ::RSpotify::Base
  # @return [Track] a new instance of Track
  #
  # source://rspotify//lib/rspotify/track.rb#62
  def initialize(options = T.unsafe(nil)); end

  # Retrieves the audio features for the track
  #
  # source://rspotify//lib/rspotify/track.rb#58
  def audio_features; end

  class << self
    # Returns Track object(s) with id(s) provided
    #
    # @example
    #   track = RSpotify::Track.find('2UzMpPKPhbcC8RbsmuURAZ')
    #   track.class #=> RSpotify::Track
    #   track.name  #=> "Do I Wanna Know?"
    #
    #   ids = %w(2UzMpPKPhbcC8RbsmuURAZ 7Jzsc04YpkRwB1zeyM39wE)
    #   tracks = RSpotify::Base.find(ids, 'track')
    #   tracks.class       #=> Array
    #   tracks.first.class #=> RSpotify::Track
    # @param ids [String, Array] Maximum: 50 IDs
    # @param market [String] Optional. An {http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2 ISO 3166-1 alpha-2 country code}.
    # @return [Track, Array<Track>]
    #
    # source://rspotify//lib/rspotify/track.rb#35
    def find(ids, market: T.unsafe(nil)); end

    # Returns array of Track objects matching the query, ordered by popularity. It's also possible to find the total number of search results for the query
    #
    # @example
    #   tracks = RSpotify::Track.search('Wanna Know')
    #   tracks = RSpotify::Track.search('Wanna Know', limit: 10, market: 'US')
    #   tracks = RSpotify::Track.search('Wanna Know', market: { from: user })
    #
    #   RSpotify::Track.search('Wanna Know').total #=> 3686
    # @param query [String] The search query's keywords. For details access {https://developer.spotify.com/web-api/search-item here} and look for the q parameter description.
    # @param limit [Integer] Maximum number of tracks to return. Maximum: 50. Default: 20.
    # @param offset [Integer] The index of the first track to return. Use with limit to get the next set of tracks. Default: 0.
    # @param market [String, Hash] Optional. An {http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2 ISO 3166-1 alpha-2 country code} or the hash { from: user }, where user is a RSpotify user authenticated using OAuth with scope *user-read-private*. This will take the user's country as the market value. For details access {https://developer.spotify.com/web-api/search-item here} and look for the market parameter description.
    # @return [Array<Track>]
    #
    # source://rspotify//lib/rspotify/track.rb#53
    def search(query, limit: T.unsafe(nil), offset: T.unsafe(nil), market: T.unsafe(nil)); end
  end
end

# @attr external_urls [Hash] Known external URLs for this playlist
# @attr href [String] A link to the Web API endpoint
# @attr id [String] The {https://developer.spotify.com/web-api/user-guide/#spotify-uris-and-ids Spotify ID} for the track
# @attr type [String] The object type: "track"
# @attr uri [String] The {https://developer.spotify.com/web-api/user-guide/#spotify-uris-and-ids Spotify URI} for the object
#
# source://rspotify//lib/rspotify/track_link.rb#8
class RSpotify::TrackLink
  # @return [TrackLink] a new instance of TrackLink
  #
  # source://rspotify//lib/rspotify/track_link.rb#11
  def initialize(options = T.unsafe(nil)); end

  # Known external URLs for this playlist
  #
  # @return [Hash] the current value of external_urls
  #
  # source://rspotify//lib/rspotify/track_link.rb#9
  def external_urls; end

  # A link to the Web API endpoint
  #
  # @return [String] the current value of href
  #
  # source://rspotify//lib/rspotify/track_link.rb#9
  def href; end

  # The {https://developer.spotify.com/web-api/user-guide/#spotify-uris-and-ids Spotify ID} for the track
  #
  # @return [String] the current value of id
  #
  # source://rspotify//lib/rspotify/track_link.rb#9
  def id; end

  # The object type: "track"
  #
  # @return [String] the current value of type
  #
  # source://rspotify//lib/rspotify/track_link.rb#9
  def type; end

  # The {https://developer.spotify.com/web-api/user-guide/#spotify-uris-and-ids Spotify URI} for the object
  #
  # @return [String] the current value of uri
  #
  # source://rspotify//lib/rspotify/track_link.rb#9
  def uri; end
end

# @attr tracks_added_at [Hash] A hash containing the date and time each track was saved by the user. Note: the hash is filled and updated only when {#saved_tracks} is used.
# @attr country [String] The country of the user, as set in the user's account profile. An {http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2 ISO 3166-1 alpha-2 country code}. This field is only available when the current user has granted access to the *user-read-private* scope.
# @attr credentials [Hash] The credentials generated for the user with OAuth. Includes access token, token type, token expiration time and refresh token. This field is only available when the current user has granted access to any scope.
# @attr display_name [String] The name displayed on the user's profile. This field is only available when the current user has granted access to the *user-read-private* scope.
# @attr email [String] The user's email address. This field is only available when the current user has granted access to the *user-read-email* scope.
# @attr followers [Hash] Information about the followers of the user
# @attr images [Array] The user's profile image. This field is only available when the current user has granted access to the *user-read-private* scope.
# @attr product [String] The user's Spotify subscription level: "premium", "free", etc. This field is only available when the current user has granted access to the *user-read-private* scope.
# @attr birthdate [String] The user's date-of-birth. This field is only available when the current user has granted access to the *user-read-birthdate* scope.
#
# source://rspotify//lib/rspotify/user.rb#12
class RSpotify::User < ::RSpotify::Base
  # @return [User] a new instance of User
  #
  # source://rspotify//lib/rspotify/user.rb#91
  def initialize(options = T.unsafe(nil)); end

  # Creates a playlist in user's Spotify account. This method is only available when the current
  # user has granted access to the *playlist-modify-public* and *playlist-modify-private* scopes.
  #
  # @example
  #   user.create_playlist!('my-first-playlist')
  #   user.playlists.last.name   #=> "my-first-playlist"
  #   user.playlists.last.public #=> true
  #
  #   playlist = user.create_playlist!('my-second-playlist', public: false)
  #   playlist.name   #=> "my-second-playlist"
  #   playlist.public #=> false
  # @note To create a collaborative playlist the public option must be set to false.
  # @param name [String] The name for the new playlist
  # @param public [Boolean] Whether the playlist is public or private. Default: true
  # @return [Playlist]
  #
  # source://rspotify//lib/rspotify/user.rb#131
  def create_playlist!(name, description: T.unsafe(nil), public: T.unsafe(nil), collaborative: T.unsafe(nil)); end

  # Returns the user's available devices
  #
  # @example
  #   devices = user.devices
  #   devices.first.id #=> "5fbb3ba6aa454b5534c4ba43a8c7e8e45a63ad0e"
  # @return [Array<Device>]
  #
  # source://rspotify//lib/rspotify/user.rb#520
  def devices; end

  # Add the current user as a follower of one or more artists, other Spotify users or a playlist. Following artists or users require the *user-follow-modify*
  # scope. Following a playlist publicly requires the *playlist-modify-public* scope; following it privately requires the *playlist-modify-private* scope.
  #
  # @example
  #   artists = RSpotify::Artist.search('John')
  #   user.follow(artists)
  #
  #   playlist = RSpotify::Playlist.search('Movie').first
  #   user.follow(playlist, public: false)
  # @note Scopes you provide for playlists determine only whether the current user can themselves follow the playlist publicly or privately (i.e. show others what they are following), not whether the playlist itself is public or private.
  # @param followed [Artist, Array<Artist>, User, Array<User>, Playlist] The artists, users or playlist to follow
  # @param public [Boolean] If true the playlist will be included in user's public playlists, if false it will remain private.
  # @return [Artist, Array<Artist>, User, Array<User>, Playlist]
  #
  # source://rspotify//lib/rspotify/user.rb#200
  def follow(followed, public: T.unsafe(nil)); end

  # Get the current user’s followed artists or users. Requires the *user-follow-read* scope.
  #
  # @example
  #   followed_artists = user.following(type: 'artist')
  #   followed_artists.first.class #=> RSpotify::Artist
  #
  #   followed_artists = user.following(type: 'artist', limit: 50)
  # @note The current Spotify API implementation only supports getting followed *artists*
  # @param type [String] The ID type: currently only "artist" is supported
  # @param limit [Integer] Maximum number of items to return. Maximum: 50. Minimum: 1. Default: 20.
  # @param after [String] Optional. The last artist ID retrieved from the previous request.
  # @return [Array<Artist>]
  #
  # source://rspotify//lib/rspotify/user.rb#235
  def following(type: T.unsafe(nil), limit: T.unsafe(nil), after: T.unsafe(nil)); end

  # Check if the current user is following one or more artists or other Spotify users. This method
  # is only available when the current user has granted access to the *user-follow-read* scope.
  #
  # @example
  #   artists = RSpotify::Artist.search('John')
  #   user.follows?(artists) #=> [true, false, true...]
  # @param followed [Artist, Array<Artist>, User, Array<User>] The users or artists to check
  # @return [Array<Boolean>]
  #
  # source://rspotify//lib/rspotify/user.rb#254
  def follows?(followed); end

  # Get the current user’s player
  #
  # @example
  #   player = user.player
  #
  # source://rspotify//lib/rspotify/user.rb#148
  def player; end

  # Returns all playlists from user
  #
  # @example
  #   playlists = user.playlists
  #   playlists.class       #=> Array
  #   playlists.first.class #=> RSpotify::Playlist
  #   playlists.first.name  #=> "Movie Soundtrack Masterpieces"
  # @param limit [Integer] Maximum number of playlists to return. Maximum: 50. Minimum: 1. Default: 20.
  # @param offset [Integer] The index of the first playlist to return. Use with limit to get the next set of playlists. Default: 0.
  # @return [Array<Playlist>]
  #
  # source://rspotify//lib/rspotify/user.rb#278
  def playlists(limit: T.unsafe(nil), offset: T.unsafe(nil)); end

  # Get the current user’s recently played tracks. Requires the *user-read-recently-played* scope.
  #
  # @example
  #   recently_played = user.recently_played
  #   recently_played.size       #=> 20
  #   recently_played.first.name #=> "Ice to Never"
  #   user.recently_played(limit: 50)
  #   user.recently_played(after: '1572561234', before: '1572562369')
  # @param limit [Integer] Optional. The number of entities to return. Default: 20. Minimum: 1. Maximum: 50.
  # @param after [String] Optional. A Unix timestamp in milliseconds. Returns all items after (but not including) this cursor position. If after is specified, before must not be specified.
  # @param before [String] Optional. A Unix timestamp in milliseconds. Returns all items before (but not including) this cursor position. If before is specified, after must not be specified.
  # @return [Array<Track>]
  #
  # source://rspotify//lib/rspotify/user.rb#168
  def recently_played(limit: T.unsafe(nil), after: T.unsafe(nil), before: T.unsafe(nil)); end

  # Remove albums from the user’s “Your Music” library.
  #
  # @example
  #   albums = user.saved_albums
  #
  #   user.saved_albums.size #=> 20
  #   user.remove_albums!(albums)
  #   user.saved_albums.size #=> 0
  # @param albums [Array<Album>] The albums to remove. Maximum: 50.
  # @return [Array<Album>] The albums removed.
  #
  # source://rspotify//lib/rspotify/user.rb#373
  def remove_albums!(albums); end

  # Remove tracks from the user’s “Your Music” library.
  #
  # @example
  #   tracks = user.saved_tracks
  #
  #   user.saved_tracks.size #=> 20
  #   user.remove_tracks!(tracks)
  #   user.saved_tracks.size #=> 0
  # @param tracks [Array<Track>] The tracks to remove. Maximum: 50.
  # @return [Array<Track>] The tracks removed.
  #
  # source://rspotify//lib/rspotify/user.rb#296
  def remove_tracks!(tracks); end

  # Save albums to the user’s “Your Music” library.
  #
  # @example
  #   albums = RSpotify::Album.search('launeddas')
  #
  #   user.saved_albums.size #=> 0
  #   user.save_albums!(albums)
  #   user.saved_albums.size #=> 10
  # @param albums [Array<Album>] The albums to save. Maximum: 50.
  # @return [Array<Album>] The albums saved.
  #
  # source://rspotify//lib/rspotify/user.rb#391
  def save_albums!(albums); end

  # Save tracks to the user’s “Your Music” library.
  #
  # @example
  #   tracks = RSpotify::Track.search('Know')
  #
  #   user.saved_tracks.size #=> 0
  #   user.save_tracks!(tracks)
  #   user.saved_tracks.size #=> 20
  # @param tracks [Array<Track>] The tracks to save. Maximum: 100.
  # @return [Array<Track>] The tracks saved.
  #
  # source://rspotify//lib/rspotify/user.rb#314
  def save_tracks!(tracks); end

  # Returns the albums saved in the Spotify user’s “Your Music” library. ** Includes albums whose tracks you saved
  #
  # @example
  #   albums = user.saved_albums
  #   albums.size       #=> 20
  #   albums.first.name #=> "Launeddas"
  # @param limit [Integer] Maximum number of albums to return. Maximum: 50. Minimum: 1. Default: 20.
  # @param offset [Integer] The index of the first album to return. Use with limit to get the next set of albums. Default: 0.
  # @param market [String] Optional. An {http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2 ISO 3166-1 alpha-2 country code}.
  # @return [Array<Album>]
  #
  # source://rspotify//lib/rspotify/user.rb#410
  def saved_albums(limit: T.unsafe(nil), offset: T.unsafe(nil), market: T.unsafe(nil)); end

  # Check if albums are already saved in the Spotify user’s “Your Music” library. ** Only returns true if the album was saved via me/albums, not if you saved each track individually.
  #
  # @example
  #   albums = RSpotify::Album.search('launeddas')
  #   user.saved_albums?(albums) #=> [true, false, true...]
  # @param albums [Array<Album>] The albums to check. Maximum: 50.
  # @return [Array<Boolean>] Array of booleans, in the same order in which the albums were specified.
  #
  # source://rspotify//lib/rspotify/user.rb#430
  def saved_albums?(albums); end

  # Returns the tracks saved in the Spotify user’s “Your Music” library
  #
  # @example
  #   tracks = user.saved_tracks
  #   tracks.size       #=> 20
  #   tracks.first.name #=> "Do I Wanna Know?"
  # @param limit [Integer] Maximum number of tracks to return. Maximum: 50. Minimum: 1. Default: 20.
  # @param offset [Integer] The index of the first track to return. Use with limit to get the next set of tracks. Default: 0.
  # @param market [String] Optional. An {http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2 ISO 3166-1 alpha-2 country code}.
  # @return [Array<Track>]
  #
  # source://rspotify//lib/rspotify/user.rb#333
  def saved_tracks(limit: T.unsafe(nil), offset: T.unsafe(nil), market: T.unsafe(nil)); end

  # Check if tracks are already saved in the Spotify user’s “Your Music” library
  #
  # @example
  #   tracks = RSpotify::Track.search('Know')
  #   user.saved_tracks?(tracks) #=> [true, false, true...]
  # @param tracks [Array<Track>] The tracks to check. Maximum: 50.
  # @return [Array<Boolean>] Array of booleans, in the same order in which the tracks were specified.
  #
  # source://rspotify//lib/rspotify/user.rb#356
  def saved_tracks?(tracks); end

  # Returns a hash containing all user attributes
  #
  # source://rspotify//lib/rspotify/user.rb#437
  def to_hash; end

  # Get the current user’s top artists based on calculated affinity. Requires the *user-top-read* scope.
  #
  # @example
  #   top_artists = user.top_artists
  #   top_artists.size       #=> 20
  #   top_artists.first.name #=> "Nine Inch Nails"
  # @param limit [Integer] Optional. The number of entities to return. Default: 20. Minimum: 1. Maximum: 50.
  # @param offset [Integer] Optional. The index of the first entity to return. Default: 0 (i.e., the first track). Use with limit to get the next set of entities.
  # @param time_range [String] Optional. Over what time frame the affinities are computed. Valid values: long_term (calculated from several years of data and including all new data as it becomes available), medium_term (approximately last 6 months), short_term (approximately last 4 weeks). Default: medium_term.
  # @return [Array<Artist>]
  #
  # source://rspotify//lib/rspotify/user.rb#455
  def top_artists(limit: T.unsafe(nil), offset: T.unsafe(nil), time_range: T.unsafe(nil)); end

  # Get the current user’s top tracks based on calculated affinity. Requires the *user-top-read* scope.
  #
  # @example
  #   top_tracks = user.top_tracks
  #   top_tracks.size       #=> 20
  #   top_tracks.first.name #=> "Ice to Never"
  # @param limit [Integer] Optional. The number of entities to return. Default: 20. Minimum: 1. Maximum: 50.
  # @param offset [Integer] Optional. The index of the first entity to return. Default: 0 (i.e., the first track). Use with limit to get the next set of entities.
  # @param time_range [String] Optional. Over what time frame the affinities are computed. Valid values: long_term (calculated from several years of data and including all new data as it becomes available), medium_term (approximately last 6 months), short_term (approximately last 4 weeks). Default: medium_term.
  # @return [Array<Track>]
  #
  # source://rspotify//lib/rspotify/user.rb#473
  def top_tracks(limit: T.unsafe(nil), offset: T.unsafe(nil), time_range: T.unsafe(nil)); end

  # Remove the current user as a follower of one or more artists, other Spotify users or a playlist. Unfollowing artists or users require the *user-follow-modify* scope.
  # Unfollowing a publicly followed playlist requires the *playlist-modify-public* scope; unfollowing a privately followed playlist requires the *playlist-modify-private* scope.
  #
  # @example
  #   artists = RSpotify::Artist.search('John')
  #   user.unfollow(artists)
  #
  #   playlist = RSpotify::Playlist.search('Movie').first
  #   user.unfollow(playlist)
  # @note Note that the scopes you provide for playlists relate only to whether the current user is following the playlist publicly or privately (i.e. showing others what they are following), not whether the playlist itself is public or private.
  # @param unfollowed [Artist, Array<Artist>, User, Array<User>, Playlist] The artists, users or playlist to unfollow
  # @return [Artist, Array<Artist>, User, Array<User>, Playlist]
  #
  # source://rspotify//lib/rspotify/user.rb#494
  def unfollow(unfollowed); end

  class << self
    # Returns User object with id provided
    #
    # @example
    #   user = RSpotify::User.find('wizzler')
    #   user.class #=> RSpotify::User
    #   user.id    #=> "wizzler"
    # @param id [String]
    # @return [User]
    #
    # source://rspotify//lib/rspotify/user.rb#23
    def find(id); end

    # source://rspotify//lib/rspotify/user.rb#86
    def oauth_delete(user_id, path, *params); end

    # source://rspotify//lib/rspotify/user.rb#86
    def oauth_get(user_id, path, *params); end

    # source://rspotify//lib/rspotify/user.rb#86
    def oauth_post(user_id, path, *params); end

    # source://rspotify//lib/rspotify/user.rb#86
    def oauth_put(user_id, path, *params); end

    # Spotify does not support search for users.
    #
    # source://rspotify//lib/rspotify/user.rb#28
    def search(*_arg0); end

    private

    # source://rspotify//lib/rspotify/user.rb#56
    def extract_custom_headers(params); end

    # source://rspotify//lib/rspotify/user.rb#63
    def oauth_header(user_id); end

    # source://rspotify//lib/rspotify/user.rb#71
    def oauth_send(user_id, verb, path, *params); end

    # source://rspotify//lib/rspotify/user.rb#33
    def refresh_token(user_id); end
  end
end

# source://rspotify//lib/rspotify/connection.rb#12
RSpotify::VERBS = T.let(T.unsafe(nil), Array)

# source://rspotify//lib/rspotify/version.rb#2
RSpotify::VERSION = T.let(T.unsafe(nil), String)
