# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `mailgun-ruby` gem.
# Please instead update this file by running `bin/tapioca gem mailgun-ruby`.

# source://mailgun-ruby//lib/railgun/message.rb#6
module Mail
  class << self
    # source://mail/2.7.1/lib/mail/mail.rb#163
    def all(*args, &block); end

    # source://mail/2.7.1/lib/mail/mail.rb#183
    def connection(&block); end

    # source://mail/2.7.1/lib/mail/mail.rb#98
    def defaults(&block); end

    # source://mail/2.7.1/lib/mail/mail.rb#174
    def delete_all(*args, &block); end

    # source://mail/2.7.1/lib/mail/mail.rb#131
    def deliver(*args, &block); end

    # source://mail/2.7.1/lib/mail/mail.rb#103
    def delivery_method; end

    # source://mail/2.7.1/lib/mail.rb#53
    def eager_autoload!; end

    # source://mail/2.7.1/lib/mail/mail.rb#139
    def find(*args, &block); end

    # source://mail/2.7.1/lib/mail/mail.rb#145
    def find_and_delete(*args, &block); end

    # source://mail/2.7.1/lib/mail/mail.rb#151
    def first(*args, &block); end

    # source://actionmailbox/7.0.3.1/lib/action_mailbox/mail_ext/from_source.rb#4
    def from_source(source); end

    # source://mail/2.7.1/lib/mail/mail.rb#233
    def inform_interceptors(mail); end

    # source://mail/2.7.1/lib/mail/mail.rb#227
    def inform_observers(mail); end

    # source://mail/2.7.1/lib/mail/mail.rb#157
    def last(*args, &block); end

    # source://mail/2.7.1/lib/mail/mail.rb#50
    def new(*args, &block); end

    # source://mail/2.7.1/lib/mail/mail.rb#243
    def random_tag; end

    # source://mail/2.7.1/lib/mail/mail.rb#168
    def read(filename); end

    # source://mail/2.7.1/lib/mail/mail.rb#179
    def read_from_string(mail_as_string); end

    # source://mail/2.7.1/lib/mail.rb#41
    def register_autoload(name, path); end

    # source://mail/2.7.1/lib/mail/mail.rb#215
    def register_interceptor(interceptor); end

    # source://mail/2.7.1/lib/mail/mail.rb#196
    def register_observer(observer); end

    # source://mail/2.7.1/lib/mail/mail.rb#108
    def retriever_method; end

    # source://mail/2.7.1/lib/mail/mail.rb#252
    def something_random; end

    # source://mail/2.7.1/lib/mail/mail.rb#256
    def uniq; end

    # source://mail/2.7.1/lib/mail/mail.rb#223
    def unregister_interceptor(interceptor); end

    # source://mail/2.7.1/lib/mail/mail.rb#204
    def unregister_observer(observer); end
  end
end

# source://mailgun-ruby//lib/railgun/message.rb#8
class Mail::Message
  # source://mail/2.7.1/lib/mail/message.rb#109
  def initialize(*args, &block); end

  # source://mail/2.7.1/lib/mail/message.rb#341
  def <=>(other); end

  # source://mail/2.7.1/lib/mail/message.rb#380
  def ==(other); end

  # source://mail/2.7.1/lib/mail/message.rb#1341
  def [](name); end

  # source://mail/2.7.1/lib/mail/message.rb#1323
  def []=(name, value); end

  # source://mail/2.7.1/lib/mail/message.rb#1589
  def action; end

  # source://mail/2.7.1/lib/mail/message.rb#1484
  def add_charset; end

  # source://mail/2.7.1/lib/mail/message.rb#1497
  def add_content_transfer_encoding; end

  # source://mail/2.7.1/lib/mail/message.rb#1477
  def add_content_type; end

  # source://mail/2.7.1/lib/mail/message.rb#1460
  def add_date(date_val = T.unsafe(nil)); end

  # source://mail/2.7.1/lib/mail/message.rb#1788
  def add_file(values); end

  # source://mail/2.7.1/lib/mail/message.rb#1450
  def add_message_id(msg_id_val = T.unsafe(nil)); end

  # source://mail/2.7.1/lib/mail/message.rb#1470
  def add_mime_version(ver_val = T.unsafe(nil)); end

  # source://mail/2.7.1/lib/mail/message.rb#1732
  def add_part(part); end

  # source://mail/2.7.1/lib/mail/message.rb#1501
  def add_transfer_encoding; end

  # source://mail/2.7.1/lib/mail/message.rb#1944
  def all_parts; end

  # source://mail/2.7.1/lib/mail/message.rb#1935
  def attachment; end

  # source://mail/2.7.1/lib/mail/message.rb#1930
  def attachment?; end

  # source://mail/2.7.1/lib/mail/message.rb#1657
  def attachments; end

  # source://mail/2.7.1/lib/mail/message.rb#507
  def bcc(val = T.unsafe(nil)); end

  # source://mail/2.7.1/lib/mail/message.rb#519
  def bcc=(val); end

  # source://actionmailbox/7.0.3.1/lib/action_mailbox/mail_ext/addresses.rb#21
  def bcc_addresses; end

  # source://mail/2.7.1/lib/mail/message.rb#1313
  def bcc_addrs; end

  # source://mail/2.7.1/lib/mail/message.rb#1258
  def body(value = T.unsafe(nil)); end

  # source://mail/2.7.1/lib/mail/message.rb#1244
  def body=(value); end

  # source://mail/2.7.1/lib/mail/message.rb#1267
  def body_encoding(value = T.unsafe(nil)); end

  # source://mail/2.7.1/lib/mail/message.rb#1275
  def body_encoding=(value); end

  # source://mail/2.7.1/lib/mail/message.rb#1585
  def bounced?; end

  # source://mail/2.7.1/lib/mail/message.rb#1614
  def boundary; end

  # source://mail/2.7.1/lib/mail/message.rb#548
  def cc(val = T.unsafe(nil)); end

  # source://mail/2.7.1/lib/mail/message.rb#560
  def cc=(val); end

  # source://actionmailbox/7.0.3.1/lib/action_mailbox/mail_ext/addresses.rb#17
  def cc_addresses; end

  # source://mail/2.7.1/lib/mail/message.rb#1307
  def cc_addrs; end

  # source://mail/2.7.1/lib/mail/message.rb#1522
  def charset; end

  # source://mail/2.7.1/lib/mail/message.rb#1531
  def charset=(value); end

  # source://mail/2.7.1/lib/mail/message.rb#564
  def comments(val = T.unsafe(nil)); end

  # source://mail/2.7.1/lib/mail/message.rb#568
  def comments=(val); end

  # source://mail/2.7.1/lib/mail/message.rb#572
  def content_description(val = T.unsafe(nil)); end

  # source://mail/2.7.1/lib/mail/message.rb#576
  def content_description=(val); end

  # source://mail/2.7.1/lib/mail/message.rb#580
  def content_disposition(val = T.unsafe(nil)); end

  # source://mail/2.7.1/lib/mail/message.rb#584
  def content_disposition=(val); end

  # source://mail/2.7.1/lib/mail/message.rb#588
  def content_id(val = T.unsafe(nil)); end

  # source://mail/2.7.1/lib/mail/message.rb#592
  def content_id=(val); end

  # source://mail/2.7.1/lib/mail/message.rb#596
  def content_location(val = T.unsafe(nil)); end

  # source://mail/2.7.1/lib/mail/message.rb#600
  def content_location=(val); end

  # source://mail/2.7.1/lib/mail/message.rb#604
  def content_transfer_encoding(val = T.unsafe(nil)); end

  # source://mail/2.7.1/lib/mail/message.rb#608
  def content_transfer_encoding=(val); end

  # source://mail/2.7.1/lib/mail/message.rb#612
  def content_type(val = T.unsafe(nil)); end

  # source://mail/2.7.1/lib/mail/message.rb#616
  def content_type=(val); end

  # source://mail/2.7.1/lib/mail/message.rb#1554
  def content_type_parameters; end

  # source://mail/2.7.1/lib/mail/message.rb#1801
  def convert_to_multipart; end

  # source://mail/2.7.1/lib/mail/message.rb#620
  def date(val = T.unsafe(nil)); end

  # source://mail/2.7.1/lib/mail/message.rb#624
  def date=(val); end

  # source://mail/2.7.1/lib/mail/message.rb#1924
  def decode_body; end

  # source://mail/2.7.1/lib/mail/message.rb#1903
  def decoded; end

  # source://mail/2.7.1/lib/mail/message.rb#1211
  def default(sym, val = T.unsafe(nil)); end

  # source://mail/2.7.1/lib/mail/message.rb#257
  def deliver; end

  # source://mail/2.7.1/lib/mail/message.rb#274
  def deliver!; end

  # source://mail/2.7.1/lib/mail/message.rb#201
  def delivery_handler; end

  # source://mail/2.7.1/lib/mail/message.rb#201
  def delivery_handler=(_arg0); end

  # source://mail/2.7.1/lib/mail/message.rb#281
  def delivery_method(method = T.unsafe(nil), settings = T.unsafe(nil)); end

  # source://mail/2.7.1/lib/mail/message.rb#1574
  def delivery_status_part; end

  # source://mail/2.7.1/lib/mail/message.rb#1569
  def delivery_status_report?; end

  # source://mail/2.7.1/lib/mail/message.rb#1289
  def destinations; end

  # source://mail/2.7.1/lib/mail/message.rb#1601
  def diagnostic_code; end

  # source://mail/2.7.1/lib/mail/message.rb#1821
  def encode!; end

  # source://mail/2.7.1/lib/mail/message.rb#1829
  def encoded; end

  # source://mail/2.7.1/lib/mail/message.rb#425
  def envelope_date; end

  # source://mail/2.7.1/lib/mail/message.rb#421
  def envelope_from; end

  # source://mail/2.7.1/lib/mail/message.rb#1597
  def error_status; end

  # source://mail/2.7.1/lib/mail/message.rb#478
  def errors; end

  # source://mail/2.7.1/lib/mail/message.rb#1940
  def filename; end

  # source://mail/2.7.1/lib/mail/message.rb#1593
  def final_recipient; end

  # source://mail/2.7.1/lib/mail/message.rb#1948
  def find_first_mime_type(mt); end

  # source://mail/2.7.1/lib/mail/message.rb#665
  def from(val = T.unsafe(nil)); end

  # source://mail/2.7.1/lib/mail/message.rb#677
  def from=(val); end

  # source://actionmailbox/7.0.3.1/lib/action_mailbox/mail_ext/addresses.rb#5
  def from_address; end

  # source://mail/2.7.1/lib/mail/message.rb#1295
  def from_addrs; end

  # source://mail/2.7.1/lib/mail/message.rb#1661
  def has_attachments?; end

  # source://mail/2.7.1/lib/mail/message.rb#1430
  def has_charset?; end

  # source://mail/2.7.1/lib/mail/message.rb#1435
  def has_content_transfer_encoding?; end

  # source://mail/2.7.1/lib/mail/message.rb#1425
  def has_content_type?; end

  # source://mail/2.7.1/lib/mail/message.rb#1415
  def has_date?; end

  # source://mail/2.7.1/lib/mail/message.rb#1409
  def has_message_id?; end

  # source://mail/2.7.1/lib/mail/message.rb#1421
  def has_mime_version?; end

  # source://mail/2.7.1/lib/mail/message.rb#1439
  def has_transfer_encoding?; end

  # source://mail/2.7.1/lib/mail/message.rb#450
  def header(value = T.unsafe(nil)); end

  # source://mail/2.7.1/lib/mail/message.rb#435
  def header=(value); end

  # source://mail/2.7.1/lib/mail/message.rb#1403
  def header_fields; end

  # source://mail/2.7.1/lib/mail/message.rb#455
  def headers(hash = T.unsafe(nil)); end

  # source://mail/2.7.1/lib/mail/message.rb#1666
  def html_part(&block); end

  # source://mail/2.7.1/lib/mail/message.rb#1686
  def html_part=(msg); end

  # source://mail/2.7.1/lib/mail/message.rb#681
  def in_reply_to(val = T.unsafe(nil)); end

  # source://mail/2.7.1/lib/mail/message.rb#685
  def in_reply_to=(val); end

  # source://mail/2.7.1/lib/mail/message.rb#247
  def inform_interceptors; end

  # source://mail/2.7.1/lib/mail/message.rb#243
  def inform_observers; end

  # source://mail/2.7.1/lib/mail/message.rb#1899
  def inspect; end

  # source://mail/2.7.1/lib/mail/message.rb#1977
  def is_marked_for_delete?; end

  # source://mail/2.7.1/lib/mail/message.rb#689
  def keywords(val = T.unsafe(nil)); end

  # source://mail/2.7.1/lib/mail/message.rb#693
  def keywords=(val); end

  # Attributes to hold Mailgun-specific information
  #
  # source://mailgun-ruby//lib/railgun/message.rb#11
  def mailgun_headers; end

  # Attributes to hold Mailgun-specific information
  #
  # source://mailgun-ruby//lib/railgun/message.rb#11
  def mailgun_headers=(_arg0); end

  # Attributes to hold Mailgun-specific information
  #
  # source://mailgun-ruby//lib/railgun/message.rb#11
  def mailgun_options; end

  # Attributes to hold Mailgun-specific information
  #
  # source://mailgun-ruby//lib/railgun/message.rb#11
  def mailgun_options=(_arg0); end

  # Attributes to hold Mailgun-specific information
  #
  # source://mailgun-ruby//lib/railgun/message.rb#11
  def mailgun_recipient_variables; end

  # Attributes to hold Mailgun-specific information
  #
  # source://mailgun-ruby//lib/railgun/message.rb#11
  def mailgun_recipient_variables=(_arg0); end

  # Attributes to hold Mailgun-specific information
  #
  # source://mailgun-ruby//lib/railgun/message.rb#11
  def mailgun_template_variables; end

  # Attributes to hold Mailgun-specific information
  #
  # source://mailgun-ruby//lib/railgun/message.rb#11
  def mailgun_template_variables=(_arg0); end

  # Attributes to hold Mailgun-specific information
  #
  # source://mailgun-ruby//lib/railgun/message.rb#11
  def mailgun_variables; end

  # Attributes to hold Mailgun-specific information
  #
  # source://mailgun-ruby//lib/railgun/message.rb#11
  def mailgun_variables=(_arg0); end

  # source://mail/2.7.1/lib/mail/message.rb#1538
  def main_type; end

  # source://mail/2.7.1/lib/mail/message.rb#1964
  def mark_for_delete=(value = T.unsafe(nil)); end

  # source://mail/2.7.1/lib/mail/message.rb#1516
  def message_content_type; end

  # source://mail/2.7.1/lib/mail/message.rb#710
  def message_id(val = T.unsafe(nil)); end

  # source://mail/2.7.1/lib/mail/message.rb#719
  def message_id=(val); end

  # source://mail/2.7.1/lib/mail/message.rb#1384
  def method_missing(name, *args, &block); end

  # source://mail/2.7.1/lib/mail/message.rb#1548
  def mime_parameters; end

  # source://mail/2.7.1/lib/mail/message.rb#1512
  def mime_type; end

  # source://mail/2.7.1/lib/mail/message.rb#736
  def mime_version(val = T.unsafe(nil)); end

  # source://mail/2.7.1/lib/mail/message.rb#746
  def mime_version=(val); end

  # source://mail/2.7.1/lib/mail/message.rb#1559
  def multipart?; end

  # source://mail/2.7.1/lib/mail/message.rb#1564
  def multipart_report?; end

  # source://mail/2.7.1/lib/mail/message.rb#1753
  def part(params = T.unsafe(nil)); end

  # source://mail/2.7.1/lib/mail/message.rb#1619
  def parts; end

  # source://mail/2.7.1/lib/mail/message.rb#225
  def perform_deliveries; end

  # source://mail/2.7.1/lib/mail/message.rb#225
  def perform_deliveries=(_arg0); end

  # source://mail/2.7.1/lib/mail/message.rb#232
  def raise_delivery_errors; end

  # source://mail/2.7.1/lib/mail/message.rb#232
  def raise_delivery_errors=(_arg0); end

  # source://mail/2.7.1/lib/mail/message.rb#417
  def raw_envelope; end

  # source://mail/2.7.1/lib/mail/message.rb#404
  def raw_source; end

  # source://mail/2.7.1/lib/mail/message.rb#1916
  def read; end

  # source://mail/2.7.1/lib/mail/message.rb#1812
  def ready_to_send!; end

  # source://mail/2.7.1/lib/mail/message.rb#750
  def received(val = T.unsafe(nil)); end

  # source://mail/2.7.1/lib/mail/message.rb#758
  def received=(val); end

  # source://actionmailbox/7.0.3.1/lib/action_mailbox/mail_ext/recipients.rb#5
  def recipients; end

  # source://actionmailbox/7.0.3.1/lib/action_mailbox/mail_ext/addresses.rb#9
  def recipients_addresses; end

  # source://mail/2.7.1/lib/mail/message.rb#762
  def references(val = T.unsafe(nil)); end

  # source://mail/2.7.1/lib/mail/message.rb#766
  def references=(val); end

  # source://mail/2.7.1/lib/mail/message.rb#238
  def register_for_delivery_notification(observer); end

  # source://mail/2.7.1/lib/mail/message.rb#1605
  def remote_mta; end

  # source://mail/2.7.1/lib/mail/message.rb#289
  def reply(*args, &block); end

  # source://mail/2.7.1/lib/mail/message.rb#795
  def reply_to(val = T.unsafe(nil)); end

  # source://mail/2.7.1/lib/mail/message.rb#807
  def reply_to=(val); end

  # source://mail/2.7.1/lib/mail/message.rb#836
  def resent_bcc(val = T.unsafe(nil)); end

  # source://mail/2.7.1/lib/mail/message.rb#848
  def resent_bcc=(val); end

  # source://mail/2.7.1/lib/mail/message.rb#877
  def resent_cc(val = T.unsafe(nil)); end

  # source://mail/2.7.1/lib/mail/message.rb#889
  def resent_cc=(val); end

  # source://mail/2.7.1/lib/mail/message.rb#893
  def resent_date(val = T.unsafe(nil)); end

  # source://mail/2.7.1/lib/mail/message.rb#897
  def resent_date=(val); end

  # source://mail/2.7.1/lib/mail/message.rb#926
  def resent_from(val = T.unsafe(nil)); end

  # source://mail/2.7.1/lib/mail/message.rb#938
  def resent_from=(val); end

  # source://mail/2.7.1/lib/mail/message.rb#942
  def resent_message_id(val = T.unsafe(nil)); end

  # source://mail/2.7.1/lib/mail/message.rb#946
  def resent_message_id=(val); end

  # source://mail/2.7.1/lib/mail/message.rb#965
  def resent_sender(val = T.unsafe(nil)); end

  # source://mail/2.7.1/lib/mail/message.rb#975
  def resent_sender=(val); end

  # source://mail/2.7.1/lib/mail/message.rb#1004
  def resent_to(val = T.unsafe(nil)); end

  # source://mail/2.7.1/lib/mail/message.rb#1016
  def resent_to=(val); end

  # source://mail/2.7.1/lib/mail/message.rb#1609
  def retryable?; end

  # source://mail/2.7.1/lib/mail/message.rb#1021
  def return_path(val = T.unsafe(nil)); end

  # source://mail/2.7.1/lib/mail/message.rb#1026
  def return_path=(val); end

  # source://mail/2.7.1/lib/mail/message.rb#1044
  def sender(val = T.unsafe(nil)); end

  # source://mail/2.7.1/lib/mail/message.rb#1054
  def sender=(val); end

  # source://mail/2.7.1/lib/mail/message.rb#409
  def set_envelope(val); end

  # source://mail/2.7.1/lib/mail/message.rb#1956
  def skip_deletion; end

  # source://mail/2.7.1/lib/mail/message.rb#1074
  def smtp_envelope_from(val = T.unsafe(nil)); end

  # source://mail/2.7.1/lib/mail/message.rb#1088
  def smtp_envelope_from=(val); end

  # source://mail/2.7.1/lib/mail/message.rb#1107
  def smtp_envelope_to(val = T.unsafe(nil)); end

  # source://mail/2.7.1/lib/mail/message.rb#1124
  def smtp_envelope_to=(val); end

  # source://mail/2.7.1/lib/mail/message.rb#1543
  def sub_type; end

  # source://mail/2.7.1/lib/mail/message.rb#1149
  def subject(val = T.unsafe(nil)); end

  # source://mail/2.7.1/lib/mail/message.rb#1159
  def subject=(val); end

  # source://mail/2.7.1/lib/mail/message.rb#1981
  def text?; end

  # source://mail/2.7.1/lib/mail/message.rb#1675
  def text_part(&block); end

  # source://mail/2.7.1/lib/mail/message.rb#1710
  def text_part=(msg); end

  # source://mail/2.7.1/lib/mail/message.rb#1188
  def to(val = T.unsafe(nil)); end

  # source://mail/2.7.1/lib/mail/message.rb#1200
  def to=(val); end

  # source://actionmailbox/7.0.3.1/lib/action_mailbox/mail_ext/addresses.rb#13
  def to_addresses; end

  # source://mail/2.7.1/lib/mail/message.rb#1301
  def to_addrs; end

  # source://mail/2.7.1/lib/mail/message.rb#1895
  def to_s; end

  # source://mail/2.7.1/lib/mail/message.rb#1849
  def to_yaml(opts = T.unsafe(nil)); end

  # source://mail/2.7.1/lib/mail/message.rb#1506
  def transfer_encoding; end

  # source://mail/2.7.1/lib/mail/message.rb#628
  def transport_encoding(val = T.unsafe(nil)); end

  # source://mail/2.7.1/lib/mail/message.rb#636
  def transport_encoding=(val); end

  # source://mail/2.7.1/lib/mail/message.rb#1837
  def without_attachments!; end

  # source://actionmailbox/7.0.3.1/lib/action_mailbox/mail_ext/addresses.rb#25
  def x_original_to_addresses; end

  private

  # source://mail/2.7.1/lib/mail/message.rb#2083
  def add_boundary; end

  # source://mail/2.7.1/lib/mail/message.rb#2049
  def add_encoding_to_body; end

  # source://mail/2.7.1/lib/mail/message.rb#2077
  def add_multipart_alternate_header; end

  # source://mail/2.7.1/lib/mail/message.rb#2092
  def add_multipart_mixed_header; end

  # source://mail/2.7.1/lib/mail/message.rb#2063
  def add_required_fields; end

  # source://mail/2.7.1/lib/mail/message.rb#2071
  def add_required_message_fields; end

  # source://mail/2.7.1/lib/mail/message.rb#2042
  def allowed_encodings; end

  # source://mail/2.7.1/lib/mail/message.rb#2007
  def body_lazy(value); end

  # source://mail/2.7.1/lib/mail/message.rb#2166
  def decode_body_as_text; end

  # source://mail/2.7.1/lib/mail/message.rb#2156
  def do_delivery; end

  # source://mail/2.7.1/lib/mail/message.rb#2138
  def find_attachment; end

  # source://mail/2.7.1/lib/mail/message.rb#2055
  def identify_and_set_transfer_encoding; end

  # source://mail/2.7.1/lib/mail/message.rb#2100
  def init_with_hash(hash); end

  # source://mail/2.7.1/lib/mail/message.rb#2130
  def init_with_string(string); end

  # source://mail/2.7.1/lib/mail/message.rb#391
  def initialize_copy(original); end

  # source://mail/2.7.1/lib/mail/message.rb#1996
  def parse_message; end

  # source://mail/2.7.1/lib/mail/message.rb#2022
  def process_body_raw; end

  # source://mail/2.7.1/lib/mail/message.rb#2002
  def raw_source=(value); end

  # source://mail/2.7.1/lib/mail/message.rb#2038
  def separate_parts; end

  # source://mail/2.7.1/lib/mail/message.rb#2030
  def set_envelope_header; end

  class << self
    # source://mail/2.7.1/lib/mail/message.rb#234
    def default_charset; end

    # source://mail/2.7.1/lib/mail/message.rb#235
    def default_charset=(charset); end

    # source://mail/2.7.1/lib/mail/message.rb#1891
    def from_hash(hash); end

    # source://mail/2.7.1/lib/mail/message.rb#1869
    def from_yaml(str); end
  end
end

# source://mail/2.7.1/lib/mail/message.rb#1987
Mail::Message::HEADER_SEPARATOR = T.let(T.unsafe(nil), Regexp)

# source://mail/2.7.1/lib/mail/mail.rb#241
Mail::RANDOM_TAG = T.let(T.unsafe(nil), String)

# source://mail/2.7.1/lib/mail.rb#22
Mail::RubyVer = Mail::Ruby19

# Module for interacting with the sweet Mailgun API.
#
# See the Github documentation for full examples.
#
# source://mailgun-ruby//lib/mailgun/version.rb#2
module Mailgun
  class << self
    # Returns the value of attribute api_key.
    #
    # source://mailgun-ruby//lib/mailgun.rb#25
    def api_key; end

    # Sets the attribute api_key
    #
    # @param value the value to set the attribute api_key to.
    #
    # source://mailgun-ruby//lib/mailgun.rb#25
    def api_key=(_arg0); end

    # Returns the value of attribute api_version.
    #
    # source://mailgun-ruby//lib/mailgun.rb#25
    def api_version; end

    # Sets the attribute api_version
    #
    # @param value the value to set the attribute api_version to.
    #
    # source://mailgun-ruby//lib/mailgun.rb#25
    def api_version=(_arg0); end

    # @yield [_self]
    # @yieldparam _self [Mailgun] the object that the method was called on
    #
    # source://mailgun-ruby//lib/mailgun.rb#32
    def config; end

    # @yield [_self]
    # @yieldparam _self [Mailgun] the object that the method was called on
    #
    # source://mailgun-ruby//lib/mailgun.rb#32
    def configure; end

    # Returns the value of attribute domain.
    #
    # source://mailgun-ruby//lib/mailgun.rb#25
    def domain; end

    # Sets the attribute domain
    #
    # @param value the value to set the attribute domain to.
    #
    # source://mailgun-ruby//lib/mailgun.rb#25
    def domain=(_arg0); end

    # Returns the value of attribute mailgun_host.
    #
    # source://mailgun-ruby//lib/mailgun.rb#25
    def mailgun_host; end

    # Sets the attribute mailgun_host
    #
    # @param value the value to set the attribute mailgun_host to.
    #
    # source://mailgun-ruby//lib/mailgun.rb#25
    def mailgun_host=(_arg0); end

    # Returns the value of attribute protocol.
    #
    # source://mailgun-ruby//lib/mailgun.rb#25
    def protocol; end

    # Sets the attribute protocol
    #
    # @param value the value to set the attribute protocol to.
    #
    # source://mailgun-ruby//lib/mailgun.rb#25
    def protocol=(_arg0); end

    # Returns the value of attribute test_mode.
    #
    # source://mailgun-ruby//lib/mailgun.rb#25
    def test_mode; end

    # Sets the attribute test_mode
    #
    # @param value the value to set the attribute test_mode to.
    #
    # source://mailgun-ruby//lib/mailgun.rb#25
    def test_mode=(_arg0); end
  end
end

# Mailgun::Address is a simple interface to the Email Validation API.
#
# source://mailgun-ruby//lib/mailgun/address.rb#6
class Mailgun::Address
  # @param api_key [String] Mailgun API - public key
  # @return [Address] a new instance of Address
  #
  # source://mailgun-ruby//lib/mailgun/address.rb#9
  def initialize(api_key = T.unsafe(nil)); end

  # Parses a delimiter separated list of email addresses into two lists:
  # parsed addresses and unparsable portions. The parsed addresses are a
  # list of addresses that are syntactically valid (and optionally have
  # DNS and ESP specific grammar checks) the unparsable list is a list
  # of characters sequences that the parser was not able to understand.
  # These often align with invalid email addresses, but not always.
  # Delimiter characters are comma (,) and semicolon (;).
  #
  # @param addresses [Array] Addresses to parse
  # @param syntax_only [TrueClass|FalseClass] Perform only syntax checks
  #
  # source://mailgun-ruby//lib/mailgun/address.rb#39
  def parse(addresses, syntax_only = T.unsafe(nil)); end

  # Given an arbitrary address, validates it based on defined checks.
  #
  # @param address [String] Email address to validate (max 512 chars.)
  #
  # source://mailgun-ruby//lib/mailgun/address.rb#21
  def validate(address, mailbox_verification = T.unsafe(nil)); end
end

# A Mailgun::BatchMessage object is used to create a valid payload
# for Batch Sending. Batch Sending can be difficult to implement, therefore
# this code makes it dead simple to send millions of messages in batches of
# 1,000 recipients per HTTP call.
#
# For the curious, the class simply keeps track of recipient data (count,
# user variables), and fires the API payload on the 1,000th addition of a recipient.
#
# The best way to use this class is:
# 1. Build your message using the Message Builder methods.
# 2. Query your source and create an iterable list.
# 3. Iterate through your source data, and add your recipients using the
#    add_recipient() method.
# 4. Call finalize() to flush any remaining recipients and obtain/store
#    the message_ids for tracking purposes.
#
# See the Github documentation for full examples.
#
# source://mailgun-ruby//lib/mailgun/messages/batch_message.rb#22
class Mailgun::BatchMessage < ::Mailgun::MessageBuilder
  # Public: Creates a new BatchMessage object.
  #
  # @return [BatchMessage] a new instance of BatchMessage
  #
  # source://mailgun-ruby//lib/mailgun/messages/batch_message.rb#27
  def initialize(client, domain); end

  # Adds a specific type of recipient to the batch message object.
  #
  # @param recipient_type [String] The type of recipient. "to".
  # @param address [String] The email address of the recipient to add to the message object.
  # @param variables [Hash] A hash of the variables associated with the recipient. We recommend "first" and "last" at a minimum!
  # @return [void]
  #
  # source://mailgun-ruby//lib/mailgun/messages/batch_message.rb#46
  def add_recipient(recipient_type, address, variables = T.unsafe(nil)); end

  # Returns the value of attribute domain.
  #
  # source://mailgun-ruby//lib/mailgun/messages/batch_message.rb#24
  def domain; end

  # Always call this function after adding recipients. If less than 1000 are added,
  # this function will ensure the batch is sent.
  #
  # @return [Hash] A hash of {'Message ID' => '# of Messages Sent'}
  #
  # source://mailgun-ruby//lib/mailgun/messages/batch_message.rb#62
  def finalize; end

  # Returns the value of attribute message_ids.
  #
  # source://mailgun-ruby//lib/mailgun/messages/batch_message.rb#24
  def message_ids; end

  # Returns the value of attribute recipient_variables.
  #
  # source://mailgun-ruby//lib/mailgun/messages/batch_message.rb#24
  def recipient_variables; end

  private

  # This method determines if it's necessary to send another batch.
  #
  # @return [Boolean]
  #
  # source://mailgun-ruby//lib/mailgun/messages/batch_message.rb#72
  def any_recipients_left?; end

  # This method stores recipient variables for each recipient added, if
  # variables exist.
  #
  # source://mailgun-ruby//lib/mailgun/messages/batch_message.rb#105
  def count_recipients; end

  # This method resets the message object to prepare for the next batch
  # of recipients.
  #
  # source://mailgun-ruby//lib/mailgun/messages/batch_message.rb#113
  def reset_message; end

  # This method initiates a batch send to the API. It formats the recipient
  # variables, posts to the API, gathers the message IDs, then flushes that data
  # to prepare for the next batch. This method implements the Mailgun Client, thus,
  # an exception will be thrown if a communication error occurs.
  #
  # @return [Boolean]
  #
  # source://mailgun-ruby//lib/mailgun/messages/batch_message.rb#85
  def send_message; end

  # This method stores recipient variables for each recipient added, if
  # variables exist.
  #
  # source://mailgun-ruby//lib/mailgun/messages/batch_message.rb#98
  def store_recipient_variables(recipient_type, address, variables); end
end

# Public constants used throughout
#
# source://mailgun-ruby//lib/mailgun/chains.rb#4
class Mailgun::Chains; end

# maximum campaign ids per message
#
# source://mailgun-ruby//lib/mailgun/chains.rb#7
Mailgun::Chains::MAX_CAMPAIGN_IDS = T.let(T.unsafe(nil), Integer)

# maximum recipients per message or batch
#
# source://mailgun-ruby//lib/mailgun/chains.rb#13
Mailgun::Chains::MAX_RECIPIENTS = T.let(T.unsafe(nil), Integer)

# maximum tags per message
#
# source://mailgun-ruby//lib/mailgun/chains.rb#10
Mailgun::Chains::MAX_TAGS = T.let(T.unsafe(nil), Integer)

# A Mailgun::Client object is used to communicate with the Mailgun API. It is a
# wrapper around RestClient so you don't have to worry about the HTTP aspect
# of communicating with our API.
#
# See the Github documentation for full examples.
#
# source://mailgun-ruby//lib/mailgun/client.rb#11
class Mailgun::Client
  # @return [Client] a new instance of Client
  #
  # source://mailgun-ruby//lib/mailgun/client.rb#13
  def initialize(api_key = T.unsafe(nil), api_host = T.unsafe(nil), api_version = T.unsafe(nil), ssl = T.unsafe(nil), test_mode = T.unsafe(nil), timeout = T.unsafe(nil), proxy_url = T.unsafe(nil)); end

  # Generic Mailgun DELETE Handler
  #
  # with. Be sure to include your domain, where necessary.
  #
  # @param resource_path [String] This is the API resource you wish to interact
  # @return [Mailgun::Response] A Mailgun::Response object.
  #
  # source://mailgun-ruby//lib/mailgun/client.rb#155
  def delete(resource_path); end

  # Disable test mode
  #
  # Reverts the test_mode flag and allows the client to send messages.
  #
  # source://mailgun-ruby//lib/mailgun/client.rb#44
  def disable_test_mode!; end

  # Enable test mode
  #
  # Prevents sending of any messages.
  #
  # source://mailgun-ruby//lib/mailgun/client.rb#37
  def enable_test_mode!; end

  # Generic Mailgun GET Handler
  #
  # with. Be sure to include your domain, where necessary.
  # containing required parameters for the requested resource.
  #
  # @param resource_path [String] This is the API resource you wish to interact
  # @param params [Hash] This should be a standard Hash
  # @param accept [String] Acceptable Content-Type of the response body.
  # @return [Mailgun::Response] A Mailgun::Response object.
  #
  # source://mailgun-ruby//lib/mailgun/client.rb#125
  def get(resource_path, params = T.unsafe(nil), accept = T.unsafe(nil)); end

  # Generic Mailgun POST Handler
  #
  # with. Be sure to include your domain, where necessary.
  # containing required parameters for the requested resource.
  #
  # @param resource_path [String] This is the API resource you wish to interact
  # @param data [Hash] This should be a standard Hash
  # @param headers [Hash] Additional headers to pass to the resource.
  # @return [Mailgun::Response] A Mailgun::Response object.
  #
  # source://mailgun-ruby//lib/mailgun/client.rb#110
  def post(resource_path, data, headers = T.unsafe(nil)); end

  # Generic Mailgun PUT Handler
  #
  # with. Be sure to include your domain, where necessary.
  # containing required parameters for the requested resource.
  #
  # @param resource_path [String] This is the API resource you wish to interact
  # @param data [Hash] This should be a standard Hash
  # @return [Mailgun::Response] A Mailgun::Response object.
  #
  # source://mailgun-ruby//lib/mailgun/client.rb#143
  def put(resource_path, data); end

  # Simple Message Sending
  #
  # containing required parameters for the requested resource.
  #
  # @param working_domain [String] This is the domain you wish to send from.
  # @param data [Hash] This should be a standard Hash
  # @return [Mailgun::Response] A Mailgun::Response object.
  #
  # source://mailgun-ruby//lib/mailgun/client.rb#68
  def send_message(working_domain, data); end

  # Constructs a Suppressions client for the given domain.
  #
  # @param domain [String] Domain which suppressions requests will be made for
  # @return [Mailgun::Suppressions]
  #
  # source://mailgun-ruby//lib/mailgun/client.rb#166
  def suppressions(domain); end

  # Client is in test mode?
  #
  # @return [Boolean] Is the client set in test mode?
  #
  # source://mailgun-ruby//lib/mailgun/client.rb#51
  def test_mode?; end

  private

  # Raises CommunicationError and stores response in it if present
  #
  # @param e [StandardException] upstream exception object
  #
  # source://mailgun-ruby//lib/mailgun/client.rb#202
  def communication_error(e); end

  # Converts MIME string to file for easy uploading to API
  #
  # @param string [String] MIME string to post to API
  # @return [File] File object
  #
  # source://mailgun-ruby//lib/mailgun/client.rb#176
  def convert_string_to_file(string); end

  # Generates the endpoint URL to for the API. Allows overriding
  # API endpoint, API versions, and toggling SSL.
  #
  # @param api_host [String] URL endpoint the library will hit
  # @param api_version [String] The version of the API to hit
  # @param ssl [Boolean] True, SSL. False, No SSL.
  # @return [string] concatenated URL string
  #
  # source://mailgun-ruby//lib/mailgun/client.rb#190
  def endpoint_generator(api_host, api_version, ssl); end

  # source://mailgun-ruby//lib/mailgun/client.rb#207
  def perform_data_validation(working_domain, data); end

  class << self
    # Provides a store of all the emails sent in test mode so you can check them.
    #
    # @return [Hash]
    #
    # source://mailgun-ruby//lib/mailgun/client.rb#58
    def deliveries; end
  end
end

# Public: Class for managing communications (eg http) response errors
# Inherits from Mailgun::Error
#
# source://mailgun-ruby//lib/mailgun/exceptions/exceptions.rb#32
class Mailgun::CommunicationError < ::Mailgun::Error
  # Public: initialization of new error given a message and/or object
  #
  # message  - a String detailing the error
  # response - a RestClient::Response object
  #
  # @return [CommunicationError] a new instance of CommunicationError
  #
  # source://mailgun-ruby//lib/mailgun/exceptions/exceptions.rb#44
  def initialize(message = T.unsafe(nil), response = T.unsafe(nil)); end

  # Public: gets HTTP status code
  #
  # source://mailgun-ruby//lib/mailgun/exceptions/exceptions.rb#33
  def code; end
end

# source://mailgun-ruby//lib/mailgun/exceptions/exceptions.rb#37
Mailgun::CommunicationError::FORBIDDEN = T.let(T.unsafe(nil), String)

# Public: fallback if there is no response code on the object
#
# source://mailgun-ruby//lib/mailgun/exceptions/exceptions.rb#36
Mailgun::CommunicationError::NOCODE = T.let(T.unsafe(nil), Integer)

# A Mailgun::Domains object is a simple CRUD interface to Mailgun Domains.
# Uses Mailgun
#
# source://mailgun-ruby//lib/mailgun/domains/domains.rb#7
class Mailgun::Domains
  # Public: creates a new Mailgun::Domains instance.
  #   Defaults to Mailgun::Client
  #
  # @return [Domains] a new instance of Domains
  #
  # source://mailgun-ruby//lib/mailgun/domains/domains.rb#11
  def initialize(client = T.unsafe(nil)); end

  # Public: Add domain
  #
  # domain  - [String] Name of the domain (ex. domain.com)
  # options - [Hash] of
  #     smtp_password - [String] Password for SMTP authentication
  #     spam_action   - [String] disabled or tag
  #       Disable, no spam filtering will occur for inbound messages.
  #       Tag, messages will be tagged wtih a spam header. See Spam Filter.
  #     wildcard      - [Boolean] true or false Determines whether the domain will accept email for sub-domains.
  #
  # Returns [Hash] of created domain
  #
  # source://mailgun-ruby//lib/mailgun/domains/domains.rb#62
  def add(domain, options = T.unsafe(nil)); end

  # Public: Add domain
  #
  # domain  - [String] Name of the domain (ex. domain.com)
  # options - [Hash] of
  #     smtp_password - [String] Password for SMTP authentication
  #     spam_action   - [String] disabled or tag
  #       Disable, no spam filtering will occur for inbound messages.
  #       Tag, messages will be tagged wtih a spam header. See Spam Filter.
  #     wildcard      - [Boolean] true or false Determines whether the domain will accept email for sub-domains.
  #
  # Returns [Hash] of created domain
  #
  # source://mailgun-ruby//lib/mailgun/domains/domains.rb#62
  def add_domain(domain, options = T.unsafe(nil)); end

  # Public: Add domain
  #
  # domain  - [String] Name of the domain (ex. domain.com)
  # options - [Hash] of
  #     smtp_password - [String] Password for SMTP authentication
  #     spam_action   - [String] disabled or tag
  #       Disable, no spam filtering will occur for inbound messages.
  #       Tag, messages will be tagged wtih a spam header. See Spam Filter.
  #     wildcard      - [Boolean] true or false Determines whether the domain will accept email for sub-domains.
  #
  # Returns [Hash] of created domain
  #
  # source://mailgun-ruby//lib/mailgun/domains/domains.rb#62
  def create(domain, options = T.unsafe(nil)); end

  # Public: Delete Domain
  #
  # domain - [String] domain name to delete (ex. domain.com)
  #
  # Returns [Boolean] if successful or not
  #
  # source://mailgun-ruby//lib/mailgun/domains/domains.rb#76
  def delete(domain); end

  # Public: Delete Domain
  #
  # domain - [String] domain name to delete (ex. domain.com)
  #
  # Returns [Boolean] if successful or not
  #
  # source://mailgun-ruby//lib/mailgun/domains/domains.rb#76
  def delete_domain(domain); end

  # Public: Get domain information
  #
  # domain - [String] Domain name to lookup
  #
  # Returns [Hash] Information on the requested domains.
  #
  # source://mailgun-ruby//lib/mailgun/domains/domains.rb#31
  def get(domain); end

  # Public: Get domain information
  #
  # domain - [String] Domain name to lookup
  #
  # Returns [Hash] Information on the requested domains.
  #
  # source://mailgun-ruby//lib/mailgun/domains/domains.rb#31
  def get_domain(domain); end

  # Public: Get Domains
  #
  # limit - [Integer] Maximum number of records to return. (100 by default)
  # skip  - [Integer] Number of records to skip. (0 by default)
  #
  # Returns [Array] A list of domains (hash)
  #
  # source://mailgun-ruby//lib/mailgun/domains/domains.rb#21
  def get_domains(options = T.unsafe(nil)); end

  # Public: Get domain information
  #
  # domain - [String] Domain name to lookup
  #
  # Returns [Hash] Information on the requested domains.
  #
  # source://mailgun-ruby//lib/mailgun/domains/domains.rb#31
  def info(domain); end

  # Public: Get Domains
  #
  # limit - [Integer] Maximum number of records to return. (100 by default)
  # skip  - [Integer] Number of records to skip. (0 by default)
  #
  # Returns [Array] A list of domains (hash)
  #
  # source://mailgun-ruby//lib/mailgun/domains/domains.rb#21
  def list(options = T.unsafe(nil)); end

  # Public: Delete Domain
  #
  # domain - [String] domain name to delete (ex. domain.com)
  #
  # Returns [Boolean] if successful or not
  #
  # source://mailgun-ruby//lib/mailgun/domains/domains.rb#76
  def remove(domain); end

  # Public: Verify domain, update domain records
  #   Unknown status - this is not in the current Mailgun API
  #   Do no rely on this being available in future releases.
  #
  # domain - [String] Domain name
  #
  # Returns [Hash] Information on the updated/verified domains
  #
  # source://mailgun-ruby//lib/mailgun/domains/domains.rb#45
  def verify(domain); end

  # Public: Verify domain, update domain records
  #   Unknown status - this is not in the current Mailgun API
  #   Do no rely on this being available in future releases.
  #
  # domain - [String] Domain name
  #
  # Returns [Hash] Information on the updated/verified domains
  #
  # source://mailgun-ruby//lib/mailgun/domains/domains.rb#45
  def verify_domain(domain); end
end

# Public: A basic class for mananging errors.
# Inherits from StandardError (previously RuntimeError) as not all errors are
# runtime errors.
#
# source://mailgun-ruby//lib/mailgun/exceptions/exceptions.rb#6
class Mailgun::Error < ::StandardError
  # Public: initialize a Mailgun:Error object
  #
  # message - a String describing the error
  # object  - an object with details about the error
  #
  # @return [Error] a new instance of Error
  #
  # source://mailgun-ruby//lib/mailgun/exceptions/exceptions.rb#15
  def initialize(message = T.unsafe(nil), object = T.unsafe(nil)); end

  # Public: get an object an error is instantiated with
  #
  # source://mailgun-ruby//lib/mailgun/exceptions/exceptions.rb#9
  def object; end
end

# A Mailgun::Events object makes it really simple to consume
#   Mailgun's events from the Events endpoint.
#
# This is not yet comprehensive.
#
# Examples
#
#    See the Github documentation for full examples.
#
# source://mailgun-ruby//lib/mailgun/events/events.rb#13
class Mailgun::Events
  include ::Enumerable

  # Public: event initializer
  #
  # client - an instance of Mailgun::Client
  # domain - the domain to build queries
  #
  # @return [Events] a new instance of Events
  #
  # source://mailgun-ruby//lib/mailgun/events/events.rb#20
  def initialize(client, domain); end

  # Public: Allows iterating through all events and performs automatic paging.
  #
  # &block - Block to execute on items.
  #
  # source://mailgun-ruby//lib/mailgun/events/events.rb#61
  def each(&block); end

  # Public: Issues a simple get against the client. Alias of `next`.
  #
  # params - a Hash of query options and/or filters.
  #
  # Returns a Mailgun::Response object.
  #
  # source://mailgun-ruby//lib/mailgun/events/events.rb#32
  def get(params = T.unsafe(nil)); end

  # Public: Using built in paging, obtains the next set of data.
  # If an events request hasn't been sent previously, this will send one
  #   without parameters
  #
  # params - a Hash of query options and/or filters.
  #
  # Returns a Mailgun::Response object.
  #
  # source://mailgun-ruby//lib/mailgun/events/events.rb#43
  def next(params = T.unsafe(nil)); end

  # Public: Using built in paging, obtains the previous set of data.
  # If an events request hasn't been sent previously, this will send one
  #   without parameters
  #
  # params - a Hash of query options and/or filters.
  #
  # Returns Mailgun::Response object.
  #
  # source://mailgun-ruby//lib/mailgun/events/events.rb#54
  def previous(params = T.unsafe(nil)); end

  private

  # Internal: construct the event path to be used by the client
  #
  # paging - the URL key for previous/next set of results
  #
  # Returns a String of the partial URI
  #
  # source://mailgun-ruby//lib/mailgun/events/events.rb#114
  def construct_url(paging = T.unsafe(nil)); end

  # Internal: given a paging URL, extract the endpoint
  #
  # response - the endpoint for the previous/next page
  #
  # Returns a String of the partial URI if the given url follows the regular API format
  # Returns nil in other cases (e.g. when given nil, or an irrelevant url)
  #
  # source://mailgun-ruby//lib/mailgun/events/events.rb#103
  def extract_endpoint_from(url = T.unsafe(nil)); end

  # Internal: given an event response, pull and store the paging keys
  #
  # response - a Mailgun::Response object
  #
  # Return is irrelevant.
  #
  # source://mailgun-ruby//lib/mailgun/events/events.rb#89
  def extract_paging(response); end

  # Internal: Makes and processes the event request through the client
  #
  # params - optional Hash of query options
  # paging - the URL key used for previous/next requests
  #
  # Returns a Mailgun.Response object.
  #
  # source://mailgun-ruby//lib/mailgun/events/events.rb#78
  def get_events(params = T.unsafe(nil), paging = T.unsafe(nil)); end
end

# A Mailgun::MessageBuilder object is used to create a valid payload
# for the Mailgun API messages endpoint. If you prefer step by step message
# generation through your code, this class is for you.
#
# See the Github documentation for full examples.
#
# source://mailgun-ruby//lib/mailgun/messages/message_builder.rb#11
class Mailgun::MessageBuilder
  # Public: Creates a new MessageBuilder object.
  #
  # @return [MessageBuilder] a new instance of MessageBuilder
  #
  # source://mailgun-ruby//lib/mailgun/messages/message_builder.rb#16
  def initialize; end

  # Adds a series of attachments, when called upon.
  #
  # @param attachment [String|File] A file object for attaching as an attachment.
  # @param filename [String] The filename you wish the attachment to be.
  # @return [void]
  #
  # source://mailgun-ruby//lib/mailgun/messages/message_builder.rb#124
  def add_attachment(attachment, filename = T.unsafe(nil)); end

  # Add campaign IDs to message. Limit of 3 per message.
  #
  # @param campaign_id [String] A defined campaign ID to add to the message.
  # @return [void]
  #
  # source://mailgun-ruby//lib/mailgun/messages/message_builder.rb#177
  def add_campaign_id(campaign_id); end

  # Add custom parameter to the message. A custom parameter is any parameter that
  # is not yet supported by the SDK, but available at the API. Note: No validation
  # is performed. Don't forget to prefix the parameter with o, h, or v.
  #
  # @param name [string] A name for the custom parameter.
  # @param data [string] A string of data for the parameter.
  # @return [void]
  #
  # source://mailgun-ruby//lib/mailgun/messages/message_builder.rb#292
  def add_custom_parameter(name, data); end

  # Adds an inline image to the mesage object.
  #
  # @param inline_image [String|File] A file object for attaching an inline image.
  # @param filename [String] The filename you wish the inline image to be.
  # @return [void]
  #
  # source://mailgun-ruby//lib/mailgun/messages/message_builder.rb#133
  def add_inline_image(inline_image, filename = T.unsafe(nil)); end

  # Adds a specific type of recipient to the message object.
  #
  # WARNING: Setting 'h:reply-to' with add_recipient() is deprecated! Use 'reply_to' instead.
  #
  # @param recipient_type [String] The type of recipient. "to", "cc", "bcc" or "h:reply-to".
  # @param address [String] The email address of the recipient to add to the message object.
  # @param variables [Hash] A hash of the variables associated with the recipient. We recommend "first" and "last" at a minimum!
  # @return [void]
  #
  # source://mailgun-ruby//lib/mailgun/messages/message_builder.rb#33
  def add_recipient(recipient_type, address, variables = T.unsafe(nil)); end

  # Add tags to message. Limit of 3 per message.
  #
  # @param tag [String] A defined campaign ID to add to the message.
  # @return [void]
  #
  # source://mailgun-ruby//lib/mailgun/messages/message_builder.rb#188
  def add_tag(tag); end

  # Set a html body for the message object
  #
  # @param html_body [String] The html body for the email.
  # @return [void]
  #
  # source://mailgun-ruby//lib/mailgun/messages/message_builder.rb#109
  def body_html(html_body = T.unsafe(nil)); end

  # Set a text body for the message object
  #
  # @param text_body [String] The text body for the email.
  # @return [void]
  #
  # source://mailgun-ruby//lib/mailgun/messages/message_builder.rb#95
  def body_text(text_body = T.unsafe(nil)); end

  # Returns the value of attribute counters.
  #
  # source://mailgun-ruby//lib/mailgun/messages/message_builder.rb#13
  def counters; end

  # Enable Delivery delay on message. Specify an RFC2822 date, and Mailgun
  # will not deliver the message until that date/time. For conversion
  # options, see Ruby "Time". Example: "October 25, 2013 10:00PM CST" will
  # be converted to "Fri, 25 Oct 2013 22:00:00 -0600".
  #
  # @param timestamp [String] A date and time, including a timezone.
  # @return [void]
  #
  # source://mailgun-ruby//lib/mailgun/messages/message_builder.rb#235
  def deliver_at(timestamp); end

  # Turn DKIM on or off per message
  #
  # @param mode [Boolean] The boolean or string value(will fix itself)
  # @return [void]
  #
  # source://mailgun-ruby//lib/mailgun/messages/message_builder.rb#163
  def dkim(mode); end

  # Sets the from address for the message
  #
  # @param address [String] The address of the sender.
  # @param variables [Hash] A hash of the variables associated with the recipient. We recommend "first" and "last" at a minimum!
  # @return [void]
  #
  # source://mailgun-ruby//lib/mailgun/messages/message_builder.rb#54
  def from(address, vars = T.unsafe(nil)); end

  # Add custom data to the message. The data should be either a hash or JSON
  # encoded. The custom data will be added as a header to your message.
  #
  # @param name [string] A name for the custom data. (Ex. X-Mailgun-<Name of Data>: {})
  # @param data [Hash] Either a hash or JSON string.
  # @return [void]
  #
  # source://mailgun-ruby//lib/mailgun/messages/message_builder.rb#252
  def header(name, data); end

  # Adds a List-Unsubscribe for the message header.
  #
  # @param *variables [Array<String>] Any number of url or mailto
  # @return [void]
  #
  # source://mailgun-ruby//lib/mailgun/messages/message_builder.rb#141
  def list_unsubscribe(*variables); end

  # Returns the value of attribute message.
  #
  # source://mailgun-ruby//lib/mailgun/messages/message_builder.rb#13
  def message; end

  # Set the Message-Id header to a custom value. Don't forget to enclose the
  # Message-Id in angle brackets, and ensure the @domain is present. Doesn't
  # use simple or complex setters because it should not set value in an array.
  #
  # @param data [string] A string of data for the parameter. Passing nil or
  #   empty string will delete h:Message-Id key and value from @message hash.
  # @return [void]
  #
  # source://mailgun-ruby//lib/mailgun/messages/message_builder.rb#303
  def message_id(data = T.unsafe(nil)); end

  # Set the message's Reply-To address.
  #
  # Rationale: According to RFC, only one Reply-To address is allowed, so it
  # is *okay* to bypass the set_multi_simple and set reply-to directly.
  #
  # @param address [String] The email address to provide as Reply-To.
  # @param variables [Hash] A hash of variables associated with the recipient.
  # @return [void]
  #
  # source://mailgun-ruby//lib/mailgun/messages/message_builder.rb#72
  def reply_to(address, variables = T.unsafe(nil)); end

  # Depreciated: 'set_click_tracking. is deprecated. Please use 'track_clicks' instead.
  #
  # source://mailgun-ruby//lib/mailgun/messages/message_builder.rb#223
  def set_click_tracking(tracking); end

  # Deprecated: 'set_custom_data' is deprecated. Please use 'header' instead.
  #
  # source://mailgun-ruby//lib/mailgun/messages/message_builder.rb#263
  def set_custom_data(name, data); end

  # Deprecated: 'set_delivery_time' is deprecated. Please use 'deliver_at' instead.
  #
  # source://mailgun-ruby//lib/mailgun/messages/message_builder.rb#241
  def set_delivery_time(timestamp); end

  # Deprecated: 'set_dkim' is deprecated. Please use 'dkim' instead.
  #
  # source://mailgun-ruby//lib/mailgun/messages/message_builder.rb#168
  def set_dkim(mode); end

  # Deprecated: please use 'from' instead.
  #
  # source://mailgun-ruby//lib/mailgun/messages/message_builder.rb#59
  def set_from_address(address, variables = T.unsafe(nil)); end

  # Deprecated: Please use "body_html" instead.
  #
  # source://mailgun-ruby//lib/mailgun/messages/message_builder.rb#114
  def set_html_body(html_body = T.unsafe(nil)); end

  # Deprecated: 'set_message_id' is deprecated. Use 'message_id' instead.
  #
  # source://mailgun-ruby//lib/mailgun/messages/message_builder.rb#310
  def set_message_id(data = T.unsafe(nil)); end

  # Deprecated: 'set_open_tracking' is deprecated. Please use 'track_opens' instead.
  #
  # source://mailgun-ruby//lib/mailgun/messages/message_builder.rb#207
  def set_open_tracking(tracking); end

  # Deprecated: Please use "subject" instead.
  #
  # source://mailgun-ruby//lib/mailgun/messages/message_builder.rb#86
  def set_subject(subj = T.unsafe(nil)); end

  # Deprecated: 'set_test_mode' is depreciated. Please use 'test_mode' instead.
  #
  # source://mailgun-ruby//lib/mailgun/messages/message_builder.rb#154
  def set_test_mode(mode); end

  # Deprecated: Please use "body_text" instead.
  #
  # source://mailgun-ruby//lib/mailgun/messages/message_builder.rb#100
  def set_text_body(text_body = T.unsafe(nil)); end

  # Set a subject for the message object
  #
  # @param subject [String] The subject for the email.
  # @return [void]
  #
  # source://mailgun-ruby//lib/mailgun/messages/message_builder.rb#81
  def subject(subj = T.unsafe(nil)); end

  # Set name of a template stored via template API. See Templates for more information
  # https://documentation.mailgun.com/en/latest/api-templates.html
  #
  # @param tag [String] A defined template name to use. Passing nil or
  #   empty string will delete template key and value from @message hash.
  # @return [void]
  #
  # source://mailgun-ruby//lib/mailgun/messages/message_builder.rb#321
  def template(template_name = T.unsafe(nil)); end

  # Turn off or on template rendering in the text part
  # of the message in case of template sending.
  #
  # @param tracking [Boolean] Boolean true or false.
  # @return [void]
  #
  # source://mailgun-ruby//lib/mailgun/messages/message_builder.rb#343
  def template_text(mode); end

  # Set specific template version.
  #
  # @param tag [String] A defined template name to use. Passing nil or
  #   empty string will delete template key and value from @message hash.
  # @return [void]
  #
  # source://mailgun-ruby//lib/mailgun/messages/message_builder.rb#332
  def template_version(version = T.unsafe(nil)); end

  # Send a message in test mode. (The message won't really be sent to the recipient)
  #
  # @param mode [Boolean] The boolean or string value (will fix itself)
  # @return [void]
  #
  # source://mailgun-ruby//lib/mailgun/messages/message_builder.rb#149
  def test_mode(mode); end

  # Turn Click Tracking on and off, on a per message basis.
  #
  # @param mode [String] True, False, or HTML (for HTML only tracking)
  # @return [void]
  #
  # source://mailgun-ruby//lib/mailgun/messages/message_builder.rb#216
  def track_clicks(mode); end

  # Turn Open Tracking on and off, on a per message basis.
  #
  # @param tracking [Boolean] Boolean true or false.
  # @return [void]
  #
  # source://mailgun-ruby//lib/mailgun/messages/message_builder.rb#200
  def track_opens(mode); end

  # Attaches custom JSON data to the message. See the following doc page for more info.
  # https://documentation.mailgun.com/user_manual.html#attaching-data-to-messages
  #
  # @param name [String] A name for the custom variable block.
  # @param data [String|Hash] Either a string or a hash. If it is not valid JSON or
  #   can not be converted to JSON, ParameterError will be raised.
  # @return [void]
  #
  # source://mailgun-ruby//lib/mailgun/messages/message_builder.rb#275
  def variable(name, data); end

  private

  # Private: Adds a file to the message.
  #
  # Returns nothing
  #
  # @param disposition [Symbol] The type of file: :attachment or :inline
  # @param attachment [String|File] A file object for attaching as an attachment.
  # @param filename [String] The filename you wish the attachment to be.
  # @return [void]
  #
  # source://mailgun-ruby//lib/mailgun/messages/message_builder.rb#446
  def add_file(disposition, filedata, filename); end

  # Converts boolean type to string
  #
  # @param value [String] The item to convert
  # @return [void]
  #
  # source://mailgun-ruby//lib/mailgun/messages/message_builder.rb#383
  def bool_lookup(value); end

  # Private: given an object attempt to make it into JSON
  #
  # obj - an object. Hopefully a JSON string or Hash
  #
  # Returns a JSON object or raises ParameterError
  #
  # source://mailgun-ruby//lib/mailgun/messages/message_builder.rb#406
  def make_json(obj); end

  # Parses the address and gracefully handles any
  # missing parameters. The result should be something like:
  # "'First Last' <person@domain.com>"
  #
  # @param address [String] The email address to parse.
  # @param variables [Hash] A list of recipient variables.
  # @return [void]
  #
  # source://mailgun-ruby//lib/mailgun/messages/message_builder.rb#421
  def parse_address(address, vars); end

  # Sets values within the multidict, however, allows
  # duplicate values for keys.
  #
  # @param parameter [String] The message object parameter name.
  # @param value [String] The value of the parameter.
  # @return [void]
  #
  # source://mailgun-ruby//lib/mailgun/messages/message_builder.rb#375
  def set_multi_complex(parameter, value); end

  # Sets values within the multidict, however, prevents
  # duplicate values for keys.
  #
  # @param parameter [String] The message object parameter name.
  # @param value [String] The value of the parameter.
  # @return [void]
  #
  # source://mailgun-ruby//lib/mailgun/messages/message_builder.rb#365
  def set_multi_simple(parameter, value); end

  # Sets a single value in the message hash where "multidict" features are not needed.
  # Does *not* permit duplicate params.
  #
  # @param parameter [String] The message object parameter name.
  # @param value [String] The value of the parameter.
  # @return [void]
  #
  # source://mailgun-ruby//lib/mailgun/messages/message_builder.rb#355
  def set_single(parameter, value); end

  # Validates whether the input is JSON.
  #
  # @param json_ [String] The suspected JSON string.
  # @return [void]
  #
  # source://mailgun-ruby//lib/mailgun/messages/message_builder.rb#394
  def valid_json?(json_); end
end

# Public: Provides methods for creating and handling opt-in URLs,
#   particularlly for mailing lists.
#
# See: https://github.com/mailgun/mailgun-ruby/blob/master/OptInHandler.md
#
# source://mailgun-ruby//lib/mailgun/lists/opt_in_handler.rb#11
class Mailgun::OptInHandler
  class << self
    # Generates a hash that can be used to validate opt-in recipients. Encodes
    # all the necessary data in the URL.
    #
    # @param mailing_list [String] The mailing list the user should be subscribed to.
    # @param secret_app_id [String] A secret passphrase used as a constant for the hash.
    # @param recipient_address [Hash] The address of the user that should be subscribed.
    # @return [String] A url encoded URL suffix hash.
    #
    # source://mailgun-ruby//lib/mailgun/lists/opt_in_handler.rb#20
    def generate_hash(mailing_list, secret_app_id, recipient_address); end

    # Validates the hash provided from the generate_hash method.
    #
    # @param secret_app_id [String] A secret passphrase used as a constant for the hash.
    # @param unique_hash [Hash] The hash from the user. Likely via link click.
    # @return [Hash or Boolean] A hash with 'recipient_address' and 'mailing_list', if validates. Otherwise, boolean false.
    #
    # source://mailgun-ruby//lib/mailgun/lists/opt_in_handler.rb#40
    def validate_hash(secret_app_id, unique_hash); end
  end
end

# Public: Class for managing parameter errors, with a pretty name.
# Inherits from Mailgun::Error
#
# source://mailgun-ruby//lib/mailgun/exceptions/exceptions.rb#23
class Mailgun::ParameterError < ::Mailgun::Error; end

# Public: Class for managing parsing errors, with a pretty name.
# Inherits from Mailgun::Error
#
# source://mailgun-ruby//lib/mailgun/exceptions/exceptions.rb#27
class Mailgun::ParseError < ::Mailgun::Error; end

# A Mailgun::Response object is instantiated for each response generated
# by the Client request. The Response object supports deserialization of
# the JSON result. Or, if you prefer JSON or YAML formatting, call the
# method for conversion.
#
# See the Github documentation for full examples.
#
# source://mailgun-ruby//lib/mailgun/response.rb#10
class Mailgun::Response
  # @return [Response] a new instance of Response
  #
  # source://mailgun-ruby//lib/mailgun/response.rb#20
  def initialize(response); end

  # All responses have a payload and a code corresponding to http, though
  #   slightly different
  #
  # source://mailgun-ruby//lib/mailgun/response.rb#13
  def body; end

  # All responses have a payload and a code corresponding to http, though
  #   slightly different
  #
  # source://mailgun-ruby//lib/mailgun/response.rb#13
  def body=(_arg0); end

  # All responses have a payload and a code corresponding to http, though
  #   slightly different
  #
  # source://mailgun-ruby//lib/mailgun/response.rb#13
  def code; end

  # All responses have a payload and a code corresponding to http, though
  #   slightly different
  #
  # source://mailgun-ruby//lib/mailgun/response.rb#13
  def code=(_arg0); end

  # Return response as Ruby Hash
  #
  # @return [Hash] A standard Ruby Hash containing the HTTP result.
  #
  # source://mailgun-ruby//lib/mailgun/response.rb#29
  def to_h; end

  # Replace @body with Ruby Hash
  #
  # @return [Hash] A standard Ruby Hash containing the HTTP result.
  #
  # source://mailgun-ruby//lib/mailgun/response.rb#38
  def to_h!; end

  # Return response as Yaml
  #
  # @return [String] A string containing response as YAML
  #
  # source://mailgun-ruby//lib/mailgun/response.rb#47
  def to_yaml; end

  # Replace @body with YAML
  #
  # @return [String] A string containing response as YAML
  #
  # source://mailgun-ruby//lib/mailgun/response.rb#56
  def to_yaml!; end

  class << self
    # source://mailgun-ruby//lib/mailgun/response.rb#15
    def from_hash(h); end
  end
end

# The Mailgun::Suppressions object makes it easy to manage "suppressions"
# attached to an account. "Suppressions" means bounces, unsubscribes, and complaints.
#
# source://mailgun-ruby//lib/mailgun/suppressions.rb#9
class Mailgun::Suppressions
  # @param client [Mailgun::Client] API client to use for requests
  # @param domain [String] Domain name to use for the suppression endpoints.
  # @return [Suppressions] a new instance of Suppressions
  #
  # source://mailgun-ruby//lib/mailgun/suppressions.rb#13
  def initialize(client, domain); end

  # source://mailgun-ruby//lib/mailgun/suppressions.rb#51
  def create_bounce(params = T.unsafe(nil)); end

  # Creates multiple bounces on the Mailgun API.
  # If a bounce does not have a valid structure, it will be added to a list of unsendable bounces.
  # The list of unsendable bounces will be returned at the end of this operation.
  #
  # If more than 999 bounce entries are provided, the list will be split and recursive calls will be made.
  #
  # @param data [Array] Array of bounce hashes
  # @return [Response] Mailgun API response
  # @return [Array] Return values from recursive call for list split.
  #
  # source://mailgun-ruby//lib/mailgun/suppressions.rb#64
  def create_bounces(data); end

  # source://mailgun-ruby//lib/mailgun/suppressions.rb#193
  def create_complaint(params = T.unsafe(nil)); end

  # Creates multiple complaints on the Mailgun API.
  # If a complaint does not have a valid structure, it will be added to a list of unsendable complaints.
  # The list of unsendable complaints will be returned at the end of this operation.
  #
  # If more than 999 complaint entries are provided, the list will be split and recursive calls will be made.
  #
  # @param data [Array] Array of complaint hashes
  # @return [Response] Mailgun API response
  # @return [Array] Return values from recursive call for list split.
  #
  # source://mailgun-ruby//lib/mailgun/suppressions.rb#206
  def create_complaints(data); end

  # source://mailgun-ruby//lib/mailgun/suppressions.rb#124
  def create_unsubscribe(params = T.unsafe(nil)); end

  # Creates multiple unsubscribes on the Mailgun API.
  # If an unsubscribe does not have a valid structure, it will be added to a list of unsendable unsubscribes.
  # The list of unsendable unsubscribes will be returned at the end of this operation.
  #
  # If more than 999 unsubscribe entries are provided, the list will be split and recursive calls will be made.
  #
  # @param data [Array] Array of unsubscribe hashes
  # @return [Response] Mailgun API response
  # @return [Array] Return values from recursive call for list split.
  #
  # source://mailgun-ruby//lib/mailgun/suppressions.rb#137
  def create_unsubscribes(data); end

  # source://mailgun-ruby//lib/mailgun/suppressions.rb#106
  def delete_all_bounces; end

  # source://mailgun-ruby//lib/mailgun/suppressions.rb#102
  def delete_bounce(address); end

  # source://mailgun-ruby//lib/mailgun/suppressions.rb#241
  def delete_complaint(address); end

  # source://mailgun-ruby//lib/mailgun/suppressions.rb#175
  def delete_unsubscribe(address, params = T.unsafe(nil)); end

  # source://mailgun-ruby//lib/mailgun/suppressions.rb#47
  def get_bounce(address); end

  # source://mailgun-ruby//lib/mailgun/suppressions.rb#189
  def get_complaint(address); end

  # source://mailgun-ruby//lib/mailgun/suppressions.rb#120
  def get_unsubscribe(address); end

  # Bounces Endpoint (/v3/:domain/bounces)
  #
  # source://mailgun-ruby//lib/mailgun/suppressions.rb#41
  def list_bounces(params = T.unsafe(nil)); end

  # Complaints Endpoint (/v3/:domain/complaints)
  #
  # source://mailgun-ruby//lib/mailgun/suppressions.rb#183
  def list_complaints(params = T.unsafe(nil)); end

  # Unsubscribes Endpoint (/v3/:domain/unsubscribes)
  #
  # source://mailgun-ruby//lib/mailgun/suppressions.rb#114
  def list_unsubscribes(params = T.unsafe(nil)); end

  # Paging operations
  #
  # source://mailgun-ruby//lib/mailgun/suppressions.rb#25
  def next; end

  # source://mailgun-ruby//lib/mailgun/suppressions.rb#31
  def prev; end

  private

  # source://mailgun-ruby//lib/mailgun/suppressions.rb#251
  def extract_paging(response); end

  # source://mailgun-ruby//lib/mailgun/suppressions.rb#247
  def get_from_paging(uri, params = T.unsafe(nil)); end
end

# source://mailgun-ruby//lib/mailgun/version.rb#3
Mailgun::VERSION = T.let(T.unsafe(nil), String)

# A Mailgun::Webhooks object is a simple CRUD interface to Mailgun Webhooks.
# Uses Mailgun
#
# source://mailgun-ruby//lib/mailgun/webhooks/webhooks.rb#5
class Mailgun::Webhooks
  # Public creates a new Mailgun::Webhooks instance.
  #   Defaults to Mailgun::Client
  #
  # @return [Webhooks] a new instance of Webhooks
  #
  # source://mailgun-ruby//lib/mailgun/webhooks/webhooks.rb#9
  def initialize(client = T.unsafe(nil)); end

  # Public: Add webhook
  #
  # domain - A String of the domain name (ex. domain.com)
  # action - A String of the action to create a webhook for
  # url    - A String of the url of the webhook
  #
  # Returns a Boolean of whether the webhook was created
  #
  # source://mailgun-ruby//lib/mailgun/webhooks/webhooks.rb#47
  def add(domain, action, url = T.unsafe(nil)); end

  # Public: Sets all webhooks to the same URL
  #
  # domain - A String of the domain name
  # url    - A String of the url to set all webhooks to
  #
  # Returns true or false
  #
  # source://mailgun-ruby//lib/mailgun/webhooks/webhooks.rb#60
  def add_all_webhooks(domain, url = T.unsafe(nil)); end

  # Public: Add webhook
  #
  # domain - A String of the domain name (ex. domain.com)
  # action - A String of the action to create a webhook for
  # url    - A String of the url of the webhook
  #
  # Returns a Boolean of whether the webhook was created
  #
  # source://mailgun-ruby//lib/mailgun/webhooks/webhooks.rb#47
  def add_webhook(domain, action, url = T.unsafe(nil)); end

  # Public: Add webhook
  #
  # domain - A String of the domain name (ex. domain.com)
  # action - A String of the action to create a webhook for
  # url    - A String of the url of the webhook
  #
  # Returns a Boolean of whether the webhook was created
  #
  # source://mailgun-ruby//lib/mailgun/webhooks/webhooks.rb#47
  def create(domain, action, url = T.unsafe(nil)); end

  # Public: Sets all webhooks to the same URL
  #
  # domain - A String of the domain name
  # url    - A String of the url to set all webhooks to
  #
  # Returns true or false
  #
  # source://mailgun-ruby//lib/mailgun/webhooks/webhooks.rb#60
  def create_all(domain, url = T.unsafe(nil)); end

  # Public: Delete a specific webhook
  #
  # domain - The required String of domain name
  # action - The required String of the webhook action to delete
  #
  # Returns a Boolean of the success
  #
  # source://mailgun-ruby//lib/mailgun/webhooks/webhooks.rb#76
  def delete(domain, action); end

  # Public: Delete all webhooks for a domain
  #
  # domain - A required String of the domain to remove all webhooks for
  #
  # Returns a Boolean on the success
  #
  # source://mailgun-ruby//lib/mailgun/webhooks/webhooks.rb#91
  def delete_all(domain); end

  # Public: Delete all webhooks for a domain
  #
  # domain - A required String of the domain to remove all webhooks for
  #
  # Returns a Boolean on the success
  #
  # source://mailgun-ruby//lib/mailgun/webhooks/webhooks.rb#91
  def delete_all_webooks(domain); end

  # Public: Delete a specific webhook
  #
  # domain - The required String of domain name
  # action - The required String of the webhook action to delete
  #
  # Returns a Boolean of the success
  #
  # source://mailgun-ruby//lib/mailgun/webhooks/webhooks.rb#76
  def delete_webhook(domain, action); end

  # Public: Get webook information for a specific action
  #
  # domain - a String of Domain name to find a webhook url for
  # action - a String identifying the webhook to get the URL for
  #
  # Returns a String of the url for the identified webhook or an
  #   empty String if one is not set
  #
  # source://mailgun-ruby//lib/mailgun/webhooks/webhooks.rb#32
  def get_webhook_url(domain, action); end

  # Public: Get Webhooks
  #
  # domain  - a string the domain name to retrieve webhooks for
  # options - a Hash of options
  #
  # Returns a Hash of the list of domains or nil
  #
  # source://mailgun-ruby//lib/mailgun/webhooks/webhooks.rb#19
  def get_webhooks(domain, options = T.unsafe(nil)); end

  # Public: Get webook information for a specific action
  #
  # domain - a String of Domain name to find a webhook url for
  # action - a String identifying the webhook to get the URL for
  #
  # Returns a String of the url for the identified webhook or an
  #   empty String if one is not set
  #
  # source://mailgun-ruby//lib/mailgun/webhooks/webhooks.rb#32
  def info(domain, action); end

  # Public: Get Webhooks
  #
  # domain  - a string the domain name to retrieve webhooks for
  # options - a Hash of options
  #
  # Returns a Hash of the list of domains or nil
  #
  # source://mailgun-ruby//lib/mailgun/webhooks/webhooks.rb#19
  def list(domain, options = T.unsafe(nil)); end

  # Public: Delete a specific webhook
  #
  # domain - The required String of domain name
  # action - The required String of the webhook action to delete
  #
  # Returns a Boolean of the success
  #
  # source://mailgun-ruby//lib/mailgun/webhooks/webhooks.rb#76
  def remove(domain, action); end

  # Public: Delete all webhooks for a domain
  #
  # domain - A required String of the domain to remove all webhooks for
  #
  # Returns a Boolean on the success
  #
  # source://mailgun-ruby//lib/mailgun/webhooks/webhooks.rb#91
  def remove_all(domain); end
end

# source://mailgun-ruby//lib/railgun/errors.rb#1
module Railgun
  private

  # Acts on a Rails/ActionMailer message object and uses Mailgun::MessageBuilder
  # to construct a new message.
  #
  # @param mail [Mail::Message] message to transform
  #
  # source://mailgun-ruby//lib/railgun/mailer.rb#162
  def build_message_object(mail); end

  # Returns the decoded HTML body from the Mail::Message object if available,
  # otherwise nil.
  #
  # @param mail [Mail::Message] message to transform
  # @return [String]
  #
  # source://mailgun-ruby//lib/railgun/mailer.rb#208
  def extract_body_html(mail); end

  # Returns the decoded text body from the Mail::Message object if it is available,
  # otherwise nil.
  #
  # @param mail [Mail::Message] message to transform
  # @return [String]
  #
  # source://mailgun-ruby//lib/railgun/mailer.rb#222
  def extract_body_text(mail); end

  # Returns the mail object from the Mail::Message object if html part exists,
  # (decomposing multipart into individual format if necessary)
  # otherwise nil.
  #
  # @param mail [Mail::Message] message to transform
  # @return [Mail::Message] mail message with its content-type = text/html
  #
  # source://mailgun-ruby//lib/railgun/mailer.rb#249
  def retrieve_html_part(mail); end

  # Returns the mail object from the Mail::Message object if text part exists,
  # (decomposing multipart into individual format if necessary)
  # otherwise nil.
  #
  # @param mail [Mail::Message] message to transform
  # @return [Mail::Message] mail message with its content-type = text/plain
  #
  # source://mailgun-ruby//lib/railgun/mailer.rb#237
  def retrieve_text_part(mail); end

  # Performs a series of transformations on the `mailgun*` attributes.
  # After prefixing them with the proper option type, they are added to
  # the message hash where they will then be sent to the API as JSON.
  #
  # It is important to note that headers set in `mailgun_headers` on the message
  # WILL overwrite headers set via `mail.headers()`.
  #
  # @param mail [Mail::Message] message to transform
  # @return [Hash] transformed message hash
  #
  # source://mailgun-ruby//lib/railgun/mailer.rb#89
  def transform_for_mailgun(mail); end

  class << self
    # Acts on a Rails/ActionMailer message object and uses Mailgun::MessageBuilder
    # to construct a new message.
    #
    # @param mail [Mail::Message] message to transform
    #
    # source://mailgun-ruby//lib/railgun/mailer.rb#162
    def build_message_object(mail); end

    # Returns the decoded HTML body from the Mail::Message object if available,
    # otherwise nil.
    #
    # @param mail [Mail::Message] message to transform
    # @return [String]
    #
    # source://mailgun-ruby//lib/railgun/mailer.rb#208
    def extract_body_html(mail); end

    # Returns the decoded text body from the Mail::Message object if it is available,
    # otherwise nil.
    #
    # @param mail [Mail::Message] message to transform
    # @return [String]
    #
    # source://mailgun-ruby//lib/railgun/mailer.rb#222
    def extract_body_text(mail); end

    # Returns the mail object from the Mail::Message object if html part exists,
    # (decomposing multipart into individual format if necessary)
    # otherwise nil.
    #
    # @param mail [Mail::Message] message to transform
    # @return [Mail::Message] mail message with its content-type = text/html
    #
    # source://mailgun-ruby//lib/railgun/mailer.rb#249
    def retrieve_html_part(mail); end

    # Returns the mail object from the Mail::Message object if text part exists,
    # (decomposing multipart into individual format if necessary)
    # otherwise nil.
    #
    # @param mail [Mail::Message] message to transform
    # @return [Mail::Message] mail message with its content-type = text/plain
    #
    # source://mailgun-ruby//lib/railgun/mailer.rb#237
    def retrieve_text_part(mail); end

    # Performs a series of transformations on the `mailgun*` attributes.
    # After prefixing them with the proper option type, they are added to
    # the message hash where they will then be sent to the API as JSON.
    #
    # It is important to note that headers set in `mailgun_headers` on the message
    # WILL overwrite headers set via `mail.headers()`.
    #
    # @param mail [Mail::Message] message to transform
    # @return [Hash] transformed message hash
    #
    # source://mailgun-ruby//lib/railgun/mailer.rb#89
    def transform_for_mailgun(mail); end
  end
end

# source://mailgun-ruby//lib/railgun/attachment.rb#3
class Railgun::Attachment < ::StringIO
  # @return [Attachment] a new instance of Attachment
  #
  # source://mailgun-ruby//lib/railgun/attachment.rb#8
  def initialize(attachment, *args); end

  # source://mailgun-ruby//lib/railgun/attachment.rb#43
  def attach_to_message!(mb); end

  # Returns the value of attribute content_type.
  #
  # source://mailgun-ruby//lib/railgun/attachment.rb#5
  def content_type; end

  # Returns the value of attribute filename.
  #
  # source://mailgun-ruby//lib/railgun/attachment.rb#5
  def filename; end

  # @return [Boolean]
  #
  # source://mailgun-ruby//lib/railgun/attachment.rb#31
  def inline?; end

  # source://mailgun-ruby//lib/railgun/attachment.rb#35
  def is_original_filename; end

  # Returns the value of attribute original_filename.
  #
  # source://mailgun-ruby//lib/railgun/attachment.rb#5
  def original_filename; end

  # Returns the value of attribute overwritten_filename.
  #
  # source://mailgun-ruby//lib/railgun/attachment.rb#5
  def overwritten_filename; end

  # Returns the value of attribute path.
  #
  # source://mailgun-ruby//lib/railgun/attachment.rb#5
  def path; end

  # source://mailgun-ruby//lib/railgun/attachment.rb#39
  def source_filename; end
end

# source://mailgun-ruby//lib/railgun/errors.rb#14
class Railgun::ConfigurationError < ::Railgun::Error; end

# source://mailgun-ruby//lib/railgun/errors.rb#3
class Railgun::Error < ::StandardError
  # @return [Error] a new instance of Error
  #
  # source://mailgun-ruby//lib/railgun/errors.rb#7
  def initialize(message = T.unsafe(nil), object = T.unsafe(nil)); end

  # Returns the value of attribute object.
  #
  # source://mailgun-ruby//lib/railgun/errors.rb#5
  def object; end
end

# source://mailgun-ruby//lib/railgun/errors.rb#17
class Railgun::InternalError < ::Railgun::Error
  # @return [InternalError] a new instance of InternalError
  #
  # source://mailgun-ruby//lib/railgun/errors.rb#21
  def initialize(source_exc, message = T.unsafe(nil), object = T.unsafe(nil)); end

  # Returns the value of attribute source_exception.
  #
  # source://mailgun-ruby//lib/railgun/errors.rb#19
  def source_exception; end
end

# Railgun::Mailer is an ActionMailer provider for sending mail through
# Mailgun.
#
# source://mailgun-ruby//lib/railgun/mailer.rb#11
class Railgun::Mailer
  # Initialize the Railgun mailer.
  #
  # @param config [Hash] Hash of config values, typically from `app_config.action_mailer.mailgun_config`
  # @return [Mailer] a new instance of Mailer
  #
  # source://mailgun-ruby//lib/railgun/mailer.rb#23
  def initialize(config); end

  # [Hash] config ->
  #   Requires *at least* `api_key` and `domain` keys.
  #
  # source://mailgun-ruby//lib/railgun/mailer.rb#18
  def config; end

  # [Hash] config ->
  #   Requires *at least* `api_key` and `domain` keys.
  #
  # source://mailgun-ruby//lib/railgun/mailer.rb#18
  def config=(_arg0); end

  # source://mailgun-ruby//lib/railgun/mailer.rb#49
  def deliver!(mail); end

  # [Hash] config ->
  #   Requires *at least* `api_key` and `domain` keys.
  #
  # source://mailgun-ruby//lib/railgun/mailer.rb#18
  def domain; end

  # [Hash] config ->
  #   Requires *at least* `api_key` and `domain` keys.
  #
  # source://mailgun-ruby//lib/railgun/mailer.rb#18
  def domain=(_arg0); end

  # source://mailgun-ruby//lib/railgun/mailer.rb#63
  def mailgun_client; end

  # [Hash] config ->
  #   Requires *at least* `api_key` and `domain` keys.
  #
  # source://mailgun-ruby//lib/railgun/mailer.rb#18
  def settings; end

  # [Hash] config ->
  #   Requires *at least* `api_key` and `domain` keys.
  #
  # source://mailgun-ruby//lib/railgun/mailer.rb#18
  def settings=(_arg0); end

  private

  # Set @mg_domain from mail[:domain] header if present, then remove it to prevent being sent.
  #
  # source://mailgun-ruby//lib/railgun/mailer.rb#70
  def set_mg_domain(mail); end
end

# List of the headers that will be ignored when copying headers from `mail.header_fields`
#
# source://mailgun-ruby//lib/railgun/mailer.rb#14
Railgun::Mailer::IGNORED_HEADERS = T.let(T.unsafe(nil), Array)

# source://mailgun-ruby//lib/railgun/railtie.rb#4
class Railgun::Railtie < ::Rails::Railtie; end
