# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `paper_trail-globalid` gem.
# Please instead update this file by running `bin/tapioca gem paper_trail-globalid`.

# An ActiveRecord extension that tracks changes to your models, for auditing or
# versioning.
module PaperTrail
  extend ::PaperTrail::Cleaner
  extend ::PaperTrailGlobalid::PaperTrail

  class << self
    # Returns PaperTrail's global configuration object, a singleton. These
    # settings affect all threads.
    #
    # @api private
    # @yield [@config]
    def config; end

    # Returns PaperTrail's global configuration object, a singleton. These
    # settings affect all threads.
    #
    # @api private
    # @yield [@config]
    def configure; end

    # Switches PaperTrail on or off, for all threads.
    #
    # @api public
    def enabled=(value); end

    # Returns `true` if PaperTrail is on, `false` otherwise. This is the
    # on/off switch that affects all threads. Enabled by default.
    #
    # @api public
    # @return [Boolean]
    def enabled?; end

    # Returns PaperTrail's `::Gem::Version`, convenient for comparisons. This is
    # recommended over `::PaperTrail::VERSION::STRING`.
    #
    # Added in 7.0.0
    #
    # @api public
    def gem_version; end

    # Set variables for the current request, eg. whodunnit.
    #
    # All request-level variables are now managed here, as of PT 9. Having the
    # word "request" right there in your application code will remind you that
    # these variables only affect the current request, not all threads.
    #
    # Given a block, temporarily sets the given `options`, executes the block,
    # and returns the value of the block.
    #
    # Without a block, this currently just returns `PaperTrail::Request`.
    # However, please do not use `PaperTrail::Request` directly. Currently,
    # `Request` is a `Module`, but in the future it is quite possible we may
    # make it a `Class`. If we make such a choice, we will not provide any
    # warning and will not treat it as a breaking change. You've been warned :)
    #
    # @api public
    def request(options = T.unsafe(nil), &block); end

    # Get the PaperTrail serializer used by all threads.
    #
    # @api public
    def serializer; end

    # Set the PaperTrail serializer. This setting affects all threads.
    #
    # @api public
    def serializer=(value); end

    # Set the field which records when a version was created.
    #
    # @api public
    # @raise [Error]
    def timestamp_field=(_field_name); end

    def version; end
  end
end

PaperTrail::E_TIMESTAMP_FIELD_CONFIG = T.let(T.unsafe(nil), String)
PaperTrail::RAILS_GTE_7_0 = T.let(T.unsafe(nil), TrueClass)

# Originally, PaperTrail did not provide this module, and all of this
# functionality was in `PaperTrail::Version`. That model still exists (and is
# used by most apps) but by moving the functionality to this module, people
# can include this concern instead of sub-classing the `Version` model.
module PaperTrail::VersionConcern
  include ::PaperTrailGlobalid::VersionConcern
  extend ::ActiveSupport::Concern

  mixes_in_class_methods ::PaperTrail::VersionConcern::ClassMethods

  # Returns what changed in this version of the item.
  # `ActiveModel::Dirty#changes`. returns `nil` if your `versions` table does
  # not have an `object_changes` text column.
  def changeset; end

  # Returns an integer representing the chronological position of the
  # version among its siblings. The "create" event, for example, has an index
  # of 0.
  #
  # @api public
  def index; end

  def next; end

  # @api private
  def object_deserialized; end

  # Returns who put the item into the state stored in this version.
  def paper_trail_originator; end

  def previous; end

  # Restore the item from this version.
  #
  # Options:
  #
  # - :mark_for_destruction
  #   - `true` - Mark the has_one/has_many associations that did not exist in
  #     the reified version for destruction, instead of removing them.
  #   - `false` - Default. Useful for persisting the reified version.
  # - :dup
  #   - `false` - Default.
  #   - `true` - Always create a new object instance. Useful for
  #     comparing two versions of the same object.
  # - :unversioned_attributes
  #   - `:nil` - Default. Attributes undefined in version record are set to
  #     nil in reified record.
  #   - `:preserve` - Attributes undefined in version record are not modified.
  def reify(options = T.unsafe(nil)); end

  # Returns who changed the item from the state it had in this version. This
  # is an alias for `whodunnit`.
  def terminator; end

  # Returns who changed the item from the state it had in this version. This
  # is an alias for `whodunnit`.
  def version_author; end

  private

  # @return [Boolean]
  def base_class_limit_option?(klass); end

  # Enforces the `version_limit`, if set. Default: no limit.
  #
  # @api private
  def enforce_version_limit!; end

  # @return [Boolean]
  def limit_option?(klass); end

  # @api private
  def load_changeset; end

  # If the `object_changes` column is a Postgres JSON column, then
  # ActiveRecord will deserialize it for us. Otherwise, it's a string column
  # and we must deserialize it ourselves.
  #
  # @api private
  def object_changes_deserialized; end

  # @api private
  def sibling_versions; end

  # See docs section 2.e. Limiting the Number of Versions Created.
  # The version limit can be global or per-model.
  #
  # @api private
  def version_limit; end
end

module PaperTrailGlobalid; end

module PaperTrailGlobalid::PaperTrail
  def actor; end
  def whodunnit=(value); end
end

PaperTrailGlobalid::VERSION = T.let(T.unsafe(nil), String)

module PaperTrailGlobalid::VersionConcern
  # Returns an object which was responsible for a change
  # you need to store global_id to whodunnit field to make this method return the object(who was responsible)
  # for example, whodunnit => "gid://app/Order/1" then
  # whodunnit_user will return Order.find_by(id: 1) in application scope.
  def actor; end

  def whodunnit=(value); end
end
