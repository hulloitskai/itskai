# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `google_calendar` gem.
# Please instead update this file by running `bin/tapioca gem google_calendar`.

# source://google_calendar//lib/google_calendar.rb#1
module Google; end

# 500: Backend Error
#
# An unexpected error occurred while processing the request.
#
# source://google_calendar//lib/google/errors.rb#70
class Google::BackendError < ::StandardError; end

# Calendar is the main object you use to interact with events.
# use it to find, create, update and delete them.
#
# source://google_calendar//lib/google/calendar.rb#7
class Google::Calendar
  # Setup and connect to the specified Google Calendar.
  #  the +params+ paramater accepts
  # * :client_id => the client ID that you received from Google after registering your application with them (https://console.developers.google.com/). REQUIRED
  # * :client_secret => the client secret you received from Google after registering your application with them. REQUIRED
  # * :redirect_url => the url where your users will be redirected to after they have successfully permitted access to their calendars. Use 'urn:ietf:wg:oauth:2.0:oob' if you are using an 'application'" REQUIRED
  # * :calendar => the id of the calendar you would like to work with (see Readme.rdoc for instructions on how to find yours). REQUIRED
  # * :refresh_token => if a user has already given you access to their calendars, you can specify their refresh token here and you will be 'logged on' automatically (i.e. they don't need to authorize access again). OPTIONAL
  #
  # See Readme.rdoc or readme_code.rb for an explication on the OAuth2 authorization process.
  #
  # ==== Example
  # Google::Calendar.new(:client_id => YOUR_CLIENT_ID,
  #                      :client_secret => YOUR_SECRET,
  #                      :calendar => YOUR_CALENDAR_ID,
  #                      :redirect_url => "urn:ietf:wg:oauth:2.0:oob" # this is what Google uses for 'applications'
  #                     )
  #
  # @return [Calendar] a new instance of Calendar
  #
  # source://google_calendar//lib/google/calendar.rb#29
  def initialize(params = T.unsafe(nil), connection = T.unsafe(nil)); end

  # The current access token.  Used during a session, typically expires in a hour.
  #
  # source://google_calendar//lib/google/calendar.rb#162
  def access_token; end

  # The single use auth code that google uses during the auth process.
  #
  # source://google_calendar//lib/google/calendar.rb#155
  def auth_code; end

  # The URL you need to send a user in order to let them grant you access to their calendars.
  #
  # source://google_calendar//lib/google/calendar.rb#148
  def authorize_url; end

  # Returns the value of attribute connection.
  #
  # source://google_calendar//lib/google/calendar.rb#9
  def connection; end

  # Creates a new event and immediately saves it.
  # Returns the event
  #
  # ==== Examples
  #   # Use a block
  #   cal.create_event do |e|
  #     e.title = "A New Event"
  #     e.where = "Room 101"
  #   end
  #
  #   # Don't use a block (need to call save manually)
  #   event  = cal.create_event
  #   event.title = "A New Event"
  #   event.where = "Room 101"
  #   event.save
  #
  # source://google_calendar//lib/google/calendar.rb#364
  def create_event(&blk); end

  # Deletes the specified event.
  # This is a callback used by the Event class.
  #
  # source://google_calendar//lib/google/calendar.rb#411
  def delete_event(event); end

  # Returns the value of attribute description.
  #
  # source://google_calendar//lib/google/calendar.rb#9
  def description; end

  # Destroy a Google Calendar.
  #
  # See Readme.rdoc or readme_code.rb for an explication on the OAuth2 authorization process.
  #
  # ==== Example
  # google_calendar_object.destroy
  #
  # source://google_calendar//lib/google/calendar.rb#141
  def destroy; end

  # Find all of the events associated with this calendar.
  #  Returns:
  #   an empty array if nothing found.
  #   an array with one element if only one found.
  #   an array of events if many found.
  #
  # source://google_calendar//lib/google/calendar.rb#221
  def events; end

  # Attempts to find the event specified by the id
  #  Returns:
  #   an empty array if nothing found.
  #   an array with one element if only one found.
  #   an array of events if many found.
  #
  # source://google_calendar//lib/google/calendar.rb#342
  def find_event_by_id(id); end

  # This is equivalent to running a search in the Google calendar web application.
  # Google does not provide a way to specify what attributes you would like to
  # search (i.e. title), by default it searches everything.
  # If you would like to find specific attribute value (i.e. title=Picnic), run a query
  # and parse the results.
  #
  # Note that it is not possible to query the extended properties using queries.
  # If you need to do so, use the alternate methods find_events_by_extended_property
  # and find_events_by_extended_property_in_range
  #
  #  Returns:
  #   an empty array if nothing found.
  #   an array with one element if only one found.
  #   an array of events if many found.
  #
  # source://google_calendar//lib/google/calendar.rb#241
  def find_events(query); end

  # Find all events that match at least one of the specified extended properties.
  #
  # the +extended_properties+ parameter is set up the same way that it is configured when creating an event
  # for example, providing the following hash { 'shared' => {'p1' => 'v1', 'p2' => v2} } will return the list of events
  # that contain either v1 for shared extended property p1 or v2 for p2.
  #
  # the +options+ parameter accepts
  # :max_results => the maximum number of results to return defaults to 25 the largest number Google accepts is 2500
  # :order_by => how you would like the results ordered, can be either 'startTime' or 'updated'. Defaults to 'startTime'. Note: it must be 'updated' if expand_recurring_events is set to false.
  # :expand_recurring_events => When set to true each instance of a recurring event is returned. Defaults to true.
  #
  #  Returns:
  #   an empty array if nothing found.
  #   an array with one element if only one found.
  #   an array of events if many found.
  #
  # source://google_calendar//lib/google/calendar.rb#303
  def find_events_by_extended_properties(extended_properties, options = T.unsafe(nil)); end

  # Find all events that match at least one of the specified extended properties within a given time frame.
  # The lower bound is inclusive, whereas the upper bound is exclusive.
  # Events that overlap the range are included.
  #
  # the +extended_properties+ parameter is set up the same way that it is configured when creating an event
  # for example, providing the following hash { 'shared' => {'p1' => 'v1', 'p2' => v2} } will return the list of events
  # that contain either v1 for shared extended property p1 or v2 for p2.
  #
  # the +options+ parameter accepts
  # :max_results => the maximum number of results to return defaults to 25 the largest number Google accepts is 2500
  # :order_by => how you would like the results ordered, can be either 'startTime' or 'updated'. Defaults to 'startTime'. Note: it must be 'updated' if expand_recurring_events is set to false.
  # :expand_recurring_events => When set to true each instance of a recurring event is returned. Defaults to true.
  #
  #  Returns:
  #   an empty array if nothing found.
  #   an array with one element if only one found.
  #   an array of events if many found.
  #
  # source://google_calendar//lib/google/calendar.rb#327
  def find_events_by_extended_properties_in_range(extended_properties, start_min, start_max, options = T.unsafe(nil)); end

  # Find all of the events associated with this calendar that start in the given time frame.
  # The lower bound is inclusive, whereas the upper bound is exclusive.
  # Events that overlap the range are included.
  #
  # the +options+ parameter accepts
  # :max_results => the maximum number of results to return defaults to 25 the largest number Google accepts is 2500
  # :order_by => how you would like the results ordered, can be either 'startTime' or 'updated'. Defaults to 'startTime'. Note: it must be 'updated' if expand_recurring_events is set to false.
  # :expand_recurring_events => When set to true each instance of a recurring event is returned. Defaults to true.
  #
  #  Returns:
  #   an empty array if nothing found.
  #   an array with one element if only one found.
  #   an array of events if many found.
  #
  # source://google_calendar//lib/google/calendar.rb#260
  def find_events_in_range(start_min, start_max, options = T.unsafe(nil)); end

  # Find all events that are occurring at the time the method is run or later.
  #
  # the +options+ parameter accepts
  # :max_results => the maximum number of results to return defaults to 25 the largest number Google accepts is 2500
  # :order_by => how you would like the results ordered, can be either 'startTime' or 'updated'. Defaults to 'startTime'. Note: it must be 'updated' if expand_recurring_events is set to false.
  # :expand_recurring_events => When set to true each instance of a recurring event is returned. Defaults to true.
  #
  #  Returns:
  #   an empty array if nothing found.
  #   an array with one element if only one found.
  #   an array of events if many found.
  #
  # source://google_calendar//lib/google/calendar.rb#280
  def find_future_events(options = T.unsafe(nil)); end

  # Looks for the specified event id.
  # If it is found it, updates it's vales and returns it.
  # If the event is no longer on the server it creates a new one with the specified values.
  # Works like the create_event method.
  #
  # source://google_calendar//lib/google/calendar.rb#374
  def find_or_create_event_by_id(id, &blk); end

  # Returns the value of attribute id.
  #
  # source://google_calendar//lib/google/calendar.rb#9
  def id; end

  # Returns the value of attribute location.
  #
  # source://google_calendar//lib/google/calendar.rb#9
  def location; end

  # Convenience method used to streamline the process of logging in with a auth code.
  #
  # source://google_calendar//lib/google/calendar.rb#176
  def login_with_auth_code(auth_code); end

  # Convenience method used to streamline the process of logging in with a refresh token.
  #
  # source://google_calendar//lib/google/calendar.rb#183
  def login_with_refresh_token(refresh_token); end

  # The refresh token is used to obtain a new access token.  It remains valid until a user revokes access.
  #
  # source://google_calendar//lib/google/calendar.rb#169
  def refresh_token; end

  # Get an existing calender.
  #  Returns:
  #   the calendar that was requested.
  #
  # source://google_calendar//lib/google/calendar.rb#202
  def retrieve_calendar; end

  # Save a new calender.
  #  Returns:
  #   the calendar that was saved.
  #
  # source://google_calendar//lib/google/calendar.rb#192
  def save; end

  # Saves the specified event.
  # This is a callback used by the Event class.
  #
  # source://google_calendar//lib/google/calendar.rb#392
  def save_event(event); end

  # Returns the value of attribute summary.
  #
  # source://google_calendar//lib/google/calendar.rb#9
  def summary; end

  # Returns the value of attribute time_zone.
  #
  # source://google_calendar//lib/google/calendar.rb#9
  def time_zone; end

  # Connect and update a Google Calendar.
  #  the +params+ paramater accepts
  # * :summary => title of the calendar being created. OPTIONAL
  # * :location => geographic location of the calendar as free-form text. OPTIONAL
  # * :time_zone => the time zone of the calendar. (Formatted as an IANA Time Zone Database name, e.g. "Europe/Zurich".) OPTIONAL
  # * :description => description of the calendar. OPTIONAL
  # * :refresh_token => if a user has already given you access to their calendars, you can specify their refresh token here and you will be 'logged on' automatically (i.e. they don't need to authorize access again). OPTIONAL
  #
  # See Readme.rdoc or readme_code.rb for an explication on the OAuth2 authorization process.
  #
  # ==== Example
  # google_calendar_object.update(
  #                               :summary => 'Test Calendar',
  #                               :location => 'Somewhere',
  #                               :description => 'Test Calendar Description',
  #                               :time_zone => 'Europe/Zurich',
  #                              )
  #
  # source://google_calendar//lib/google/calendar.rb#112
  def update(params = T.unsafe(nil)); end

  protected

  # Utility method to centralize time encoding.
  #
  # source://google_calendar//lib/google/calendar.rb#459
  def encode_time(time); end

  # Utility method used to centralize event lookup.
  #
  # source://google_calendar//lib/google/calendar.rb#466
  def event_lookup(query_string = T.unsafe(nil)); end

  # Utility method used to centralize the parsing of extended query parameters.
  #
  # source://google_calendar//lib/google/calendar.rb#447
  def parse_extended_properties(extended_properties); end

  # Utility method used to centralize the parsing of common query parameters.
  #
  # source://google_calendar//lib/google/calendar.rb#433
  def parse_options(options); end

  # Wraps the `send` method. Send a calendar related request to Google.
  #
  # source://google_calendar//lib/google/calendar.rb#494
  def send_calendar_request(path_and_query_string, method, content = T.unsafe(nil)); end

  # Wraps the `send` method. Send an event related request to Google.
  #
  # source://google_calendar//lib/google/calendar.rb#501
  def send_events_request(path_and_query_string, method, content = T.unsafe(nil)); end

  # Utility method used to centralize event setup
  #
  # source://google_calendar//lib/google/calendar.rb#482
  def setup_event(event); end

  # Set the ID after google assigns it (only necessary when we are creating a new event)
  #
  # source://google_calendar//lib/google/calendar.rb#421
  def update_after_save(response); end

  class << self
    # Setup, connect and create a Google Calendar.
    #  the +params+ paramater accepts
    # * :client_id => the client ID that you received from Google after registering your application with them (https://console.developers.google.com/). REQUIRED
    # * :client_secret => the client secret you received from Google after registering your application with them. REQUIRED
    # * :redirect_url => the url where your users will be redirected to after they have successfully permitted access to their calendars. Use 'urn:ietf:wg:oauth:2.0:oob' if you are using an 'application'" REQUIRED
    # * :summary => title of the calendar being created. OPTIONAL
    # * :location => geographic location of the calendar as free-form text. OPTIONAL
    # * :time_zone => the time zone of the calendar. (Formatted as an IANA Time Zone Database name, e.g. "Europe/Zurich".) OPTIONAL
    # * :description => description of the calendar. OPTIONAL
    # * :refresh_token => if a user has already given you access to their calendars, you can specify their refresh token here and you will be 'logged on' automatically (i.e. they don't need to authorize access again). OPTIONAL
    #
    # See Readme.rdoc or readme_code.rb for an explication on the OAuth2 authorization process.
    #
    # ==== Example
    # Google::Calendar.create(
    #                         :client_id => YOUR_CLIENT_ID,
    #                         :client_secret => YOUR_SECRET,
    #                         :summary => 'Test Calendar',
    #                         :location => 'Somewhere',
    #                         :description => 'Test Calendar Description',
    #                         :time_zone => 'Europe/Zurich',
    #                         :redirect_url => "urn:ietf:wg:oauth:2.0:oob" # this is what Google uses for 'applications'
    #                        )
    #
    # source://google_calendar//lib/google/calendar.rb#59
    def create(params = T.unsafe(nil), connection = T.unsafe(nil)); end

    # Connect and retrieve a Google Calendar.
    #  the +params+ paramater accepts
    # * :client_id => the client ID that you received from Google after registering your application with them (https://console.developers.google.com/). REQUIRED
    # * :client_secret => the client secret you received from Google after registering your application with them. REQUIRED
    # * :redirect_url => the url where your users will be redirected to after they have successfully permitted access to their calendars. Use 'urn:ietf:wg:oauth:2.0:oob' if you are using an 'application'" REQUIRED
    # * :calendar => the id of the calendar you would like to work with (see Readme.rdoc for instructions on how to find yours). REQUIRED
    # * :refresh_token => if a user has already given you access to their calendars, you can specify their refresh token here and you will be 'logged on' automatically (i.e. they don't need to authorize access again). OPTIONAL
    #
    # See Readme.rdoc or readme_code.rb for an explication on the OAuth2 authorization process.
    #
    # ==== Example
    # Google::Calendar.get(
    #                      :client_id => YOUR_CLIENT_ID,
    #                      :client_secret => YOUR_SECRET,
    #                      :calendar => YOUR_CALENDAR_ID,
    #                      :redirect_url => "urn:ietf:wg:oauth:2.0:oob" # this is what Google uses for 'applications'
    #                     )
    #
    # source://google_calendar//lib/google/calendar.rb#88
    def get(params = T.unsafe(nil), connection = T.unsafe(nil)); end
  end
end

# CalendarList is the main object you use to find Calendars.
#
# source://google_calendar//lib/google/calendar_list.rb#6
class Google::CalendarList
  # Setup and connect to the user's list of Google Calendars.
  #
  # The +params+ parameter accepts
  # * :client_id => the client ID that you received from Google after registering your application with them (https://console.developers.google.com/). REQUIRED
  # * :client_secret => the client secret you received from Google after registering your application with them. REQUIRED
  # * :redirect_url => the url where your users will be redirected to after they have successfully permitted access to their calendars. Use 'urn:ietf:wg:oauth:2.0:oob' if you are using an 'application'" REQUIRED
  # * :refresh_token => if a user has already given you access to their calendars, you can specify their refresh token here and you will be 'logged on' automatically (i.e. they don't need to authorize access again). OPTIONAL
  #
  # See Readme.rdoc or readme_code.rb for an explication on the OAuth2 authorization process.
  #
  # @return [CalendarList] a new instance of CalendarList
  #
  # source://google_calendar//lib/google/calendar_list.rb#21
  def initialize(params = T.unsafe(nil), connection = T.unsafe(nil)); end

  # Returns the value of attribute connection.
  #
  # source://google_calendar//lib/google/calendar_list.rb#8
  def connection; end

  # Find all entries on the user's calendar list. Returns an array of CalendarListEntry objects.
  #
  # source://google_calendar//lib/google/calendar_list.rb#28
  def fetch_entries; end
end

# Represents a Google Calendar List Entry
#
# See https://developers.google.com/google-apps/calendar/v3/reference/calendarList#resource
#
# === Attributes
#
# * +id+ - The Google assigned id of the calendar. Read only.
# * +summary+ - Title of the calendar. Read-only.
# * +time_zone+ - The time zone of the calendar. Optional. Read-only.
# * +access_role+ - The effective access role that the authenticated user has on the calendar. Read-only.
# * +primary?+ - Whether the calendar is the primary calendar of the authenticated user. Read-only.
#
# source://google_calendar//lib/google/calendar_list_entry.rb#16
class Google::CalendarListEntry
  # @return [CalendarListEntry] a new instance of CalendarListEntry
  #
  # source://google_calendar//lib/google/calendar_list_entry.rb#20
  def initialize(params, connection); end

  # Returns the value of attribute access_role.
  #
  # source://google_calendar//lib/google/calendar_list_entry.rb#17
  def access_role; end

  # Returns the value of attribute connection.
  #
  # source://google_calendar//lib/google/calendar_list_entry.rb#17
  def connection; end

  # Returns the value of attribute id.
  #
  # source://google_calendar//lib/google/calendar_list_entry.rb#17
  def id; end

  # Returns the value of attribute primary.
  #
  # source://google_calendar//lib/google/calendar_list_entry.rb#17
  def primary; end

  # Returns the value of attribute primary.
  #
  # source://google_calendar//lib/google/calendar_list_entry.rb#17
  def primary?; end

  # Returns the value of attribute summary.
  #
  # source://google_calendar//lib/google/calendar_list_entry.rb#17
  def summary; end

  # Returns the value of attribute time_zone.
  #
  # source://google_calendar//lib/google/calendar_list_entry.rb#17
  def time_zone; end

  # source://google_calendar//lib/google/calendar_list_entry.rb#29
  def to_calendar; end

  class << self
    # source://google_calendar//lib/google/calendar_list_entry.rb#33
    def build_from_google_feed(response, connection); end
  end
end

# 403: Calendar usage limits exceeded
#
# The user reached one of the Google Calendar limits in place to protect
# Google users and infrastructure from abusive behavior.
#
# source://google_calendar//lib/google/errors.rb#42
class Google::CalendarUsageLimitExceededError < ::StandardError; end

# This is a utility class that communicates with the google calendar api.
#
# source://google_calendar//lib/google/connection.rb#8
class Google::Connection
  # Prepare a connection to google for fetching a calendar events
  #
  #  the +params+ paramater accepts
  # * :client_id => the client ID that you received from Google after registering your application with them (https://console.developers.google.com/)
  # * :client_secret => the client secret you received from Google after registering your application with them.
  # * :redirect_uri => the url where your users will be redirected to after they have successfully permitted access to their calendars. Use 'urn:ietf:wg:oauth:2.0:oob' if you are using an 'application'"
  # * :refresh_token => if a user has already given you access to their calendars, you can specify their refresh token here and you will be 'logged on' automatically (i.e. they don't need to authorize access again)
  #
  # @raise [ArgumentError]
  # @return [Connection] a new instance of Connection
  #
  # source://google_calendar//lib/google/connection.rb#49
  def initialize(params, client = T.unsafe(nil)); end

  # The current access token.  Used during a session, typically expires in a hour.
  #
  # source://google_calendar//lib/google/connection.rb#93
  def access_token; end

  # The single use auth code that google uses during the auth process.
  #
  # source://google_calendar//lib/google/connection.rb#86
  def auth_code; end

  # The URL you need to send a user in order to let them grant you access to their calendars.
  #
  # source://google_calendar//lib/google/connection.rb#79
  def authorize_url; end

  # Returns the value of attribute client.
  #
  # source://google_calendar//lib/google/connection.rb#13
  def client; end

  # Sets the attribute client
  #
  # @param value the value to set the attribute client to.
  #
  # source://google_calendar//lib/google/connection.rb#13
  def client=(_arg0); end

  # Convenience method used to streamline the process of logging in with a auth code.
  # Returns the refresh token.
  #
  # source://google_calendar//lib/google/connection.rb#108
  def login_with_auth_code(auth_code); end

  # Convenience method used to streamline the process of logging in with a refresh token.
  #
  # source://google_calendar//lib/google/connection.rb#117
  def login_with_refresh_token(refresh_token); end

  # The refresh token is used to obtain a new access token.  It remains valid until a user revokes access.
  #
  # source://google_calendar//lib/google/connection.rb#100
  def refresh_token; end

  # Send a request to google.
  #
  # source://google_calendar//lib/google/connection.rb#126
  def send(path, method, content = T.unsafe(nil)); end

  protected

  # Check for common HTTP Errors and raise the appropriate response.
  # Note: error 401 (InvalidCredentialsError) is handled by Signet.
  #
  # source://google_calendar//lib/google/connection.rb#158
  def check_for_errors(response); end

  # Utility method to centralize handling of 403 errors.
  #
  # source://google_calendar//lib/google/connection.rb#173
  def parse_403_error(response); end

  class << self
    # Utility method to centralize credential validation.
    #
    # @return [Boolean]
    #
    # source://google_calendar//lib/google/connection.rb#187
    def credentials_provided?(params); end

    # A utility method used to centralize the creation of connections
    #
    # source://google_calendar//lib/google/connection.rb#30
    def factory(params); end

    # Utility method to centralize the process of getting an access token.
    #
    # source://google_calendar//lib/google/connection.rb#146
    def get_new_access_token(client); end

    # source://google_calendar//lib/google/connection.rb#15
    def new_with_service_account(params); end
  end
end

# source://google_calendar//lib/google/connection.rb#11
Google::Connection::AUTH_URI = T.let(T.unsafe(nil), String)

# source://google_calendar//lib/google/connection.rb#9
Google::Connection::BASE_URI = T.let(T.unsafe(nil), String)

# source://google_calendar//lib/google/connection.rb#12
Google::Connection::SCOPE = T.let(T.unsafe(nil), String)

# source://google_calendar//lib/google/connection.rb#10
Google::Connection::TOKEN_URI = T.let(T.unsafe(nil), String)

# 403: Daily Limit Exceeded
#
# The Courtesy API limit for your project has been reached.
#
# source://google_calendar//lib/google/errors.rb#25
class Google::DailyLimitExceededError < ::StandardError; end

# Represents a Google Event.
#
# === Attributes
#
# * +id+ - The google assigned id of the event (nil until saved). Read Write.
# * +status+ - The status of the event (confirmed, tentative or cancelled). Read only.
# * +title+ - The title of the event. Read Write.
# * +description+ - The content of the event. Read Write.
# * +location+ - The location of the event. Read Write.
# * +start_time+ - The start time of the event (Time object, defaults to now). Read Write.
# * +end_time+ - The end time of the event (Time object, defaults to one hour from now).  Read Write.
# * +recurrence+ - A hash containing recurrence info for repeating events. Read write.
# * +calendar+ - What calendar the event belongs to. Read Write.
# * +all_day+ - Does the event run all day. Read Write.
# * +quickadd+ - A string that Google parses when setting up a new event.  If set and then saved it will take priority over any attributes you have set. Read Write.
# * +reminders+ - A hash containing reminders. Read Write.
# * +attendees+ - An array of hashes containing information about attendees. Read Write
# * +transparency+ - Does the event 'block out space' on the calendar.  Valid values are true, false or 'transparent', 'opaque'. Read Write.
# * +duration+ - The duration of the event in seconds. Read only.
# * +html_link+ - An absolute link to this event in the Google Calendar Web UI. Read only.
# * +raw+ - The full google json representation of the event. Read only.
# * +visibility+ - The visibility of the event (*'default'*, 'public', 'private', 'confidential'). Read Write.
# * +extended_properties+ - Custom properties which may be shared or private. Read Write
# * +guests_can_invite_others+ - Whether attendees other than the organizer can invite others to the event (*true*, false). Read Write.
# * +guests_can_see_other_guests+ - Whether attendees other than the organizer can see who the event's attendees are (*true*, false). Read Write.
# * +send_notifications+ - Whether to send notifications about the event update (true, *false*). Write only.
#
# source://google_calendar//lib/google/event.rb#35
class Google::Event
  # Create a new event, and optionally set it's attributes.
  #
  # ==== Example
  #
  # event = Google::Event.new
  # event.calendar = AnInstanceOfGoogleCalendaer
  # event.id = "0123456789abcdefghijklmopqrstuv"
  # event.start_time = Time.now
  # event.end_time = Time.now + (60 * 60)
  # event.recurrence = {'freq' => 'monthly'}
  # event.title = "Go Swimming"
  # event.description = "The polar bear plunge"
  # event.location = "In the arctic ocean"
  # event.transparency = "opaque"
  # event.visibility = "public"
  # event.reminders = {'useDefault'  => false, 'overrides' => ['minutes' => 10, 'method' => "popup"]}
  # event.attendees = [
  #                     {'email' => 'some.a.one@gmail.com', 'displayName' => 'Some A One', 'responseStatus' => 'tentative'},
  #                     {'email' => 'some.b.one@gmail.com', 'displayName' => 'Some B One', 'responseStatus' => 'tentative'}
  #                   ]
  # event.extendedProperties = {'shared' => {'custom_str' => 'some custom string'}}
  # event.guests_can_invite_others = false
  # event.guests_can_see_other_guests = false
  # event.send_notifications = true
  #
  # @return [Event] a new instance of Event
  #
  # source://google_calendar//lib/google/event.rb#66
  def initialize(params = T.unsafe(nil)); end

  # Makes an event all day, by setting it's start time to the passed in time and it's end time 24 hours later.
  # Note: this will clobber both the start and end times currently set.
  #
  # source://google_calendar//lib/google/event.rb#131
  def all_day=(time); end

  # Returns whether the Event is an all-day event, based on whether the event starts at the beginning and ends at the end of the day.
  #
  # @return [Boolean]
  #
  # source://google_calendar//lib/google/event.rb#122
  def all_day?; end

  # Returns the value of attribute attendees.
  #
  # source://google_calendar//lib/google/event.rb#38
  def attendees; end

  # Sets the attribute attendees
  #
  # @param value the value to set the attribute attendees to.
  #
  # source://google_calendar//lib/google/event.rb#38
  def attendees=(_arg0); end

  # Hash representation of attendees
  #
  # source://google_calendar//lib/google/event.rb#313
  def attendees_attributes; end

  # JSON representation of attendees
  #
  # source://google_calendar//lib/google/event.rb#326
  def attendees_json; end

  # Returns the value of attribute calendar.
  #
  # source://google_calendar//lib/google/event.rb#38
  def calendar; end

  # Sets the attribute calendar
  #
  # @param value the value to set the attribute calendar to.
  #
  # source://google_calendar//lib/google/event.rb#38
  def calendar=(_arg0); end

  # Hash representation of colors
  #
  # source://google_calendar//lib/google/event.rb#298
  def color_attributes; end

  # Returns the value of attribute color_id.
  #
  # source://google_calendar//lib/google/event.rb#38
  def color_id; end

  # Sets the attribute color_id
  #
  # @param value the value to set the attribute color_id to.
  #
  # source://google_calendar//lib/google/event.rb#38
  def color_id=(_arg0); end

  # JSON representation of colors
  #
  # source://google_calendar//lib/google/event.rb#306
  def color_json; end

  # Returns the value of attribute creator_name.
  #
  # source://google_calendar//lib/google/event.rb#38
  def creator_name; end

  # Sets the attribute creator_name
  #
  # @param value the value to set the attribute creator_name to.
  #
  # source://google_calendar//lib/google/event.rb#38
  def creator_name=(_arg0); end

  # Deletes an event.
  #  Note: If using this on an event you created without using a calendar object,
  #  make sure to set the calendar before calling this method.
  #
  # source://google_calendar//lib/google/event.rb#430
  def delete; end

  # Returns the value of attribute description.
  #
  # source://google_calendar//lib/google/event.rb#38
  def description; end

  # Sets the attribute description
  #
  # @param value the value to set the attribute description to.
  #
  # source://google_calendar//lib/google/event.rb#38
  def description=(_arg0); end

  # Duration of the event in seconds
  #
  # source://google_calendar//lib/google/event.rb#142
  def duration; end

  # Get the end_time of the event.
  #
  # If no time is set (i.e. new event) it defaults to one hour in the future.
  #
  # source://google_calendar//lib/google/event.rb#107
  def end_time; end

  # Sets the end time of the Event.  Must be a Time object or a parse-able string representation of a time.
  #
  # source://google_calendar//lib/google/event.rb#115
  def end_time=(time); end

  # Stores custom data within extended properties which can be shared or private.
  #
  # Allowed contents:
  # :private => a hash containing custom key/values (strings) private to the event   OPTIONAL
  # :shared => a hash containing custom key/values (strings) shared with others       OPTIONAL
  #
  # Note: Both private and shared can be specified at once
  #
  # ===== Example
  # event = cal.create_event do |e|
  #   e.title = 'Work-day Event'
  #   e.start_time = Time.now
  #   e.end_time = Time.now + (60 * 60) # seconds * min
  #   e.extended_properties = {'shared' => {'prop1' => 'value 1'}}
  # end
  #
  # source://google_calendar//lib/google/event.rb#210
  def extended_properties; end

  # Sets the attribute extended_properties
  #
  # @param value the value to set the attribute extended_properties to.
  #
  # source://google_calendar//lib/google/event.rb#37
  def extended_properties=(_arg0); end

  # Hash representation of extended properties
  # shared : whether this should handle shared or public properties
  #
  # source://google_calendar//lib/google/event.rb#396
  def extended_properties_attributes; end

  # JSON representation of extended properties
  # shared : whether this should handle shared or public properties
  #
  # source://google_calendar//lib/google/event.rb#406
  def extended_properties_json; end

  # Returns the value of attribute guests_can_invite_others.
  #
  # source://google_calendar//lib/google/event.rb#38
  def guests_can_invite_others; end

  # Sets the attribute guests_can_invite_others
  #
  # @param value the value to set the attribute guests_can_invite_others to.
  #
  # source://google_calendar//lib/google/event.rb#38
  def guests_can_invite_others=(_arg0); end

  # Returns the value of attribute guests_can_see_other_guests.
  #
  # source://google_calendar//lib/google/event.rb#38
  def guests_can_see_other_guests; end

  # Sets the attribute guests_can_see_other_guests
  #
  # @param value the value to set the attribute guests_can_see_other_guests to.
  #
  # source://google_calendar//lib/google/event.rb#38
  def guests_can_see_other_guests=(_arg0); end

  # Returns the value of attribute html_link.
  #
  # source://google_calendar//lib/google/event.rb#36
  def html_link; end

  # Returns the value of attribute id.
  #
  # source://google_calendar//lib/google/event.rb#36
  def id; end

  # Sets the id of the Event.
  #
  # source://google_calendar//lib/google/event.rb#81
  def id=(id); end

  # Hash representation of local timezone
  #
  # source://google_calendar//lib/google/event.rb#359
  def local_timezone_attributes; end

  # JSON representation of local timezone
  #
  # source://google_calendar//lib/google/event.rb#368
  def local_timezone_json; end

  # Returns the value of attribute location.
  #
  # source://google_calendar//lib/google/event.rb#38
  def location; end

  # Sets the attribute location
  #
  # @param value the value to set the attribute location to.
  #
  # source://google_calendar//lib/google/event.rb#38
  def location=(_arg0); end

  # Returns true if this a new event.
  #
  # @return [Boolean]
  #
  # source://google_calendar//lib/google/event.rb#445
  def new_event?; end

  # Returns the value of attribute new_event_with_id_specified.
  #
  # source://google_calendar//lib/google/event.rb#38
  def new_event_with_id_specified; end

  # Sets the attribute new_event_with_id_specified
  #
  # @param value the value to set the attribute new_event_with_id_specified to.
  #
  # source://google_calendar//lib/google/event.rb#38
  def new_event_with_id_specified=(_arg0); end

  # Returns true if the event is opaque otherwise returns false.
  # Opaque events block time on a calendar.
  #
  # @return [Boolean]
  #
  # source://google_calendar//lib/google/event.rb#238
  def opaque?; end

  # Returns the value of attribute quickadd.
  #
  # source://google_calendar//lib/google/event.rb#38
  def quickadd; end

  # Sets the attribute quickadd
  #
  # @param value the value to set the attribute quickadd to.
  #
  # source://google_calendar//lib/google/event.rb#38
  def quickadd=(_arg0); end

  # Returns the value of attribute raw.
  #
  # source://google_calendar//lib/google/event.rb#36
  def raw; end

  # Stores recurrence rules for repeating events.
  #
  # Allowed contents:
  # :freq => frequence information ("daily", "weekly", "monthly", "yearly")   REQUIRED
  # :count => how many times the repeating event should occur                 OPTIONAL
  # :until => Time class, until when the event should occur                   OPTIONAL
  # :interval => how often should the event occur (every "2" weeks, ...)      OPTIONAL
  # :byday => if frequence is "weekly", contains ordered (starting with       OPTIONAL
  #             Sunday)comma separated abbreviations of days the event
  #             should occur on ("su,mo,th")
  #           if frequence is "monthly", can specify which day of month
  #             the event should occur on ("2mo" - second Monday, "-1th" - last Thursday,
  #             allowed indices are 1,2,3,4,-1)
  #
  # Note: The hash should not contain :count and :until keys simultaneously.
  #
  # ===== Example
  # event = cal.create_event do |e|
  #   e.title = 'Work-day Event'
  #   e.start_time = Time.now
  #   e.end_time = Time.now + (60 * 60) # seconds * min
  #   e.recurrence = {freq: "weekly", byday: "mo,tu,we,th,fr"}
  # end
  #
  # source://google_calendar//lib/google/event.rb#189
  def recurrence; end

  # Sets the attribute recurrence
  #
  # @param value the value to set the attribute recurrence to.
  #
  # source://google_calendar//lib/google/event.rb#37
  def recurrence=(_arg0); end

  # Hash representation of recurrence rules for repeating events
  #
  # source://google_calendar//lib/google/event.rb#375
  def recurrence_attributes; end

  # JSON representation of recurrence rules for repeating events
  #
  # source://google_calendar//lib/google/event.rb#388
  def recurrence_json; end

  # Stores reminders for this event. Multiple reminders are allowed.
  #
  # Examples
  #
  # event = cal.create_event do |e|
  #   e.title = 'Some Event'
  #   e.start_time = Time.now + (60 * 10)
  #   e.end_time = Time.now + (60 * 60) # seconds * min
  #   e.reminders = { 'useDefault'  => false, 'overrides' => [{method: 'email', minutes: 4}, {method: 'popup', minutes: 60}, {method: 'sms', minutes: 30}]}
  # end
  #
  # event = Event.new :start_time => "2012-03-31", :end_time => "2012-04-03", :reminders => { 'useDefault'  => false, 'overrides' => [{'minutes' => 10, 'method' => "popup"}]}
  #
  # source://google_calendar//lib/google/event.rb#160
  def reminders; end

  # Sets the attribute reminders
  #
  # @param value the value to set the attribute reminders to.
  #
  # source://google_calendar//lib/google/event.rb#37
  def reminders=(_arg0); end

  # Hash representation of a reminder
  #
  # source://google_calendar//lib/google/event.rb#333
  def reminders_attributes; end

  # JSON representation of a reminder
  #
  # source://google_calendar//lib/google/event.rb#345
  def reminders_json; end

  # Saves an event.
  #  Note: make sure to set the calendar before calling this method.
  #
  # source://google_calendar//lib/google/event.rb#421
  def save; end

  # Returns the value of attribute send_notifications.
  #
  # source://google_calendar//lib/google/event.rb#38
  def send_notifications; end

  # Sets the attribute send_notifications
  #
  # @param value the value to set the attribute send_notifications to.
  #
  # source://google_calendar//lib/google/event.rb#38
  def send_notifications=(_arg0); end

  # Returns true if notifications were requested to be sent
  #
  # @return [Boolean]
  #
  # source://google_calendar//lib/google/event.rb#452
  def send_notifications?; end

  # Get the start_time of the event.
  #
  # If no time is set (i.e. new event) it defaults to the current time.
  #
  # source://google_calendar//lib/google/event.rb#97
  def start_time; end

  # Sets the start time of the Event.  Must be a Time object or a parse-able string representation of a time.
  #
  # source://google_calendar//lib/google/event.rb#88
  def start_time=(time); end

  # Returns the value of attribute status.
  #
  # source://google_calendar//lib/google/event.rb#36
  def status; end

  # Timezone info is needed only at recurring events
  #
  # @return [Boolean]
  #
  # source://google_calendar//lib/google/event.rb#352
  def timezone_needed?; end

  # Returns the value of attribute title.
  #
  # source://google_calendar//lib/google/event.rb#38
  def title; end

  # Sets the attribute title
  #
  # @param value the value to set the attribute title to.
  #
  # source://google_calendar//lib/google/event.rb#38
  def title=(_arg0); end

  # Google JSON representation of an event object.
  #
  # source://google_calendar//lib/google/event.rb#264
  def to_json; end

  # String representation of an event object.
  #
  # source://google_calendar//lib/google/event.rb#413
  def to_s; end

  # Returns the value of attribute transparency.
  #
  # source://google_calendar//lib/google/event.rb#36
  def transparency; end

  # Utility method that simplifies setting the transparency of an event.
  # You can pass true or false.  Defaults to transparent.
  #
  # source://google_calendar//lib/google/event.rb#218
  def transparency=(val); end

  # Returns true if the event is transparent otherwise returns false.
  # Transparent events do not block time on a calendar.
  #
  # @return [Boolean]
  #
  # source://google_calendar//lib/google/event.rb#230
  def transparent?; end

  # Returns true if the event will use quickadd when it is saved.
  #
  # @return [Boolean]
  #
  # source://google_calendar//lib/google/event.rb#438
  def use_quickadd?; end

  # Returns the value of attribute visibility.
  #
  # source://google_calendar//lib/google/event.rb#36
  def visibility; end

  # Sets the visibility of the Event.
  #
  # source://google_calendar//lib/google/event.rb#245
  def visibility=(val); end

  protected

  # A utility method used to centralize checking for recurring events
  #
  # @return [Boolean]
  #
  # source://google_calendar//lib/google/event.rb#541
  def is_recurring_event?; end

  # Set the ID after google assigns it (only necessary when we are creating a new event)
  #
  # source://google_calendar//lib/google/event.rb#516
  def update_after_save(response); end

  private

  # @return [Boolean]
  #
  # source://google_calendar//lib/google/event.rb#459
  def new_event_with_id_specified?; end

  # source://google_calendar//lib/google/event.rb#463
  def time_or_all_day(time); end

  class << self
    # Convenience method used to build an array of events from a Google feed.
    #
    # source://google_calendar//lib/google/event.rb#256
    def build_from_google_feed(response, calendar); end

    # Create a new event from a google 'entry'
    #
    # source://google_calendar//lib/google/event.rb#478
    def new_from_feed(e, calendar); end

    # Validates id format
    #
    # source://google_calendar//lib/google/event.rb#556
    def parse_id(id); end

    # A utility method used to centralize parsing of time in json format
    #
    # source://google_calendar//lib/google/event.rb#526
    def parse_json_time(time_hash); end

    # Parse recurrence rule
    # Returns hash with recurrence info
    #
    # source://google_calendar//lib/google/event.rb#503
    def parse_recurrence_rule(recurrence_entry); end

    # A utility method used centralize time parsing.
    #
    # @raise [ArgumentError]
    #
    # source://google_calendar//lib/google/event.rb#548
    def parse_time(time); end

    # Validates visibility value
    #
    # @raise [ArgumentError]
    #
    # source://google_calendar//lib/google/event.rb#567
    def parse_visibility(visibility); end
  end
end

# 403: Forbidden Error
#
# User has no authority to conduct the requested operation on the resource.
# This is not a part of official Google Calendar API Errors documentation.
#
# source://google_calendar//lib/google/errors.rb#77
class Google::ForbiddenError < ::StandardError; end

# Freebusy returns free/busy information for a set of calendars
#
# source://google_calendar//lib/google/freebusy.rb#9
class Google::Freebusy
  # Setup and query the free/busy status of a collection of calendars.
  #
  # The +params+ parameter accepts
  # * :client_id => the client ID that you received from Google after registering your application with them (https://console.developers.google.com/). REQUIRED
  # * :client_secret => the client secret you received from Google after registering your application with them. REQUIRED
  # * :redirect_url => the url where your users will be redirected to after they have successfully permitted access to their calendars. Use 'urn:ietf:wg:oauth:2.0:oob' if you are using an 'application'" REQUIRED
  # * :refresh_token => if a user has already given you access to their calendars, you can specify their refresh token here and you will be 'logged on' automatically (i.e. they don't need to authorize access again). OPTIONAL
  #
  # See Readme.rdoc or readme_code.rb for an explication on the OAuth2 authorization process.
  #
  # @return [Freebusy] a new instance of Freebusy
  #
  # source://google_calendar//lib/google/freebusy.rb#24
  def initialize(params = T.unsafe(nil), connection = T.unsafe(nil)); end

  # Returns the value of attribute connection.
  #
  # source://google_calendar//lib/google/freebusy.rb#11
  def connection; end

  # Find the busy times of the supplied calendar IDs, within the boundaries
  # of the supplied start_time and end_time
  #
  # The arguments supplied are
  # * calendar_ids => array of Google calendar IDs as strings
  # * start_time => a Time object, the start of the interval for the query.
  # * end_time => a Time object, the end of the interval for the query.
  #
  # source://google_calendar//lib/google/freebusy.rb#37
  def query(calendar_ids, start_time, end_time); end

  private

  # Prepare the JSON
  #
  # source://google_calendar//lib/google/freebusy.rb#51
  def json_for_query(calendar_ids, start_time, end_time); end

  # source://google_calendar//lib/google/freebusy.rb#59
  def parse_freebusy_response(response_body); end
end

# 410: Gone
#
# SyncToken or updatedMin parameters are no longer valid. This error can also
# occur if a request attempts to delete an event that has already been
# deleted.
#
# source://google_calendar//lib/google/errors.rb#59
class Google::GoneError < ::StandardError; end

# Signet::AuthorizationError
# Not part of Google Calendar API Errors
#
# source://google_calendar//lib/google/errors.rb#4
class Google::HTTPAuthorizationFailed < ::StandardError; end

# 404: Not Found
#
# The specified resource was not found.
#
# source://google_calendar//lib/google/errors.rb#47
class Google::HTTPNotFound < ::StandardError; end

# 400: Bad Request
#
# User error. This can mean that a required field or parameter has not been
# provided, the value supplied is invalid, or the combination of provided
# fields is invalid.
#
# source://google_calendar//lib/google/errors.rb#14
class Google::HTTPRequestFailed < ::StandardError; end

# 401: Invalid Credentials
#
# Invalid authorization header. The access token you're using is either
# expired or invalid.
#
# source://google_calendar//lib/google/errors.rb#20
class Google::InvalidCredentialsError < ::StandardError; end

# 412: Precondition Failed
#
# The etag supplied in the If-match header no longer corresponds to the
# current etag of the resource.
#
# source://google_calendar//lib/google/errors.rb#65
class Google::PreconditionFailedError < ::StandardError; end

# 403: Rate Limit Exceeded
#
# The user has reached Google Calendar API's maximum request rate per
# calendar or per authenticated user.
#
# source://google_calendar//lib/google/errors.rb#36
class Google::RateLimitExceededError < ::StandardError; end

# 409: The requested identifier already exists
#
# An instance with the given ID already exists in the storage.
#
# source://google_calendar//lib/google/errors.rb#52
class Google::RequestedIdentifierAlreadyExistsError < ::StandardError; end

# 403: User Rate Limit Exceeded
#
# The per-user limit from the Developer Console has been reached.
#
# source://google_calendar//lib/google/errors.rb#30
class Google::UserRateLimitExceededError < ::StandardError; end
