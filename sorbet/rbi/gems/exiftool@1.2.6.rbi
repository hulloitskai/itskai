# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `exiftool` gem.
# Please instead update this file by running `bin/tapioca gem exiftool`.


# Exiftool Class
#
# source://exiftool//lib/exiftool/field_parser.rb#5
class Exiftool
  extend ::Forwardable

  # @raise [ExiftoolNotInstalled]
  # @return [Exiftool] a new instance of Exiftool
  #
  # source://exiftool//lib/exiftool.rb#48
  def initialize(filenames, exiftool_opts = T.unsafe(nil)); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def [](*args, **_arg1, &block); end

  # @return [Boolean]
  #
  # source://exiftool//lib/exiftool.rb#84
  def errors?; end

  # source://exiftool//lib/exiftool.rb#80
  def files_with_results; end

  # source://forwardable/1.3.3/forwardable.rb#231
  def raw(*args, **_arg1, &block); end

  # source://exiftool//lib/exiftool.rb#76
  def result_for(filename); end

  # source://exiftool//lib/exiftool.rb#68
  def results(include_results_with_errors: T.unsafe(nil)); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def symbol_display_hash(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def to_display_hash(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def to_hash(*args, **_arg1, &block); end

  private

  # @raise [NoDefaultResultWithMultiget]
  #
  # source://exiftool//lib/exiftool.rb#90
  def first_result; end

  class << self
    # source://exiftool//lib/exiftool.rb#23
    def command; end

    # Sets the attribute command
    #
    # @param value the value to set the attribute command to.
    #
    # source://exiftool//lib/exiftool.rb#20
    def command=(_arg0); end

    # @return [Boolean]
    #
    # source://exiftool//lib/exiftool.rb#27
    def exiftool_installed?; end

    # This is a string, not a float, to handle versions like "9.40" properly.
    #
    # source://exiftool//lib/exiftool.rb#32
    def exiftool_version; end

    # @raise [NoSuchFile]
    #
    # source://exiftool//lib/exiftool.rb#36
    def expand_path(filename); end
  end
end

# source://exiftool//lib/exiftool.rb#15
class Exiftool::ExiftoolNotInstalled < ::StandardError; end

# Exiftool FiledParser Class
#
# source://exiftool//lib/exiftool/field_parser.rb#7
class Exiftool::FieldParser
  # @return [FieldParser] a new instance of FieldParser
  #
  # source://exiftool//lib/exiftool/field_parser.rb#15
  def initialize(key, raw_value); end

  # source://exiftool//lib/exiftool/field_parser.rb#38
  def civil_date; end

  # Returns the value of attribute display_key.
  #
  # source://exiftool//lib/exiftool/field_parser.rb#13
  def display_key; end

  # Returns the value of attribute key.
  #
  # source://exiftool//lib/exiftool/field_parser.rb#13
  def key; end

  # Returns the value of attribute raw_value.
  #
  # source://exiftool//lib/exiftool/field_parser.rb#13
  def raw_value; end

  # Returns the value of attribute sym_key.
  #
  # source://exiftool//lib/exiftool/field_parser.rb#13
  def sym_key; end

  # source://exiftool//lib/exiftool/field_parser.rb#22
  def value; end

  private

  # source://exiftool//lib/exiftool/field_parser.rb#71
  def as_date; end

  # source://exiftool//lib/exiftool/field_parser.rb#87
  def as_fraction; end

  # source://exiftool//lib/exiftool/field_parser.rb#54
  def as_lat_long; end

  # @return [Boolean]
  #
  # source://exiftool//lib/exiftool/field_parser.rb#63
  def date?; end

  # @return [Boolean]
  #
  # source://exiftool//lib/exiftool/field_parser.rb#83
  def fraction?; end

  # @return [Boolean]
  #
  # source://exiftool//lib/exiftool/field_parser.rb#50
  def lat_long?; end

  # source://exiftool//lib/exiftool/field_parser.rb#77
  def try_parse; end

  # @return [Boolean]
  #
  # source://exiftool//lib/exiftool/field_parser.rb#67
  def zero_date?; end
end

# source://exiftool//lib/exiftool/field_parser.rb#9
Exiftool::FieldParser::FRACTION_RE = T.let(T.unsafe(nil), Regexp)

# source://exiftool//lib/exiftool/field_parser.rb#8
Exiftool::FieldParser::WORD_BOUNDARY_RES = T.let(T.unsafe(nil), Array)

# source://exiftool//lib/exiftool/field_parser.rb#10
Exiftool::FieldParser::YMD_RE = T.let(T.unsafe(nil), Regexp)

# source://exiftool//lib/exiftool/field_parser.rb#11
Exiftool::FieldParser::ZERO_DATE_RE = T.let(T.unsafe(nil), Regexp)

# source://exiftool//lib/exiftool.rb#17
class Exiftool::NoDefaultResultWithMultiget < ::StandardError; end

# source://exiftool//lib/exiftool.rb#11
class Exiftool::NoSuchFile < ::StandardError; end

# source://exiftool//lib/exiftool.rb#13
class Exiftool::NotAFile < ::StandardError; end

# Exiftool Result
#
# source://exiftool//lib/exiftool/result.rb#7
class Exiftool::Result
  # @return [Result] a new instance of Result
  #
  # source://exiftool//lib/exiftool/result.rb#10
  def initialize(raw_hash); end

  # source://exiftool//lib/exiftool/result.rb#31
  def [](key); end

  # Returns the value of attribute display2sym.
  #
  # source://exiftool//lib/exiftool/result.rb#8
  def display2sym; end

  # @return [Boolean]
  #
  # source://exiftool//lib/exiftool/result.rb#39
  def errors?; end

  # Returns the value of attribute raw.
  #
  # source://exiftool//lib/exiftool/result.rb#8
  def raw; end

  # source://exiftool//lib/exiftool/result.rb#35
  def source_file; end

  # Returns the value of attribute sym2display.
  #
  # source://exiftool//lib/exiftool/result.rb#8
  def sym2display; end

  # Returns the value of attribute to_display_hash.
  #
  # source://exiftool//lib/exiftool/result.rb#8
  def to_display_hash; end

  # Returns the value of attribute to_hash.
  #
  # source://exiftool//lib/exiftool/result.rb#8
  def to_hash; end
end
