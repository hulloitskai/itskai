# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `loaf` gem.
# Please instead update this file by running `bin/tapioca gem loaf`.

# source://loaf//lib/loaf/configuration.rb#3
module Loaf
  class << self
    # Get global configuration
    #
    # @api public
    #
    # source://loaf//lib/loaf.rb#16
    def configuration; end

    # Set global configuration
    #
    # @api public
    #
    # source://loaf//lib/loaf.rb#9
    def configuration=(config); end

    # Sets the Loaf configuration options. Best used by passing a block.
    #
    # Loaf.configure do |config|
    #   config.capitalize = true
    # end
    #
    # @yield [configuration]
    #
    # source://loaf//lib/loaf.rb#25
    def configure; end
  end
end

# A container for breadcrumb values
#
# @api public
#
# source://loaf//lib/loaf/breadcrumb.rb#4
class Loaf::Breadcrumb
  # @api public
  # @return [Breadcrumb] a new instance of Breadcrumb
  #
  # source://loaf//lib/loaf/breadcrumb.rb#14
  def initialize(name, path, current); end

  # @api public
  # @return [Boolean]
  #
  # source://loaf//lib/loaf/breadcrumb.rb#21
  def current?; end

  # @api public
  #
  # source://loaf//lib/loaf/breadcrumb.rb#5
  def name; end

  # @api public
  #
  # source://loaf//lib/loaf/breadcrumb.rb#7
  def path; end

  # @api public
  #
  # source://loaf//lib/loaf/breadcrumb.rb#25
  def to_a; end

  # @api public
  #
  # source://loaf//lib/loaf/breadcrumb.rb#25
  def to_ary; end

  # @api public
  #
  # source://loaf//lib/loaf/breadcrumb.rb#7
  def url; end

  class << self
    # @api public
    #
    # source://loaf//lib/loaf/breadcrumb.rb#10
    def [](*args); end
  end
end

# source://loaf//lib/loaf/configuration.rb#4
class Loaf::Configuration
  # Setup this configuration
  #
  # @api public
  # @return [Configuration] a new instance of Configuration
  #
  # source://loaf//lib/loaf/configuration.rb#19
  def initialize(attributes = T.unsafe(nil)); end

  # source://loaf//lib/loaf/configuration.rb#10
  def locales_path; end

  # source://loaf//lib/loaf/configuration.rb#10
  def locales_path=(_arg0); end

  # source://loaf//lib/loaf/configuration.rb#10
  def match; end

  # source://loaf//lib/loaf/configuration.rb#10
  def match=(_arg0); end

  # Convert all properties into hash
  #
  # @api public
  # @return [Hash]
  #
  # source://loaf//lib/loaf/configuration.rb#32
  def to_hash; end
end

# source://loaf//lib/loaf/configuration.rb#12
Loaf::Configuration::DEFAULT_LOCALES_PATH = T.let(T.unsafe(nil), String)

# source://loaf//lib/loaf/configuration.rb#14
Loaf::Configuration::DEFAULT_MATCH = T.let(T.unsafe(nil), Symbol)

# source://loaf//lib/loaf/configuration.rb#5
Loaf::Configuration::VALID_ATTRIBUTES = T.let(T.unsafe(nil), Array)

# source://loaf//lib/loaf/controller_extensions.rb#6
module Loaf::ControllerExtensions
  include ::Loaf::ControllerExtensions::InstanceMethods

  mixes_in_class_methods ::Loaf::ControllerExtensions::ClassMethods

  class << self
    # Module injection
    #
    # @api private
    #
    # source://loaf//lib/loaf/controller_extensions.rb#10
    def included(base); end
  end
end

# source://loaf//lib/loaf/controller_extensions.rb#16
module Loaf::ControllerExtensions::ClassMethods
  # Add breacrumb to the trail in controller as class method
  #
  # @api public
  # @param [String]
  #
  # source://loaf//lib/loaf/controller_extensions.rb#22
  def add_breadcrumb(name, url, options = T.unsafe(nil)); end

  # Add breacrumb to the trail in controller as class method
  #
  # @api public
  # @param [String]
  #
  # source://loaf//lib/loaf/controller_extensions.rb#22
  def breadcrumb(name, url, options = T.unsafe(nil)); end

  private

  # Choose available filter name
  #
  # @api private
  #
  # source://loaf//lib/loaf/controller_extensions.rb#37
  def _filter_name; end

  # Convert breadcrumb name to string
  #
  # @api private
  # @return [String]
  #
  # source://loaf//lib/loaf/controller_extensions.rb#46
  def _normalize_name(name, instance); end
end

# ClassMethods
#
# source://loaf//lib/loaf/controller_extensions.rb#61
module Loaf::ControllerExtensions::InstanceMethods
  # Collection of breadcrumbs
  #
  # @api private
  #
  # source://loaf//lib/loaf/controller_extensions.rb#77
  def _breadcrumbs; end

  # Add breadcrumb in controller as instance method
  #
  # @api public
  # @param name [String]
  # @param url [Object]
  #
  # source://loaf//lib/loaf/controller_extensions.rb#69
  def add_breadcrumb(name, url, options = T.unsafe(nil)); end

  # Add breadcrumb in controller as instance method
  #
  # @api public
  # @param name [String]
  # @param url [Object]
  #
  # source://loaf//lib/loaf/controller_extensions.rb#69
  def breadcrumb(name, url, options = T.unsafe(nil)); end

  # Remove all current breadcrumbs
  #
  # @api public
  #
  # source://loaf//lib/loaf/controller_extensions.rb#84
  def clear_breadcrumbs; end
end

# Basic crumb container for internal use
#
# @api private
#
# source://loaf//lib/loaf/crumb.rb#6
class Loaf::Crumb
  # @api private
  # @return [Crumb] a new instance of Crumb
  #
  # source://loaf//lib/loaf/crumb.rb#13
  def initialize(name, url, options = T.unsafe(nil)); end

  # @api private
  #
  # source://loaf//lib/loaf/crumb.rb#11
  def match; end

  # @api private
  #
  # source://loaf//lib/loaf/crumb.rb#7
  def name; end

  # @api private
  # @raise [ArgumentError]
  #
  # source://loaf//lib/loaf/crumb.rb#20
  def raise_name_error; end

  # @api private
  # @raise [ArgumentError]
  #
  # source://loaf//lib/loaf/crumb.rb#24
  def raise_url_error; end

  # @api private
  #
  # source://loaf//lib/loaf/crumb.rb#9
  def url; end
end

# Raised when invalid options are passed to breadcrumbs view renderer.
#  InvalidOptions.new :name, :crumber, [:crumb]
#
# source://loaf//lib/loaf/errors.rb#21
class Loaf::InvalidOptions < ::Loaf::LoafError
  # @return [InvalidOptions] a new instance of InvalidOptions
  #
  # source://loaf//lib/loaf/errors.rb#22
  def initialize(invalid, valid); end
end

# Default Loaf error for all custom errors.
#
# source://loaf//lib/loaf/errors.rb#6
class Loaf::LoafError < ::StandardError
  # source://loaf//lib/loaf/errors.rb#9
  def error_message(key, attributes); end

  # source://loaf//lib/loaf/errors.rb#13
  def translate(key, options); end
end

# source://loaf//lib/loaf/errors.rb#7
Loaf::LoafError::BASE_KEY = T.let(T.unsafe(nil), String)

# A mixin to validate configuration options
#
# source://loaf//lib/loaf/options_validator.rb#7
module Loaf::OptionsValidator
  # Check if options are valid or not
  #
  # @api public
  # @param options [Hash]
  # @return [Boolean]
  #
  # source://loaf//lib/loaf/options_validator.rb#15
  def valid?(options); end
end

# source://loaf//lib/loaf/railtie.rb#23
class Loaf::Railtie < ::Rails::Railtie; end

# source://loaf//lib/loaf/railtie.rb#10
class Loaf::RailtieHelpers
  class << self
    # source://loaf//lib/loaf/railtie.rb#16
    def insert_controller; end

    # source://loaf//lib/loaf/railtie.rb#12
    def insert_view; end
  end
end

# source://loaf//lib/loaf/translation.rb#4
module Loaf::Translation
  private

  # Translate breadcrumb title
  #
  # @api public
  # @option options
  # @option options
  # @param :title [String]
  # @param options [Hash]
  # @return [String]
  #
  # source://loaf//lib/loaf/translation.rb#27
  def find_title(title, options = T.unsafe(nil)); end

  # Returns translation lookup
  #
  # @api private
  # @return [String]
  #
  # source://loaf//lib/loaf/translation.rb#10
  def translation_scope; end

  class << self
    # Translate breadcrumb title
    #
    # @api public
    # @option options
    # @option options
    # @param :title [String]
    # @param options [Hash]
    # @return [String]
    #
    # source://loaf//lib/loaf/translation.rb#27
    def find_title(title, options = T.unsafe(nil)); end

    # Returns translation lookup
    #
    # @api private
    # @return [String]
    #
    # source://loaf//lib/loaf/translation.rb#10
    def translation_scope; end
  end
end

# source://loaf//lib/loaf/version.rb#4
Loaf::VERSION = T.let(T.unsafe(nil), String)

# A mixin to define view extensions
#
# source://loaf//lib/loaf/view_extensions.rb#10
module Loaf::ViewExtensions
  include ::Loaf::OptionsValidator

  # source://loaf//lib/loaf/view_extensions.rb#13
  def initialize(*_arg0); end

  # Adds breadcrumbs inside view.
  #
  # @api public
  # @param name [String] the breadcrumb name
  # @param url [Object] the breadcrumb url
  # @param options [Hash] the breadcrumb options
  #
  # source://loaf//lib/loaf/view_extensions.rb#37
  def add_breadcrumb(name, url, options = T.unsafe(nil)); end

  # Adds breadcrumbs inside view.
  #
  # @api public
  # @param name [String] the breadcrumb name
  # @param url [Object] the breadcrumb url
  # @param options [Hash] the breadcrumb options
  #
  # source://loaf//lib/loaf/view_extensions.rb#37
  def breadcrumb(name, url, options = T.unsafe(nil)); end

  # Renders breadcrumbs inside view.
  #
  # @api public
  # @param options [Hash]
  #
  # source://loaf//lib/loaf/view_extensions.rb#47
  def breadcrumb_trail(options = T.unsafe(nil)); end

  # Checks to see if any breadcrumbs have been added
  #
  # @api public
  # @return [Boolean]
  #
  # source://loaf//lib/loaf/view_extensions.rb#23
  def breadcrumbs?; end

  # Check if breadcrumb is current based on the pattern
  #
  # @api public
  # @param path [String]
  # @param pattern [Object] the pattern to match on
  # @return [Boolean]
  def current_crumb?(path, pattern = T.unsafe(nil)); end

  private

  # Expand url in the current context of the view
  #
  # @api private
  #
  # source://loaf//lib/loaf/view_extensions.rb#121
  def _expand_url(url); end

  # Find title translation for a crumb name
  #
  # @api private
  # @return [String]
  #
  # source://loaf//lib/loaf/view_extensions.rb#114
  def title_for(name); end
end
