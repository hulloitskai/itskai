# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `TimezoneParser` gem.
# Please instead update this file by running `bin/tapioca gem TimezoneParser`.

# TimezoneParser module
#
# source://TimezoneParser//lib/timezone_parser/version.rb#2
module TimezoneParser
  class << self
    # Locales which will be used for TimezoneParser methods if not specified there
    #
    # Each locale is language identifier based on IETF BCP 47. Usually is either language identifier or language and country/region identifier
    #
    # @return [Array<String>] list containing locale identifiers
    # @see http://en.wikipedia.org/wiki/IETF_language_tag
    # @see http://unicode.org/reports/tr35/#Unicode_Language_and_Locale_Identifiers
    # @see http://www.unicode.org/cldr/charts/latest/supplemental/language_territory_information.html
    # @see http://msdn.microsoft.com/en-us/library/dd318693.aspx
    #
    # source://TimezoneParser//lib/timezone_parser.rb#48
    def Locales; end

    # Modules which will be used for TimezoneParser methods if not specified there
    #
    # @return [Array<Symbol>] list containing symbol names for modules to use
    # @see AllModules
    #
    # source://TimezoneParser//lib/timezone_parser.rb#26
    def Modules; end

    # Regions which will be used for TimezoneParser methods if not specified there
    #
    # Each region is either ISO 3166-1 alpha-2 code or CLDR territory (UN M.49)
    #
    # @return [Array<String>] list containing region identifiers
    # @see http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2
    # @see http://www.unicode.org/cldr/charts/latest/supplemental/territory_containment_un_m_49.html
    #
    # source://TimezoneParser//lib/timezone_parser.rb#36
    def Regions; end

    # Get UTC offsets in seconds for given Timezone name
    #
    # @param name [String] either Timezone name or abbreviation
    # @param toTime [DateTime] look for offsets which came into effect before this date, exclusive
    # @param fromTime [DateTime] look for offsets which came into effect at this date, inclusive
    # @param regions [Array<String>] look for offsets only for these regions
    # @param locales [Array<String>] search Timezone name only for these locales
    # @param type [Symbol] specify whether offset should be :standard time or :daylight
    # @param all [Boolean] specify whether should search for all offsets or return as soon as found any
    # @param modules [Array<Symbol>] list of modules from which to search
    # @return [Array<Fixnum>] list of timezone offsets in seconds
    # @see Regions
    # @see Locales
    # @see Modules
    # @see AllModules
    # @see Abbreviation.getOffsets
    # @see Timezone.getOffsets
    # @see WindowsZone.getOffsets
    # @see RailsZone.getOffsets
    #
    # source://TimezoneParser//lib/timezone_parser.rb#109
    def getOffsets(name, toTime = T.unsafe(nil), fromTime = T.unsafe(nil), regions = T.unsafe(nil), locales = T.unsafe(nil), type = T.unsafe(nil), all = T.unsafe(nil), modules = T.unsafe(nil)); end

    # Get Timezone identifiers for given Timezone name
    #
    # @param name [String] either Timezone name or abbreviation
    # @param toTime [DateTime] look for timezones which came into effect before this date, exclusive
    # @param fromTime [DateTime] look for timezones which came into effect at this date, inclusive
    # @param regions [Array<String>] look for timezones only for these regions
    # @param locales [Array<String>] search Timezone name only for these locales
    # @param type [Symbol] specify whether timezones should be :standard time or :daylight
    # @param all [Boolean] specify whether should search for all timezones or return as soon as found any
    # @param modules [Array<Symbol>] list of modules from which to search
    # @return [Array<String>] list of timezone identifiers
    # @see Regions
    # @see Locales
    # @see Modules
    # @see AllModules
    # @see Abbreviation.getTimezones
    # @see Timezone.getTimezones
    # @see WindowsZone.getTimezones
    # @see RailsZone.getTimezones
    #
    # source://TimezoneParser//lib/timezone_parser.rb#143
    def getTimezones(name, toTime = T.unsafe(nil), fromTime = T.unsafe(nil), regions = T.unsafe(nil), locales = T.unsafe(nil), type = T.unsafe(nil), all = T.unsafe(nil), modules = T.unsafe(nil)); end

    # Check if given Timezone name is a valid timezone
    #
    # @param locales [Array<String>] check only for these locales
    # @param modules [Array<Symbol>] list of modules from which to check
    # @param name [String] either Timezone name or abbreviation
    # @return [Boolean] whether Timezone is valid
    # @see Abbreviation.isValid?
    # @see Timezone.isValid?
    # @see WindowsZone.isValid?
    # @see RailsZone.isValid?
    # @see Locales
    # @see Modules
    # @see AllModules
    #
    # source://TimezoneParser//lib/timezone_parser.rb#75
    def isValid?(name, locales = T.unsafe(nil), modules = T.unsafe(nil)); end

    # Load Timezone data in memory from files
    #
    # If no modules are specified it will load default modules
    #
    # @param modules [Array<Symbol>] list of modules
    # @see Modules
    # @see AllModules
    #
    # source://TimezoneParser//lib/timezone_parser.rb#58
    def preload(modules = T.unsafe(nil)); end
  end
end

# Timezone abbreviation
#
# source://TimezoneParser//lib/timezone_parser/abbreviation.rb#5
class TimezoneParser::Abbreviation < ::TimezoneParser::ZoneInfo
  # Abbreviation instance
  #
  # @param abbreviation [String] Timezone abbreviation
  # @return [Abbreviation] a new instance of Abbreviation
  #
  # source://TimezoneParser//lib/timezone_parser/abbreviation.rb#24
  def initialize(abbreviation); end

  # Returns the value of attribute Regions.
  #
  # source://TimezoneParser//lib/timezone_parser/abbreviation.rb#19
  def Regions; end

  # Sets the attribute Regions
  #
  # @param value the value to set the attribute Regions to.
  #
  # source://TimezoneParser//lib/timezone_parser/abbreviation.rb#19
  def Regions=(_arg0); end

  # Returns the value of attribute Type.
  #
  # source://TimezoneParser//lib/timezone_parser/abbreviation.rb#20
  def Type; end

  # Sets the attribute Type
  #
  # @param value the value to set the attribute Type to.
  #
  # source://TimezoneParser//lib/timezone_parser/abbreviation.rb#20
  def Type=(_arg0); end

  # Abbreviation data
  #
  # @return [Data] data
  #
  # source://TimezoneParser//lib/timezone_parser/abbreviation.rb#50
  def getData; end

  # Get UTC offsets in seconds
  #
  # @return [Array<Fixnum>] list of timezone offsets in seconds
  #
  # source://TimezoneParser//lib/timezone_parser/abbreviation.rb#71
  def getOffsets; end

  # Check if abbreviation is valid
  #
  # @return [Boolean] whether abbreviation is valid
  #
  # source://TimezoneParser//lib/timezone_parser/abbreviation.rb#44
  def isValid?; end

  # Set regions and type
  #
  # @param regions [Array<String>] filter for these regions
  # @param type [Symbol] filter by type, :standard time or :daylight
  # @return [Abbreviation] self
  # @see Regions
  #
  # source://TimezoneParser//lib/timezone_parser/abbreviation.rb#36
  def set(regions = T.unsafe(nil), type = T.unsafe(nil)); end

  class << self
    # Regions which will be used for Abbreviation methods if not specified there
    #
    # Each region is either ISO 3166-1 alpha-2 code
    #
    # @return [Array<String>] list containing region identifiers
    # @see http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2
    #
    # source://TimezoneParser//lib/timezone_parser/abbreviation.rb#15
    def Regions; end

    # Check if given Timezone abbreviation (case-insensitive) could be a valid timezone
    #
    # @param abbreviation [String] Timezone abbreviation to check for
    # @return [Boolean] whether Timezone is valid
    #
    # source://TimezoneParser//lib/timezone_parser/abbreviation.rb#93
    def couldBeValid?(abbreviation); end

    # Get Metazone identifiers for given Timezone abbreviation
    #
    # @param abbreviation [String] Timezone abbreviation
    #
    # source://TimezoneParser//lib/timezone_parser/abbreviation.rb#126
    def getMetazones(abbreviation); end

    # Get UTC offsets in seconds for given Timezone abbreviation
    #
    # @param abbreviation [String] Timezone abbreviation
    # @param toTime [DateTime] look for offsets which came into effect before this date, exclusive
    # @param fromTime [DateTime] look for offsets which came into effect at this date, inclusive
    # @param regions [Array<String>] look for offsets only for these regions
    # @param type [Symbol] specify whether offset should be :standard time or :daylight
    # @return [Array<Fixnum>] list of timezone offsets in seconds
    # @see Regions
    #
    # source://TimezoneParser//lib/timezone_parser/abbreviation.rb#108
    def getOffsets(abbreviation, toTime = T.unsafe(nil), fromTime = T.unsafe(nil), regions = T.unsafe(nil), type = T.unsafe(nil)); end

    # Get Timezone identifiers for given Timezone abbreviation
    #
    # @param abbreviation [String] Timezone abbreviation
    # @param toTime [DateTime] look for timezones which came into effect before this date, exclusive
    # @param fromTime [DateTime] look for timezones which came into effect at this date, inclusive
    # @param regions [Array<String>] look for timezones only for these regions
    # @param type [Symbol] specify whether timezones should be :standard time or :daylight
    # @return [Array<String>] list of timezone identifiers
    # @see Regions
    #
    # source://TimezoneParser//lib/timezone_parser/abbreviation.rb#120
    def getTimezones(abbreviation, toTime = T.unsafe(nil), fromTime = T.unsafe(nil), regions = T.unsafe(nil), type = T.unsafe(nil)); end

    # Check if given Timezone abbreviation (case-sensitive) is a valid timezone
    #
    # @param abbreviation [String] Timezone abbreviation
    # @return [Boolean] whether Timezone is valid
    #
    # source://TimezoneParser//lib/timezone_parser/abbreviation.rb#86
    def isValid?(abbreviation); end
  end
end

# Modules which to use by default when no modules are specified
#
# source://TimezoneParser//lib/timezone_parser.rb#21
TimezoneParser::AllModules = T.let(T.unsafe(nil), Array)

# Timezone data
#
# source://TimezoneParser//lib/timezone_parser/data/storage.rb#7
class TimezoneParser::Data
  # @return [Data] a new instance of Data
  #
  # source://TimezoneParser//lib/timezone_parser/data.rb#21
  def initialize; end

  # Returns the value of attribute Metazones.
  #
  # source://TimezoneParser//lib/timezone_parser/data.rb#20
  def Metazones; end

  # Returns the value of attribute Offsets.
  #
  # source://TimezoneParser//lib/timezone_parser/data.rb#17
  def Offsets; end

  # Returns the value of attribute Timezones.
  #
  # source://TimezoneParser//lib/timezone_parser/data.rb#18
  def Timezones; end

  # Returns the value of attribute Types.
  #
  # source://TimezoneParser//lib/timezone_parser/data.rb#19
  def Types; end

  # source://TimezoneParser//lib/timezone_parser/data.rb#41
  def findOffsets(toTime, fromTime, regions = T.unsafe(nil), types = T.unsafe(nil)); end

  # source://TimezoneParser//lib/timezone_parser/data.rb#28
  def processEntry(entry, toTime, fromTime, regions = T.unsafe(nil)); end

  class << self
    # source://TimezoneParser//lib/timezone_parser/data.rb#114
    def addOffset(offsets, offset, types); end

    # source://TimezoneParser//lib/timezone_parser/data.rb#93
    def filterData(data, toTime, fromTime, type, regions); end

    # source://TimezoneParser//lib/timezone_parser/data.rb#105
    def getNextEntry(data, i); end

    # Load data entries which match specified time
    #
    # @param data [Array<Hash>] array of entries
    # @param toTime [DateTime] entries before this date, exclusive
    # @param fromTime [DateTime] entries after/at this date, inclusive
    # @return [Array<Hash>] resulting array containing filtered entries
    #
    # source://TimezoneParser//lib/timezone_parser/data.rb#70
    def loadEntries(data, toTime, fromTime, offsets = T.unsafe(nil)); end
  end
end

# Path to Data directory
#
# source://TimezoneParser//lib/timezone_parser/data.rb#13
TimezoneParser::Data::DataDir = T.let(T.unsafe(nil), Pathname)

# Library Root directory
#
# source://TimezoneParser//lib/timezone_parser/data.rb#11
TimezoneParser::Data::RootDir = T.let(T.unsafe(nil), Pathname)

# Timezone data Storage class
#
# source://TimezoneParser//lib/timezone_parser/data/storage.rb#9
class TimezoneParser::Data::Storage
  class << self
    # source://TimezoneParser//lib/timezone_parser/data/storage.rb#22
    def Abbreviations; end

    # source://TimezoneParser//lib/timezone_parser/data/storage.rb#46
    def Metazones; end

    # source://TimezoneParser//lib/timezone_parser/data/storage.rb#84
    def RailsTranslated; end

    # source://TimezoneParser//lib/timezone_parser/data/storage.rb#77
    def RailsZones; end

    # source://TimezoneParser//lib/timezone_parser/data/storage.rb#39
    def TimezoneCountries; end

    # source://TimezoneParser//lib/timezone_parser/data/storage.rb#32
    def Timezones; end

    # source://TimezoneParser//lib/timezone_parser/data/storage.rb#70
    def WindowsOffsets; end

    # source://TimezoneParser//lib/timezone_parser/data/storage.rb#63
    def WindowsTimezones; end

    # source://TimezoneParser//lib/timezone_parser/data/storage.rb#56
    def WindowsZones; end

    # source://TimezoneParser//lib/timezone_parser/data/storage.rb#149
    def getOffsets(zone, types = T.unsafe(nil)); end

    # source://TimezoneParser//lib/timezone_parser/data/storage.rb#117
    def getTimezones(metazone, toTime, fromTime, regions = T.unsafe(nil)); end

    # source://TimezoneParser//lib/timezone_parser/data/storage.rb#136
    def getTimezones2(zone, regions = T.unsafe(nil)); end

    # source://TimezoneParser//lib/timezone_parser/data/storage.rb#91
    def preload(modules); end

    # source://TimezoneParser//lib/timezone_parser/data/storage.rb#164
    def proccessData(data); end
  end
end

# Path to Vendor directory
#
# source://TimezoneParser//lib/timezone_parser/data.rb#15
TimezoneParser::Data::VendorDir = T.let(T.unsafe(nil), Pathname)

# Rails zone data
#
# source://TimezoneParser//lib/timezone_parser/rails_zone.rb#5
class TimezoneParser::RailsData < ::TimezoneParser::Data
  # Returns the value of attribute RailsZone.
  #
  # source://TimezoneParser//lib/timezone_parser/rails_zone.rb#10
  def RailsZone; end

  # source://TimezoneParser//lib/timezone_parser/rails_zone.rb#11
  def processEntry(data, rails); end
end

# Rails zone
#
# source://TimezoneParser//lib/timezone_parser/rails_zone.rb#29
class TimezoneParser::RailsZone < ::TimezoneParser::ZoneInfo
  # Rails zone instance
  #
  # @param name [String] Rails zone name
  # @return [RailsZone] a new instance of RailsZone
  #
  # source://TimezoneParser//lib/timezone_parser/rails_zone.rb#47
  def initialize(name); end

  # Returns the value of attribute All.
  #
  # source://TimezoneParser//lib/timezone_parser/rails_zone.rb#43
  def All; end

  # Sets the attribute All
  #
  # @param value the value to set the attribute All to.
  #
  # source://TimezoneParser//lib/timezone_parser/rails_zone.rb#43
  def All=(_arg0); end

  # Rails zone data
  #
  # @return [RailsData] data
  #
  # source://TimezoneParser//lib/timezone_parser/rails_zone.rb#86
  def getData; end

  # Get UTC offsets in seconds
  #
  # @return [Array<Fixnum>] list of timezone offsets in seconds
  #
  # source://TimezoneParser//lib/timezone_parser/rails_zone.rb#112
  def getOffsets; end

  # Rails zone identifier
  #
  # @return [String] Rails zone identifier
  #
  # source://TimezoneParser//lib/timezone_parser/rails_zone.rb#123
  def getZone; end

  # Check if Rails zone is valid
  #
  # @return [Boolean] whether Rails zone is valid
  #
  # source://TimezoneParser//lib/timezone_parser/rails_zone.rb#68
  def isValid?; end

  # Set locales and all
  #
  # @param locales [Array<String>] search only in these locales
  # @param all [Boolean] specify whether should search for all zones or return as soon as found any
  # @return [RailsZone] self
  # @see Locales
  #
  # source://TimezoneParser//lib/timezone_parser/rails_zone.rb#60
  def set(locales = T.unsafe(nil), all = T.unsafe(nil)); end

  class << self
    # Locales which will be used for RailsZone methods if not specified there
    #
    # Each locale is language identifier based on IETF BCP 47 and ISO 639 code
    #
    # @return [Array<String>] list containing locale identifiers
    # @see http://en.wikipedia.org/wiki/IETF_language_tag
    #
    # source://TimezoneParser//lib/timezone_parser/rails_zone.rb#39
    def Locales; end

    # Get Metazone identifiers for given Rails zone name
    #
    # @param name [String] Rails zone name
    # @param locales [Array<String>] search zone name only for these locales
    # @param all [Boolean] specify whether should search for all timezones or return as soon as found any
    # @return [Array<String>] list of metazone identifiers
    # @see Locales
    # @see Regions
    #
    # source://TimezoneParser//lib/timezone_parser/rails_zone.rb#165
    def getMetazones(name, locales = T.unsafe(nil), all = T.unsafe(nil)); end

    # Get UTC offsets in seconds for given Rails zone name
    #
    # @param name [String] Rails zone name
    # @param toTime [DateTime] look for offsets which came into effect before this date, exclusive
    # @param fromTime [DateTime] look for offsets which came into effect at this date, inclusive
    # @param locales [Array<String>] search zone name only for these locales
    # @param all [Boolean] specify whether should search for all timezones or return as soon as found any
    # @return [Array<Fixnum>] list of timezone offsets in seconds
    # @see Locales
    #
    # source://TimezoneParser//lib/timezone_parser/rails_zone.rb#144
    def getOffsets(name, toTime = T.unsafe(nil), fromTime = T.unsafe(nil), locales = T.unsafe(nil), all = T.unsafe(nil)); end

    # Get Timezone identifiers for given Rails zone name
    #
    # @param name [String] Rails zone name
    # @param locales [Array<String>] search zone name only for these locales
    # @param all [Boolean] specify whether should search for all timezones or return as soon as found any
    # @return [Array<String>] list of timezone identifiers
    # @see Locales
    #
    # source://TimezoneParser//lib/timezone_parser/rails_zone.rb#154
    def getTimezones(name, locales = T.unsafe(nil), all = T.unsafe(nil)); end

    # Rails zone identifier
    #
    # @param name [String] Rails zone name
    # @param locales [Array<String>] search zone name only for these locales
    # @param all [Boolean] specify whether should search for all timezones or return as soon as found any
    # @return [String] Timezone identifier
    #
    # source://TimezoneParser//lib/timezone_parser/rails_zone.rb#174
    def getZone(name, locales = T.unsafe(nil), all = T.unsafe(nil)); end

    # Check if given Rails zone name is a valid timezone
    #
    # @param name [String] Rails zone name
    # @param locales [Array<String>] search zone name only for these locales
    # @return [Boolean] whether Timezone is valid
    # @see Locales
    #
    # source://TimezoneParser//lib/timezone_parser/rails_zone.rb#132
    def isValid?(name, locales = T.unsafe(nil)); end
  end
end

# Timezone
#
# source://TimezoneParser//lib/timezone_parser/timezone.rb#5
class TimezoneParser::Timezone < ::TimezoneParser::ZoneInfo
  # Timezone instance
  #
  # @param timezone [String] Timezone name
  # @return [Timezone] a new instance of Timezone
  #
  # source://TimezoneParser//lib/timezone_parser/timezone.rb#38
  def initialize(timezone); end

  # Returns the value of attribute All.
  #
  # source://TimezoneParser//lib/timezone_parser/timezone.rb#34
  def All; end

  # Sets the attribute All
  #
  # @param value the value to set the attribute All to.
  #
  # source://TimezoneParser//lib/timezone_parser/timezone.rb#34
  def All=(_arg0); end

  # Returns the value of attribute Locales.
  #
  # source://TimezoneParser//lib/timezone_parser/timezone.rb#32
  def Locales; end

  # Sets the attribute Locales
  #
  # @param value the value to set the attribute Locales to.
  #
  # source://TimezoneParser//lib/timezone_parser/timezone.rb#32
  def Locales=(_arg0); end

  # Returns the value of attribute Regions.
  #
  # source://TimezoneParser//lib/timezone_parser/timezone.rb#33
  def Regions; end

  # Sets the attribute Regions
  #
  # @param value the value to set the attribute Regions to.
  #
  # source://TimezoneParser//lib/timezone_parser/timezone.rb#33
  def Regions=(_arg0); end

  # Abbreviation data
  #
  # @return [Data] data
  #
  # source://TimezoneParser//lib/timezone_parser/timezone.rb#77
  def getData; end

  # Get UTC offsets in seconds
  #
  # @return [Array<Fixnum>] list of timezone offsets in seconds
  #
  # source://TimezoneParser//lib/timezone_parser/timezone.rb#98
  def getOffsets; end

  # Check if timezone is valid
  #
  # @return [Boolean] whether timezone is valid
  #
  # source://TimezoneParser//lib/timezone_parser/timezone.rb#60
  def isValid?; end

  # Set locales, regions and all
  #
  # @param locales [Array<String>] search only in these locales
  # @param regions [Array<String>] filter for these regions
  # @param all [Boolean] specify whether should search for all timezones or return as soon as found any
  # @return [Timezone] self
  #
  # source://TimezoneParser//lib/timezone_parser/timezone.rb#51
  def set(locales = T.unsafe(nil), regions = T.unsafe(nil), all = T.unsafe(nil)); end

  class << self
    # Locales which will be used for Timezone methods if not specified there
    #
    # Each locale is language identifier based on IETF BCP 47
    #
    # @return [Array<String>] list containing locale identifiers
    # @see http://en.wikipedia.org/wiki/IETF_language_tag
    # @see http://unicode.org/reports/tr35/#Unicode_Language_and_Locale_Identifiers
    # @see http://www.unicode.org/cldr/charts/latest/supplemental/language_territory_information.html
    #
    # source://TimezoneParser//lib/timezone_parser/timezone.rb#19
    def Locales; end

    # Regions which will be used for Timezone methods if not specified there
    #
    # Each region is CLDR territory (UN M.49)
    #
    # @return [Array<String>] list containing region identifiers
    # @see http://www.unicode.org/cldr/charts/latest/supplemental/territory_containment_un_m_49.html
    #
    # source://TimezoneParser//lib/timezone_parser/timezone.rb#28
    def Regions; end

    # Get Metazone identifiers for given Timezone name
    #
    # @param timezone [String] Timezone name
    # @param toTime [DateTime] look for timezones which came into effect before this date, exclusive
    # @param fromTime [DateTime] look for timezones which came into effect at this date, inclusive
    # @param locales [Array<String>] search Timezone name only for these locales
    # @param regions [Array<String>] look for timezones only for these regions
    # @param all [Boolean] specify whether should search for all timezones or return as soon as found any
    # @return [Array<String>] list of metazone identifiers
    # @see Locales
    # @see Regions
    #
    # source://TimezoneParser//lib/timezone_parser/timezone.rb#155
    def getMetazones(timezone, toTime = T.unsafe(nil), fromTime = T.unsafe(nil), locales = T.unsafe(nil), regions = T.unsafe(nil), all = T.unsafe(nil)); end

    # Get UTC offsets in seconds for given Timezone name
    #
    # @param timezone [String] Timezone name
    # @param toTime [DateTime] look for offsets which came into effect before this date, exclusive
    # @param fromTime [DateTime] look for offsets which came into effect at this date, inclusive
    # @param locales [Array<String>] search Timezone name only for these locales
    # @param regions [Array<String>] look for offsets only for these regions
    # @param all [Boolean] specify whether should search for all timezones or return as soon as found any
    # @return [Array<Fixnum>] list of timezone offsets in seconds
    # @see Locales
    # @see Regions
    #
    # source://TimezoneParser//lib/timezone_parser/timezone.rb#127
    def getOffsets(timezone, toTime = T.unsafe(nil), fromTime = T.unsafe(nil), locales = T.unsafe(nil), regions = T.unsafe(nil), all = T.unsafe(nil)); end

    # Get Timezone identifiers for given Timezone name
    #
    # @param timezone [String] Timezone name
    # @param toTime [DateTime] look for timezones which came into effect before this date, exclusive
    # @param fromTime [DateTime] look for timezones which came into effect at this date, inclusive
    # @param locales [Array<String>] search Timezone name only for these locales
    # @param regions [Array<String>] look for timezones only for these regions
    # @param all [Boolean] specify whether should search for all timezones or return as soon as found any
    # @return [Array<String>] list of timezone identifiers
    # @see Locales
    # @see Regions
    #
    # source://TimezoneParser//lib/timezone_parser/timezone.rb#141
    def getTimezones(timezone, toTime = T.unsafe(nil), fromTime = T.unsafe(nil), locales = T.unsafe(nil), regions = T.unsafe(nil), all = T.unsafe(nil)); end

    # Check if given Timezone name is a valid timezone
    #
    # @param timezone [String] Timezone name
    # @param locales [Array<String>] search Timezone name only for these locales
    # @return [Boolean] whether Timezone is valid
    # @see Locales
    #
    # source://TimezoneParser//lib/timezone_parser/timezone.rb#113
    def isValid?(timezone, locales = T.unsafe(nil)); end
  end
end

# Version
#
# source://TimezoneParser//lib/timezone_parser/version.rb#4
TimezoneParser::VERSION = T.let(T.unsafe(nil), String)

# Windows Timezone data
#
# source://TimezoneParser//lib/timezone_parser/windows_zone.rb#5
class TimezoneParser::WindowsData < ::TimezoneParser::Data
  # Returns the value of attribute WindowsZone.
  #
  # source://TimezoneParser//lib/timezone_parser/windows_zone.rb#10
  def WindowsZone; end

  # source://TimezoneParser//lib/timezone_parser/windows_zone.rb#11
  def processEntry(entry, region); end
end

# Windows Timezone
#
# source://TimezoneParser//lib/timezone_parser/windows_zone.rb#26
class TimezoneParser::WindowsZone < ::TimezoneParser::ZoneInfo
  # Windows Timezone instance
  #
  # @param name [String] Windows Timezone name
  # @return [WindowsZone] a new instance of WindowsZone
  #
  # source://TimezoneParser//lib/timezone_parser/windows_zone.rb#56
  def initialize(name); end

  # Returns the value of attribute All.
  #
  # source://TimezoneParser//lib/timezone_parser/windows_zone.rb#52
  def All; end

  # Sets the attribute All
  #
  # @param value the value to set the attribute All to.
  #
  # source://TimezoneParser//lib/timezone_parser/windows_zone.rb#52
  def All=(_arg0); end

  # Returns the value of attribute Locales.
  #
  # source://TimezoneParser//lib/timezone_parser/windows_zone.rb#50
  def Locales; end

  # Sets the attribute Locales
  #
  # @param value the value to set the attribute Locales to.
  #
  # source://TimezoneParser//lib/timezone_parser/windows_zone.rb#50
  def Locales=(_arg0); end

  # Returns the value of attribute Regions.
  #
  # source://TimezoneParser//lib/timezone_parser/windows_zone.rb#51
  def Regions; end

  # Sets the attribute Regions
  #
  # @param value the value to set the attribute Regions to.
  #
  # source://TimezoneParser//lib/timezone_parser/windows_zone.rb#51
  def Regions=(_arg0); end

  # Windows Timezone data
  #
  # @return [WindowsData] data
  #
  # source://TimezoneParser//lib/timezone_parser/windows_zone.rb#94
  def getData; end

  # Windows Timezone identifier
  #
  # @return [String] Timezone identifier
  #
  # source://TimezoneParser//lib/timezone_parser/windows_zone.rb#115
  def getZone; end

  # Check if timezone is valid
  #
  # @return [Boolean] whether timezone is valid
  #
  # source://TimezoneParser//lib/timezone_parser/windows_zone.rb#79
  def isValid?; end

  # Set locales, regions and all
  #
  # @param locales [Array<String>] search only in these locales
  # @param regions [Array<String>] filter for these regions
  # @param all [Boolean] specify whether should search for all timezones or return as soon as found any
  # @return [WindowsZone] self
  # @see Locales
  # @see Regions
  #
  # source://TimezoneParser//lib/timezone_parser/windows_zone.rb#70
  def set(locales = T.unsafe(nil), regions = T.unsafe(nil), all = T.unsafe(nil)); end

  class << self
    # Locales which will be used for WindowsZone methods if not specified there
    #
    # Each locale consists of language identifier and country/region identifier
    #
    # @return [Array<String>] list containing locale identifiers
    # @see http://msdn.microsoft.com/en-us/library/dd318693.aspx
    #
    # source://TimezoneParser//lib/timezone_parser/windows_zone.rb#37
    def Locales; end

    # Regions which will be used for WindowsZone methods if not specified there
    #
    # Each region is either ISO 3166-1 alpha-2 code
    #
    # @return [Array<String>] list containing region identifiers
    # @see http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2
    #
    # source://TimezoneParser//lib/timezone_parser/windows_zone.rb#46
    def Regions; end

    # Get Metazone identifiers for given Windows Timezone name
    #
    # @param name [String] Windows Timezone name
    # @param locales [Array<String>] search Timezone name only for these locales
    # @param all [Boolean] specify whether should search for all timezones or return as soon as found any
    # @return [Array<String>] list of metazone identifiers
    # @see Locales
    #
    # source://TimezoneParser//lib/timezone_parser/windows_zone.rb#156
    def getMetazones(name, locales = T.unsafe(nil), all = T.unsafe(nil)); end

    # Get UTC offsets in seconds for given Windows Timezone name
    #
    # @param name [String] Windows Timezone name
    # @param locales [Array<String>] search Timezone name only for these locales
    # @param all [Boolean] specify whether should search for all timezones or return as soon as found any
    # @return [Array<Fixnum>] list of timezone offsets in seconds
    # @see Locales
    #
    # source://TimezoneParser//lib/timezone_parser/windows_zone.rb#134
    def getOffsets(name, locales = T.unsafe(nil), all = T.unsafe(nil)); end

    # Get Timezone identifiers for given Windows Timezone name
    #
    # @param name [String] Windows Timezone name
    # @param locales [Array<String>] search Timezone name only for these locales
    # @param regions [Array<String>] look for timezones only for these regions
    # @param all [Boolean] specify whether should search for all timezones or return as soon as found any
    # @return [Array<String>] list of timezone identifiers
    # @see Locales
    # @see Regions
    #
    # source://TimezoneParser//lib/timezone_parser/windows_zone.rb#146
    def getTimezones(name, locales = T.unsafe(nil), regions = T.unsafe(nil), all = T.unsafe(nil)); end

    # Windows Timezone identifier
    #
    # @param name [String] Windows Timezone name
    # @param locales [Array<String>] search Timezone name only for these locales
    # @param all [Boolean] specify whether should search for all timezones or return as soon as found any
    # @return [String] Timezone identifier
    #
    # source://TimezoneParser//lib/timezone_parser/windows_zone.rb#165
    def getZone(name, locales = T.unsafe(nil), all = T.unsafe(nil)); end

    # Check if given Windows Timezone name is a valid timezone
    #
    # @param name [String] Windows Timezone name
    # @param locales [Array<String>] search Timezone name only for these locales
    # @return [Boolean] whether Timezone is valid
    # @see Locales
    #
    # source://TimezoneParser//lib/timezone_parser/windows_zone.rb#124
    def isValid?(name, locales = T.unsafe(nil)); end
  end
end

# Generic Timezone class
#
# source://TimezoneParser//lib/timezone_parser/zone_info.rb#5
class TimezoneParser::ZoneInfo
  # Returns the value of attribute FromTime.
  #
  # source://TimezoneParser//lib/timezone_parser/zone_info.rb#15
  def FromTime; end

  # Sets the attribute FromTime
  #
  # @param value the value to set the attribute FromTime to.
  #
  # source://TimezoneParser//lib/timezone_parser/zone_info.rb#15
  def FromTime=(_arg0); end

  # Returns the value of attribute ToTime.
  #
  # source://TimezoneParser//lib/timezone_parser/zone_info.rb#14
  def ToTime; end

  # Sets the attribute ToTime
  #
  # @param value the value to set the attribute ToTime to.
  #
  # source://TimezoneParser//lib/timezone_parser/zone_info.rb#14
  def ToTime=(_arg0); end

  # Get Timezone data
  #
  # @raise [StandardError]
  #
  # source://TimezoneParser//lib/timezone_parser/zone_info.rb#29
  def getData; end

  # Get Metazone identifiers
  #
  # @return [Array<String>] list of Metazone identifiers
  #
  # source://TimezoneParser//lib/timezone_parser/zone_info.rb#62
  def getMetazones; end

  # Get UTC offsets in seconds
  #
  # @return [Array<Fixnum>] list of timezone offsets in seconds
  #
  # source://TimezoneParser//lib/timezone_parser/zone_info.rb#35
  def getOffsets; end

  # Get Timezone identifiers
  #
  # @return [Array<String>] list of timezone identifiers
  #
  # source://TimezoneParser//lib/timezone_parser/zone_info.rb#44
  def getTimezones; end

  # Get types
  #
  # @return [Symbol] types
  #
  # source://TimezoneParser//lib/timezone_parser/zone_info.rb#53
  def getTypes; end

  # Set time range
  #
  # @param toTime [DateTime] filter timezones before this date, exclusive
  # @param fromTime [DateTime] filter timezones at this date, inclusive
  # @return [ZoneInfo] self
  #
  # source://TimezoneParser//lib/timezone_parser/zone_info.rb#20
  def setTime(toTime = T.unsafe(nil), fromTime = T.unsafe(nil)); end
end
