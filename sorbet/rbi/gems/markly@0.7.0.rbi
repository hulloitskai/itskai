# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `markly` gem.
# Please instead update this file by running `bin/tapioca gem markly`.

# source://markly//lib/markly/flags.rb#3
module Markly
  class << self
    def extensions; end

    # Public: Parses a Markdown string into a `document` node.
    #
    # string - {String} to be parsed
    # option - A {Symbol} or {Array of Symbol}s indicating the parse options
    # extensions - An {Array of Symbol}s indicating the extensions to use
    #
    # Returns the `parser` node.
    #
    # source://markly//lib/markly.rb#21
    def parse(text, flags: T.unsafe(nil), extensions: T.unsafe(nil)); end

    # Public:  Parses a Markdown string into an HTML string.
    #
    # text - A {String} of text
    # option - Either a {Symbol} or {Array of Symbol}s indicating the render options
    # extensions - An {Array of Symbol}s indicating the extensions to use
    #
    # Returns a {String} of converted HTML.
    #
    # source://markly//lib/markly.rb#38
    def render_html(text, flags: T.unsafe(nil), parse_flags: T.unsafe(nil), render_flags: T.unsafe(nil), extensions: T.unsafe(nil)); end
  end
end

# source://markly//lib/markly/flags.rb#4
Markly::DEFAULT = T.let(T.unsafe(nil), Integer)

class Markly::Error < ::StandardError; end

# source://markly//lib/markly/flags.rb#8
Markly::FOOTNOTES = T.let(T.unsafe(nil), Integer)

# source://markly//lib/markly/flags.rb#26
Markly::FULL_INFO_STRING = T.let(T.unsafe(nil), Integer)

# source://markly//lib/markly/flags.rb#24
Markly::GITHUB_PRE_LANG = T.let(T.unsafe(nil), Integer)

# source://markly//lib/markly/flags.rb#22
Markly::HARD_BREAKS = T.let(T.unsafe(nil), Integer)

# source://markly//lib/markly/flags.rb#7
Markly::LIBERAL_HTML_TAG = T.let(T.unsafe(nil), Integer)

# source://markly//lib/markly/flags.rb#23
Markly::NO_BREAKS = T.let(T.unsafe(nil), Integer)

# source://markly//lib/markly/node/inspect.rb#6
class Markly::Node
  include ::Enumerable
  include ::Markly::Node::Inspect

  def _render_commonmark(*_arg0); end
  def _render_html(_arg0, _arg1); end
  def _render_plaintext(*_arg0); end
  def append_child(_arg0); end
  def delete; end

  # Public: Iterate over the children (if any) of the current pointer.
  #
  # source://markly//lib/markly/node.rb#55
  def each; end

  # Deprecated: Please use `each` instead
  #
  # source://markly//lib/markly/node.rb#67
  def each_child(&block); end

  def fence_info; end
  def fence_info=(_arg0); end
  def first_child; end
  def header_level; end
  def header_level=(_arg0); end
  def html_escape_href(_arg0); end
  def html_escape_html(_arg0); end
  def insert_after(_arg0); end
  def insert_before(_arg0); end
  def last_child; end
  def list_start; end
  def list_start=(_arg0); end
  def list_tight; end
  def list_tight=(_arg0); end
  def list_type; end
  def list_type=(_arg0); end
  def next; end
  def parent; end
  def prepend_child(_arg0); end
  def previous; end
  def replace(_arg0); end
  def source_position; end
  def string_content; end
  def string_content=(_arg0); end
  def table_alignments; end
  def tasklist_item_checked=(_arg0); end
  def tasklist_item_checked?; end
  def tasklist_state; end
  def title; end
  def title=(_arg0); end

  # Public: Convert the node to a CommonMark string.
  #
  # options - A {Symbol} or {Array of Symbol}s indicating the render options
  # width - Column to wrap the output at
  #
  # Returns a {String}.
  #
  # source://markly//lib/markly/node.rb#38
  def to_commonmark(flags: T.unsafe(nil), width: T.unsafe(nil)); end

  # Public: Convert the node to an HTML string.
  #
  # options - A {Symbol} or {Array of Symbol}s indicating the render options
  # extensions - An {Array of Symbol}s indicating the extensions to use
  #
  # Returns a {String}.
  #
  # source://markly//lib/markly/node.rb#28
  def to_html(flags: T.unsafe(nil), extensions: T.unsafe(nil)); end

  # Public: Convert the node to a CommonMark string.
  #
  # options - A {Symbol} or {Array of Symbol}s indicating the render options
  # width - Column to wrap the output at
  #
  # Returns a {String}.
  #
  # source://markly//lib/markly/node.rb#38
  def to_markdown(flags: T.unsafe(nil), width: T.unsafe(nil)); end

  # Public: Convert the node to a plain text string.
  #
  # options - A {Symbol} or {Array of Symbol}s indicating the render options
  # width - Column to wrap the output at
  #
  # Returns a {String}.
  #
  # source://markly//lib/markly/node.rb#50
  def to_plaintext(flags: T.unsafe(nil), width: T.unsafe(nil)); end

  def type; end
  def type_string; end
  def url; end
  def url=(_arg0); end

  # Public: An iterator that "walks the tree," descending into children recursively.
  #
  # blk - A {Proc} representing the action to take for each child
  #
  # @yield [_self]
  # @yieldparam _self [Markly::Node] the object that the method was called on
  #
  # source://markly//lib/markly/node.rb#13
  def walk(&block); end

  class << self
    def new(_arg0); end
  end
end

# source://markly//lib/markly/node/inspect.rb#7
module Markly::Node::Inspect
  # source://markly//lib/markly/node/inspect.rb#10
  def inspect; end

  # @param printer [PrettyPrint] pp
  #
  # source://markly//lib/markly/node/inspect.rb#15
  def pretty_print(printer); end
end

# source://markly//lib/markly/node/inspect.rb#8
Markly::Node::Inspect::PP_INDENT_SIZE = T.let(T.unsafe(nil), Integer)

# source://markly//lib/markly/flags.rb#12
Markly::PARSE_FLAGS = T.let(T.unsafe(nil), Hash)

class Markly::Parser
  def initialize(_arg0); end

  def enable(_arg0); end
  def parse(_arg0); end
end

# source://markly//lib/markly/flags.rb#28
Markly::RENDER_FLAGS = T.let(T.unsafe(nil), Hash)

# source://markly//lib/markly/renderer/generic.rb#7
module Markly::Renderer; end

# source://markly//lib/markly/renderer/generic.rb#8
class Markly::Renderer::Generic
  # @return [Generic] a new instance of Generic
  #
  # source://markly//lib/markly/renderer/generic.rb#9
  def initialize(flags: T.unsafe(nil), extensions: T.unsafe(nil)); end

  # source://markly//lib/markly/renderer/generic.rb#71
  def block; end

  # source://markly//lib/markly/renderer/generic.rb#63
  def blocksep; end

  # source://markly//lib/markly/renderer/generic.rb#51
  def code_block(node); end

  # source://markly//lib/markly/renderer/generic.rb#77
  def container(starter, ender); end

  # source://markly//lib/markly/renderer/generic.rb#67
  def containersep; end

  # source://markly//lib/markly/renderer/generic.rb#57
  def cr; end

  # source://markly//lib/markly/renderer/generic.rb#47
  def document(_node); end

  # Returns the value of attribute in_plain.
  #
  # source://markly//lib/markly/renderer/generic.rb#19
  def in_plain; end

  # Sets the attribute in_plain
  #
  # @param value the value to set the attribute in_plain to.
  #
  # source://markly//lib/markly/renderer/generic.rb#19
  def in_plain=(_arg0); end

  # Returns the value of attribute in_tight.
  #
  # source://markly//lib/markly/renderer/generic.rb#18
  def in_tight; end

  # Sets the attribute in_tight
  #
  # @param value the value to set the attribute in_tight to.
  #
  # source://markly//lib/markly/renderer/generic.rb#18
  def in_tight=(_arg0); end

  # source://markly//lib/markly/renderer/generic.rb#21
  def out(*args); end

  # source://markly//lib/markly/renderer/generic.rb#83
  def plain; end

  # source://markly//lib/markly/renderer/generic.rb#55
  def reference_def(_node); end

  # source://markly//lib/markly/renderer/generic.rb#35
  def render(node); end

  private

  # source://markly//lib/markly/renderer/generic.rb#92
  def escape_href(str); end

  # source://markly//lib/markly/renderer/generic.rb#96
  def escape_html(str); end

  # @return [Boolean]
  #
  # source://markly//lib/markly/renderer/generic.rb#126
  def flag_enabled?(flag); end

  # source://markly//lib/markly/renderer/generic.rb#118
  def source_position(node); end

  # source://markly//lib/markly/renderer/generic.rb#100
  def tagfilter(str); end
end

# source://markly//lib/markly/renderer/html.rb#8
class Markly::Renderer::HTML < ::Markly::Renderer::Generic
  # @return [HTML] a new instance of HTML
  #
  # source://markly//lib/markly/renderer/html.rb#9
  def initialize(ids: T.unsafe(nil), tight: T.unsafe(nil), **options); end

  # source://markly//lib/markly/renderer/html.rb#105
  def blockquote(node); end

  # source://markly//lib/markly/renderer/html.rb#183
  def code(node); end

  # source://markly//lib/markly/renderer/html.rb#119
  def code_block(node); end

  # source://markly//lib/markly/renderer/html.rb#17
  def document(_); end

  # source://markly//lib/markly/renderer/html.rb#156
  def emph(_); end

  # source://markly//lib/markly/renderer/html.rb#248
  def footnote_definition(_); end

  # source://markly//lib/markly/renderer/html.rb#243
  def footnote_reference(node); end

  # source://markly//lib/markly/renderer/html.rb#32
  def header(node); end

  # source://markly//lib/markly/renderer/html.rb#113
  def hrule(node); end

  # source://markly//lib/markly/renderer/html.rb#138
  def html(node); end

  # source://markly//lib/markly/renderer/html.rb#24
  def id_for(node); end

  # source://markly//lib/markly/renderer/html.rb#170
  def image(node); end

  # source://markly//lib/markly/renderer/html.rb#148
  def inline_html(node); end

  # source://markly//lib/markly/renderer/html.rb#189
  def linebreak(_node); end

  # source://markly//lib/markly/renderer/html.rb#164
  def link(node); end

  # source://markly//lib/markly/renderer/html.rb#61
  def list(node); end

  # source://markly//lib/markly/renderer/html.rb#85
  def list_item(node); end

  # source://markly//lib/markly/renderer/html.rb#45
  def paragraph(node); end

  # source://markly//lib/markly/renderer/html.rb#193
  def softbreak(_); end

  # source://markly//lib/markly/renderer/html.rb#239
  def strikethrough(_); end

  # source://markly//lib/markly/renderer/html.rb#160
  def strong(_); end

  # source://markly//lib/markly/renderer/html.rb#203
  def table(node); end

  # source://markly//lib/markly/renderer/html.rb#228
  def table_cell(node); end

  # source://markly//lib/markly/renderer/html.rb#211
  def table_header(node); end

  # source://markly//lib/markly/renderer/html.rb#219
  def table_row(node); end

  # source://markly//lib/markly/renderer/html.rb#94
  def tasklist(node); end

  # source://markly//lib/markly/renderer/html.rb#179
  def text(node); end

  private

  # @return [Boolean]
  #
  # source://markly//lib/markly/renderer/html.rb#277
  def checked?(node); end

  # source://markly//lib/markly/renderer/html.rb#264
  def out_footnote_backref; end

  # @return [Boolean]
  #
  # source://markly//lib/markly/renderer/html.rb#273
  def tasklist?(node); end
end

# source://markly//lib/markly/flags.rb#6
Markly::SMART = T.let(T.unsafe(nil), Integer)

# source://markly//lib/markly/flags.rb#21
Markly::SOURCE_POSITION = T.let(T.unsafe(nil), Integer)

# source://markly//lib/markly/flags.rb#9
Markly::STRIKETHROUGH_DOUBLE_TILDE = T.let(T.unsafe(nil), Integer)

# source://markly//lib/markly/flags.rb#25
Markly::TABLE_PREFER_STYLE_ATTRIBUTES = T.let(T.unsafe(nil), Integer)

# source://markly//lib/markly/flags.rb#10
Markly::UNSAFE = T.let(T.unsafe(nil), Integer)

# source://markly//lib/markly/flags.rb#5
Markly::VALIDATE_UTF8 = T.let(T.unsafe(nil), Integer)

# source://markly//lib/markly/version.rb#4
Markly::VERSION = T.let(T.unsafe(nil), String)
