"""
Requires that exactly one field must be supplied and that field must not be `null`.
"""
directive @oneOf on INPUT_OBJECT

"""Autogenerated input type of ActivateScottkitSignal"""
input ActivateScottkitSignalInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  signal: ScottkitSignal!
}

"""Autogenerated return type of ActivateScottkitSignal."""
type ActivateScottkitSignalPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  success: Boolean!
}

"""Autogenerated input type of AddJournalEntryComment"""
input AddJournalEntryCommentInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  entryId: ID!
  text: String!
}

"""Autogenerated return type of AddJournalEntryComment."""
type AddJournalEntryCommentPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  comment: NotionComment!
  success: Boolean!
}

type Coordinates {
  latitude: Float!
  longitude: Float!
}

"""Autogenerated input type of CreateDishwatcherDevice"""
input CreateDishwatcherDeviceInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  name: String!
}

"""Autogenerated return type of CreateDishwatcherDevice."""
type CreateDishwatcherDevicePayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  device: DishwatcherDevice
  errors: [InputFieldError!]
  success: Boolean!
}

"""Autogenerated input type of CreateICloudConnection"""
input CreateICloudConnectionInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  email: String!
  password: String!
}

"""Autogenerated return type of CreateICloudConnection."""
type CreateICloudConnectionPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  requires2fa: Boolean!
  success: Boolean!
}

"""Autogenerated input type of CreateLocationAccessGrant"""
input CreateLocationAccessGrantInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  expiresInSeconds: Int!
  password: String
  recipient: String!
}

"""Autogenerated return type of CreateLocationAccessGrant."""
type CreateLocationAccessGrantPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  errors: [InputFieldError!]
  grant: LocationAccessGrant
  success: Boolean!
}

"""Autogenerated input type of CreateTimelinePhotoWithTimestamp"""
input CreateTimelinePhotoWithTimestampInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  photo: UploadInput!
  timestamp: DateTime!
}

"""Autogenerated return type of CreateTimelinePhotoWithTimestamp."""
type CreateTimelinePhotoWithTimestampPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  errors: [InputFieldError!]
  photo: TimelinePhoto
  success: Boolean!
}

type CurrentlyPlaying {
  progressMilliseconds: Int!
  timestamp: DateTime!
  track: SpotifyTrack!
}

"""An ISO 8601-encoded date"""
scalar Date

"""An ISO 8601-encoded datetime"""
scalar DateTime

"""Autogenerated input type of DeleteGoogleConnection"""
input DeleteGoogleConnectionInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated return type of DeleteGoogleConnection."""
type DeleteGoogleConnectionPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  success: Boolean!
}

"""Autogenerated input type of DeleteICloudConnection"""
input DeleteICloudConnectionInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated return type of DeleteICloudConnection."""
type DeleteICloudConnectionPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  success: Boolean!
}

"""Autogenerated input type of DeleteLocationAccessGrant"""
input DeleteLocationAccessGrantInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  grantId: ID!
}

"""Autogenerated return type of DeleteLocationAccessGrant."""
type DeleteLocationAccessGrantPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  success: Boolean!
}

"""Autogenerated input type of DeleteSpotifyConnection"""
input DeleteSpotifyConnectionInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated return type of DeleteSpotifyConnection."""
type DeleteSpotifyConnectionPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  success: Boolean!
}

type DishwatcherDevice implements Node {
  createdAt: DateTime!

  """ID of the object."""
  id: ID!
  name: String!
  secretKey: String!
}

type ICloudConnection {
  credentials: ICloudCredentials
  status: ICloudConnectionStatus!
}

enum ICloudConnectionStatus {
  CONNECTED
  DISCONNECTED
  REQUIRES_2FA
}

type ICloudCredentials implements Node {
  cookies: String
  email: String!

  """ID of the object."""
  id: ID!
  password: String!
  session: JSON
}

type Image implements Node & Upload {
  byteSize: Int!
  filename: String!

  """ID of the object."""
  id: ID!
  signedId: String!
  src(size: ImageSize = MD): String!
  url: String!
}

enum ImageSize {
  LG
  MD
  SM
}

"""Autogenerated input type of ImportTimelineActivities"""
input ImportTimelineActivitiesInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  locationHistory: UploadInput!
}

"""Autogenerated return type of ImportTimelineActivities."""
type ImportTimelineActivitiesPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  importCount: Int!
  success: Boolean!
}

"""Autogenerated input type of ImportTimelinePhotos"""
input ImportTimelinePhotosInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  photos: [UploadInput!]!
}

"""Autogenerated return type of ImportTimelinePhotos."""
type ImportTimelinePhotosPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  importCount: Int!
  success: Boolean!
}

type InputFieldError {
  field: String!
  message: String!
}

"""Represents untyped JSON"""
scalar JSON

type JournalEntry implements Node {
  content: [JSON!]!

  """ID of the object."""
  id: ID!
  modifiedAt: DateTime!
  nextEntryId: ID
  startedAt: DateTime!
  title: String!
  url: String!
}

type JourneysSession implements Node {
  """ID of the object."""
  id: ID!
  participations: [JourneysSessionParticipation!]!
  startedAt: DateTime!
  url: String!
  viewerParticipation: JourneysSessionParticipation
}

"""The connection type for JourneysSession."""
type JourneysSessionConnection {
  """A list of edges."""
  edges: [JourneysSessionEdge!]!

  """A list of nodes."""
  nodes: [JourneysSession!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!
  totalCount: Int!
}

"""An edge in a connection."""
type JourneysSessionEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: JourneysSession!
}

type JourneysSessionParticipation implements Node {
  goal: String!

  """ID of the object."""
  id: ID!
  participantIsViewer: Boolean!
  participantName: String!
  session: [JourneysSession!]!
}

"""Autogenerated input type of LeaveJourneysSession"""
input LeaveJourneysSessionInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  participationId: ID!
}

"""Autogenerated return type of LeaveJourneysSession."""
type LeaveJourneysSessionPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  session: JourneysSession
  success: Boolean!
}

"""Autogenerated input type of LikePensieveMessage"""
input LikePensieveMessageInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  messageId: ID!
}

"""Autogenerated return type of LikePensieveMessage."""
type LikePensieveMessagePayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  message: PensieveMessage!
  success: Boolean!
}

type LocationAccessGrant implements Node {
  createdAt: DateTime!
  expiresAt: DateTime!

  """ID of the object."""
  id: ID!
  locateUrl: String!
  password: String!
  recipient: String!
}

type LocationDetails {
  address: String!
  coordinates: Coordinates!
  expiresAt: DateTime!
  trail: [LocationTrailMarker!]!
}

type LocationLog implements Node {
  approximateAddress: String!
  approximateCoordinates: Coordinates!
  details(password: String!): LocationDetails!
  googleMapsAreaUrl: String!

  """ID of the object."""
  id: ID!
  timestamp: DateTime!
}

type LocationTrailMarker {
  coordinates: Coordinates!
  id: ID!
  timestamp: DateTime!
}

type LyricLine {
  isExplicit: Boolean!
  startTimeMilliseconds: Int!
  words: String!
}

type Mutation {
  activateScottkitSignal(
    """Parameters for ActivateScottkitSignal"""
    input: ActivateScottkitSignalInput!
  ): ActivateScottkitSignalPayload!
  addJournalEntryComment(
    """Parameters for AddJournalEntryComment"""
    input: AddJournalEntryCommentInput!
  ): AddJournalEntryCommentPayload!
  createDishwatchDevice(
    """Parameters for CreateDishwatcherDevice"""
    input: CreateDishwatcherDeviceInput!
  ): CreateDishwatcherDevicePayload!
  createICloudConnection(
    """Parameters for CreateICloudConnection"""
    input: CreateICloudConnectionInput!
  ): CreateICloudConnectionPayload!
  createLocationAccessGrant(
    """Parameters for CreateLocationAccessGrant"""
    input: CreateLocationAccessGrantInput!
  ): CreateLocationAccessGrantPayload!
  createTimelinePhotoWithTimestamp(
    """Parameters for CreateTimelinePhotoWithTimestamp"""
    input: CreateTimelinePhotoWithTimestampInput!
  ): CreateTimelinePhotoWithTimestampPayload!
  deleteGoogleConnection(
    """Parameters for DeleteGoogleConnection"""
    input: DeleteGoogleConnectionInput!
  ): DeleteGoogleConnectionPayload!
  deleteICloudConnection(
    """Parameters for DeleteICloudConnection"""
    input: DeleteICloudConnectionInput!
  ): DeleteICloudConnectionPayload!
  deleteLocationAccessGrant(
    """Parameters for DeleteLocationAccessGrant"""
    input: DeleteLocationAccessGrantInput!
  ): DeleteLocationAccessGrantPayload!
  deleteSpotifyConnection(
    """Parameters for DeleteSpotifyConnection"""
    input: DeleteSpotifyConnectionInput!
  ): DeleteSpotifyConnectionPayload!
  importTimelineActivities(
    """Parameters for ImportTimelineActivities"""
    input: ImportTimelineActivitiesInput!
  ): ImportTimelineActivitiesPayload!
  importTimelinePhotos(
    """Parameters for ImportTimelinePhotos"""
    input: ImportTimelinePhotosInput!
  ): ImportTimelinePhotosPayload!
  leaveJourneysSession(
    """Parameters for LeaveJourneysSession"""
    input: LeaveJourneysSessionInput!
  ): LeaveJourneysSessionPayload!
  likePensieveMessage(
    """Parameters for LikePensieveMessage"""
    input: LikePensieveMessageInput!
  ): LikePensieveMessagePayload!
  requestUserEmailVerification(
    """Parameters for RequestUserEmailVerification"""
    input: RequestUserEmailVerificationInput!
  ): RequestUserEmailVerificationPayload!
  requestUserPasswordReset(
    """Parameters for RequestUserPasswordReset"""
    input: RequestUserPasswordResetInput!
  ): RequestUserPasswordResetPayload!
  sendPensieveMessage(
    """Parameters for SendPensieveMessage"""
    input: SendPensieveMessageInput!
  ): SendPensieveMessagePayload!
  syncJournalEntries(
    """Parameters for SyncJournalEntries"""
    input: SyncJournalEntriesInput!
  ): SyncJournalEntriesPayload!
  syncLocationLogs(
    """Parameters for SyncLocationLogs"""
    input: SyncLocationLogsInput!
  ): SyncLocationLogsPayload!
  testMutation(
    """Parameters for TestMutation"""
    input: TestMutationInput!
  ): TestMutationPayload!
  unlikePensieveMessage(
    """Parameters for UnlikePensieveMessage"""
    input: UnlikePensieveMessageInput!
  ): UnlikePensieveMessagePayload!
  updateDishwatchDevice(
    """Parameters for UpdateDishwatchDevice"""
    input: UpdateDishwatchDeviceInput!
  ): UpdateDishwatchDevicePayload!
  updateJourneysSessionParticipation(
    """Parameters for UpdateJourneysSessionParticipation"""
    input: UpdateJourneysSessionParticipationInput!
  ): UpdateJourneysSessionParticipationPayload!
  updateUserEmail(
    """Parameters for UpdateUserEmail"""
    input: UpdateUserEmailInput!
  ): UpdateUserEmailPayload!
  updateUserProfile(
    """Parameters for UpdateUserProfile"""
    input: UpdateUserProfileInput!
  ): UpdateUserProfilePayload!
  verifyICloudSecurityCode(
    """Parameters for VerifyICloudSecurityCode"""
    input: VerifyICloudSecurityCodeInput!
  ): VerifyICloudSecurityCodePayload!
}

"""An object with an ID."""
interface Node {
  """ID of the object."""
  id: ID!
}

type NotionComment {
  createdAt: DateTime!
  id: String!
  modifiedAt: DateTime!
  richText: JSON!
}

type OAuthConnection {
  credentials: OAuthCredentials
  status: OAuthConnectionStatus!
}

enum OAuthConnectionStatus {
  CONNECTED
  DISCONNECTED
}

type OAuthCredentials implements Node {
  """ID of the object."""
  id: ID!
  name: String!
  refreshToken: String
  uid: String!
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, the cursor to continue."""
  endCursor: String

  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String
}

type PensieveMessage implements Node {
  from: PensieveMessageSender!

  """ID of the object."""
  id: ID!
  isEdited: Boolean!
  likedByViewer: Boolean!
  likes: Int!
  text: String!
  timestamp: DateTime!
}

enum PensieveMessageSender {
  BOT
  USER
}

type Query {
  activityStatus: String
  announcement: String
  bootedAt: DateTime!
  contactEmail: String!
  currentlyPlaying: CurrentlyPlaying
  explorations: [String!]!
  googleConnection: OAuthConnection!
  icloudConnection: ICloudConnection!
  imageBySignedId(signedId: String!): Image
  journalEntry(id: ID!): JournalEntry
  journalEntryComments(entryId: ID!): [NotionComment!]!
  journeysSession(id: ID!): JourneysSession
  journeysSessionParticipation(id: ID!): JourneysSessionParticipation
  journeysSessions(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): JourneysSessionConnection!
  location: LocationLog
  locationAccessGrants: [LocationAccessGrant!]!
  passwordStrength(password: String!): Float!
  pensieveMessages(to: String): [PensieveMessage!]!
  resume(variant: String): JSON!
  spotifyConnection: OAuthConnection!
  testEcho(text: String): String!
  timelineActivities(after: DateTime!, before: DateTime!): [TimelineActivity!]!
  timezone: Timezone!
  uploadBySignedId(signedId: String!): Image
  user(id: ID!): User
  viewer: User
}

"""Autogenerated input type of RequestUserEmailVerification"""
input RequestUserEmailVerificationInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  email: String!
}

"""Autogenerated return type of RequestUserEmailVerification."""
type RequestUserEmailVerificationPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  success: Boolean!
}

"""Autogenerated input type of RequestUserPasswordReset"""
input RequestUserPasswordResetInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  email: String!
}

"""Autogenerated return type of RequestUserPasswordReset."""
type RequestUserPasswordResetPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  success: Boolean!
}

enum ScottkitSignal {
  BREAK
  PANIC
  RAND
}

"""Autogenerated input type of SendPensieveMessage"""
input SendPensieveMessageInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  text: String!
}

"""Autogenerated return type of SendPensieveMessage."""
type SendPensieveMessagePayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  success: Boolean!
  user: PensieveMessage!
}

type SpotifyAlbum {
  id: String!
  imageUrl: String
  name: String!
  url: String!
}

type SpotifyArtist {
  id: String!
  name: String!
  url: String!
}

type SpotifyTrack {
  album: SpotifyAlbum!
  artists: [SpotifyArtist!]!
  durationMilliseconds: Int!
  id: String!
  lyrics: [LyricLine!]
  name: String!
  url: String!
}

type Subscription {
  activityStatus: String
  currentlyPlaying: CurrentlyPlaying
  journeysSessionParticipation(sessionId: ID!): JourneysSessionParticipation
  location: LocationLog
  pensieveMessage(to: String): PensieveMessage
  testSubscription: Int!
}

"""Autogenerated input type of SyncJournalEntries"""
input SyncJournalEntriesInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated return type of SyncJournalEntries."""
type SyncJournalEntriesPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  success: Boolean!
}

"""Autogenerated input type of SyncLocationLogs"""
input SyncLocationLogsInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated return type of SyncLocationLogs."""
type SyncLocationLogsPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  success: Boolean!
}

type TestModel {
  birthday: Date
  id: ID!
  name: String!
}

"""Autogenerated input type of TestMutation"""
input TestMutationInput {
  birthday: Date

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  name: String!
}

"""Autogenerated return type of TestMutation."""
type TestMutationPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  errors: [InputFieldError!]
  model: TestModel
  success: Boolean!
}

type TimelineActivity implements Node {
  address: String
  distanceMeters: Float!
  endedAt: DateTime!

  """ID of the object."""
  id: ID!
  location: JSON!
  movementSpeedMetersPerSecond: Float!
  name: String
  photos: [TimelinePhoto!]!
  startedAt: DateTime!
  timezone: Timezone!
  timezoneName: String!
  type: TimelineActivityType!
}

enum TimelineActivityType {
  ACTIVITY_SEGMENT
  PLACE_VISIT
}

type TimelinePhoto implements Node {
  coordinates: Coordinates

  """ID of the object."""
  id: ID!
  image: Image!
  takenAt: DateTime!
}

type Timezone {
  abbreviation: String!
  name: String!
  offset: String!
  offsetMinutes: Int!
}

"""Autogenerated input type of UnlikePensieveMessage"""
input UnlikePensieveMessageInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  messageId: ID!
}

"""Autogenerated return type of UnlikePensieveMessage."""
type UnlikePensieveMessagePayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  message: PensieveMessage!
  success: Boolean!
}

"""Autogenerated input type of UpdateDishwatchDevice"""
input UpdateDishwatchDeviceInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  deviceId: ID!
  name: String!
}

"""Autogenerated return type of UpdateDishwatchDevice."""
type UpdateDishwatchDevicePayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  device: DishwatcherDevice
  errors: [InputFieldError!]
  success: Boolean!
}

"""Autogenerated input type of UpdateJourneysSessionParticipation"""
input UpdateJourneysSessionParticipationInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  goal: String!
  participantName: String!
  participationId: ID!
}

"""Autogenerated return type of UpdateJourneysSessionParticipation."""
type UpdateJourneysSessionParticipationPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  errors: [InputFieldError!]
  participation: JourneysSessionParticipation
  success: Boolean!
}

"""Autogenerated input type of UpdateUserEmail"""
input UpdateUserEmailInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  currentPassword: String!
  email: String!
}

"""Autogenerated return type of UpdateUserEmail."""
type UpdateUserEmailPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  errors: [InputFieldError!]
  success: Boolean!
  user: User
}

"""Autogenerated input type of UpdateUserProfile"""
input UpdateUserProfileInput {
  avatar: UploadInput

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  name: String!
}

"""Autogenerated return type of UpdateUserProfile."""
type UpdateUserProfilePayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  errors: [InputFieldError!]
  success: Boolean!
  user: User
}

interface Upload {
  byteSize: Int!
  filename: String!
  signedId: String!
  url: String!
}

input UploadInput {
  signedId: String!
}

type User implements Node {
  avatar: Image
  email: String!

  """ID of the object."""
  id: ID!
  isOwner: Boolean!
  name: String!
  unverifiedEmail: String
}

"""Autogenerated input type of VerifyICloudSecurityCode"""
input VerifyICloudSecurityCodeInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  code: String!
}

"""Autogenerated return type of VerifyICloudSecurityCode."""
type VerifyICloudSecurityCodePayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  success: Boolean!
}