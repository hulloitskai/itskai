"""
Requires that exactly one field must be supplied and that field must not be `null`.
"""
directive @oneOf on INPUT_OBJECT

"""Autogenerated input type of AccountUpdateMutation"""
input AccountUpdateMutationInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  name: String!
}

"""Autogenerated return type of AccountUpdateMutation."""
type AccountUpdateMutationPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  errors: [ValidationError!]
  user: User
}

"""An ISO 8601-encoded date"""
scalar Date

"""An ISO 8601-encoded datetime"""
scalar DateTime

type ICloudCredentials implements Node {
  cookies: String
  email: String!

  """ID of the object."""
  id: ID!
  password: String!
  session: JSON
}

"""Autogenerated input type of ICloudCredentialsUpdateMutation"""
input ICloudCredentialsUpdateMutationInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  email: String!
  password: String!
}

"""Autogenerated return type of ICloudCredentialsUpdateMutation."""
type ICloudCredentialsUpdateMutationPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  errors: [ValidationError!]
  icloudCredentials: ICloudCredentials
}

"""
Autogenerated input type of ICloudCredentialsVerifySecurityCodeMutation
"""
input ICloudCredentialsVerifySecurityCodeMutationInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  code: String!
}

"""
Autogenerated return type of ICloudCredentialsVerifySecurityCodeMutation.
"""
type ICloudCredentialsVerifySecurityCodeMutationPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  icloudCredentials: ICloudCredentials!
}

"""Represents untyped JSON"""
scalar JSON

type Mutation {
  accountUpdate(
    """Parameters for AccountUpdateMutation"""
    input: AccountUpdateMutationInput!
  ): AccountUpdateMutationPayload!
  icloudCredentialsUpdate(
    """Parameters for ICloudCredentialsUpdateMutation"""
    input: ICloudCredentialsUpdateMutationInput!
  ): ICloudCredentialsUpdateMutationPayload!
  icloudCredentialsVerifySecurityCode(
    """Parameters for ICloudCredentialsVerifySecurityCodeMutation"""
    input: ICloudCredentialsVerifySecurityCodeMutationInput!
  ): ICloudCredentialsVerifySecurityCodeMutationPayload!
  testMutation(
    """Parameters for TestMutation"""
    input: TestMutationInput!
  ): TestMutationPayload!
}

"""An object with an ID."""
interface Node {
  """ID of the object."""
  id: ID!
}

"""An object with an ID."""
interface ObsidianEntry {
  createdAt: DateTime!

  """ID of the object."""
  id: ID!
  name: String!
  updatedAt: DateTime!
}

type ObsidianGhostNote implements Node & ObsidianEntry {
  createdAt: DateTime!

  """ID of the object."""
  id: ID!
  name: String!
  updatedAt: DateTime!
}

type ObsidianNote implements Node & ObsidianEntry {
  aliases: [String!]!
  content: String!
  createdAt: DateTime!

  """ID of the object."""
  id: ID!
  modifiedAt: DateTime!
  name: String!
  referencedBy: [ObsidianNote!]!
  references: [ObsidianEntry!]!
  tags: [String!]!
  updatedAt: DateTime!
}

"""The connection type for ObsidianNote."""
type ObsidianNoteConnection {
  """A list of edges."""
  edges: [ObsidianNoteEdge!]!

  """A list of nodes."""
  nodes: [ObsidianNote!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!
  totalCount: Int!
}

"""An edge in a connection."""
type ObsidianNoteEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: ObsidianNote
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, the cursor to continue."""
  endCursor: String

  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String
}

type Query {
  contactEmail: String!
  icloudCredentials: ICloudCredentials

  """Fetches an object given its ID."""
  node(
    """ID of the object."""
    id: ID!
  ): Node

  """Fetches a list of objects given a list of IDs."""
  nodes(
    """IDs of the objects."""
    ids: [ID!]!
  ): [Node]!
  obsidianNote(id: ID!): ObsidianNote
  obsidianNoteByName(name: String!): ObsidianNote
  obsidianNotes(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): ObsidianNoteConnection!

  """Kai's JSON Resume (https://jsonresume.org/)"""
  resume: JSON!
  testEcho(text: String): String!

  """The currently authenticated user."""
  viewer: User
}

type SpotifyTrack {
  name: String
}

type Subscription {
  currentlyPlaying: SpotifyTrack
  testSubscription: Int!
}

type TestModel {
  birthday: Date
  id: ID!
  name: String!
}

"""Autogenerated input type of TestMutation"""
input TestMutationInput {
  birthday: Date

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  name: String!
}

"""Autogenerated return type of TestMutation."""
type TestMutationPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  errors: [ValidationError!]
  model: TestModel
}

type User implements Node {
  email: String!

  """ID of the object."""
  id: ID!
  isOwner: Boolean!
  name: String!
  unconfirmedEmail: String
}

type ValidationError {
  field: String!
  message: String!
}