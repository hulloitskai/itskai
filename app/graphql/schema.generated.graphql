"""
Requires that exactly one field must be supplied and that field must not be `null`.
"""
directive @oneOf on INPUT_OBJECT

"""An ISO 8601-encoded date"""
scalar Date

"""An ISO 8601-encoded datetime"""
scalar DateTime

type ICloudCredentials implements Node {
  cookies: String
  email: String!

  """ID of the object."""
  id: ID!
  password: String!
  session: JSON
}

"""Autogenerated input type of ICloudCredentialsUpdate"""
input ICloudCredentialsUpdateInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  email: String!
  password: String!
}

"""Autogenerated return type of ICloudCredentialsUpdate."""
type ICloudCredentialsUpdatePayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  errors: [InputFieldError!]
  icloudCredentials: ICloudCredentials
}

"""Autogenerated input type of ICloudCredentialsVerifySecurityCode"""
input ICloudCredentialsVerifySecurityCodeInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  code: String!
}

"""Autogenerated return type of ICloudCredentialsVerifySecurityCode."""
type ICloudCredentialsVerifySecurityCodePayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  icloudCredentials: ICloudCredentials!
}

type InputFieldError {
  field: String!
  message: String!
}

"""Represents untyped JSON"""
scalar JSON

type Mutation {
  icloudCredentialsUpdate(
    """Parameters for ICloudCredentialsUpdate"""
    input: ICloudCredentialsUpdateInput!
  ): ICloudCredentialsUpdatePayload!
  icloudCredentialsVerifySecurityCode(
    """Parameters for ICloudCredentialsVerifySecurityCode"""
    input: ICloudCredentialsVerifySecurityCodeInput!
  ): ICloudCredentialsVerifySecurityCodePayload!
  obsidianNoteSynchronize(
    """Parameters for ObsidianNoteSynchronize"""
    input: ObsidianNoteSynchronizeInput!
  ): ObsidianNoteSynchronizePayload!
  testMutation(
    """Parameters for TestMutation"""
    input: TestMutationInput!
  ): TestMutationPayload!
  userChangeEmail(
    """Parameters for UserChangeEmail"""
    input: UserChangeEmailInput!
  ): UserChangeEmailPayload!
  userUpdate(
    """Parameters for UserUpdate"""
    input: UserUpdateInput!
  ): UserUpdatePayload!
}

"""An object with an ID."""
interface Node {
  """ID of the object."""
  id: ID!
}

type OAuthCredentials implements Node {
  accessToken: String

  """ID of the object."""
  id: ID!
  name: String!
  refreshToken: String
  uid: String!
}

"""An object with an ID."""
interface ObsidianEntry implements Node {
  createdAt: DateTime!
  displayName: String!

  """ID of the object."""
  id: ID!
  name: String!
  referencedBy: [ObsidianNote!]!
  updatedAt: DateTime!
}

type ObsidianNote implements Node & ObsidianEntry {
  aliases: [String!]!
  blurb: String
  content: String
  createdAt: DateTime!
  displayName: String!

  """ID of the object."""
  id: ID!
  isPublished: Boolean!
  modifiedAt: DateTime!
  name: String!
  plainBlurb: String
  referencedBy: [ObsidianNote!]!
  references: [ObsidianEntry!]!
  tags: [String!]!
  updatedAt: DateTime!
  url: String!
}

"""The connection type for ObsidianNote."""
type ObsidianNoteConnection {
  """A list of edges."""
  edges: [ObsidianNoteEdge!]!

  """A list of nodes."""
  nodes: [ObsidianNote!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!
  totalCount: Int!
}

"""An edge in a connection."""
type ObsidianNoteEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: ObsidianNote!
}

"""Autogenerated input type of ObsidianNoteSynchronize"""
input ObsidianNoteSynchronizeInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  force: Boolean
}

"""Autogenerated return type of ObsidianNoteSynchronize."""
type ObsidianNoteSynchronizePayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  success: Boolean
}

type ObsidianStub implements Node & ObsidianEntry {
  createdAt: DateTime!
  displayName: String!

  """ID of the object."""
  id: ID!
  name: String!
  referencedBy: [ObsidianNote!]!
  updatedAt: DateTime!
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, the cursor to continue."""
  endCursor: String

  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String
}

type Query {
  activityStatus: String

  """Kai's contact email."""
  contactEmail: String!

  """What I'm currently listening to on Spotify!"""
  currentlyPlaying: SpotifyTrack

  """Kai's personal iCloud credentials (#securityStartsHere)."""
  icloudCredentials: ICloudCredentials

  """Linear OAuth credentials."""
  linearCredentials: OAuthCredentials
  obsidianNote(id: ID!): ObsidianNote
  obsidianNoteByName(name: String!): ObsidianNote
  obsidianNotes(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
    modifiedAfter: DateTime
    modifiedBefore: DateTime
  ): ObsidianNoteConnection!
  passwordStrength(password: String!): Float!

  """Kai's JSON Resume (https://jsonresume.org/)."""
  resume: JSON!

  """Spotify OAuth credentials."""
  spotifyCredentials: OAuthCredentials
  testEcho(text: String): String!

  """Kai's current timezone."""
  timezone: Timezone!

  """The currently authenticated user."""
  viewer: User
}

type SpotifyAlbum {
  id: String!
  imageUrl: String
  name: String!
  url: String!
}

type SpotifyArtist {
  id: String!
  name: String!
  url: String!
}

type SpotifyTrack {
  album: SpotifyAlbum!
  artists: [SpotifyArtist!]!
  id: String!
  name: String!
  url: String!
}

type Subscription {
  activityStatus: String

  """What I'm currently listening to on Spotify!"""
  currentlyPlaying: SpotifyTrack
  testSubscription: Int!
}

type TestModel {
  birthday: Date
  id: ID!
  name: String!
}

"""Autogenerated input type of TestMutation"""
input TestMutationInput {
  birthday: Date

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  name: String!
}

"""Autogenerated return type of TestMutation."""
type TestMutationPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  errors: [InputFieldError!]
  model: TestModel
}

type Timezone {
  abbreviation: String!
  name: String!
  offset: String!
  offsetMinutes: Int!
}

type User implements Node {
  email: String!

  """ID of the object."""
  id: ID!
  isOwner: Boolean!
  name: String!
  unconfirmedEmail: String
}

"""Autogenerated input type of UserChangeEmail"""
input UserChangeEmailInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  currentPassword: String!
  email: String!
}

"""Autogenerated return type of UserChangeEmail."""
type UserChangeEmailPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  errors: [InputFieldError!]
  user: User
}

"""Autogenerated input type of UserUpdate"""
input UserUpdateInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  name: String!
}

"""Autogenerated return type of UserUpdate."""
type UserUpdatePayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  errors: [InputFieldError!]
  user: User
}